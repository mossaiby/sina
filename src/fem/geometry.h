//        _             
//    ___(_)_ __   __ _ 
//   / __| | '_ \ / _` |    simple and intuitive numerical analysis
//   \__ \ | | | | (_| |    Farshid Mossaiby, University of Isfahan
//   |___/_|_| |_|\__,_|    (c) copyright 2019, all rights reserved
//                      
//                      
// geometry.h
//
// geometry related classes
//

#pragma once

// includes, project

#include "sina.h"
#include "algebra.h"
#include "container.h"
#include "fem/quadrature.h"


namespace sina
{
  namespace kernel
  {
    enum class geometry_t
    {
      bar, triangle, quadrilateral, tetrahedral, brick
    };

    enum class shape_function_t
    {
      lagrange_uniform, lagrange_gll
    };

    enum class shape_function_derivative_t
    {
      // zeroth order derivative
      derivative_0,
      derivative_0_0,
      derivative_0_0_0,

      // first order derivatives
      derivative_1,
      derivative_1_0, derivative_0_1,
      derivative_1_0_0, derivative_0_1_0, derivative_0_0_1,

      // second order derivatives
      derivative_2,
      derivative_2_0, derivative_1_1, derivative_0_2,
      derivative_2_0_0, derivative_0_2_0, derivative_0_0_2, derivative_0_1_1, derivative_1_0_1, derivative_1_1_0 
    };

    enum class quadrature_type_t
    {
      gauss_legendre, gauss_lobatto
    };

    class geometry
    {
      public:

      template <sina::kernel::geometry_t __geometry, sina::kernel::shape_function_t __shape_function, sina::kernel::index_t __order, sina::kernel::shape_function_derivative_t __derivative> static void get(const sina::kernel::vector &p, sina::kernel::vector &s);
    };

    class quadrature
    {
      public:

      template <sina::kernel::geometry_t __geometry, sina::kernel::quadrature_type_t __type, sina::kernel::index_t __order> static void get(sina::kernel::matrix &points, sina::kernel::vector &weights);

      template <sina::kernel::geometry_t __geometry, sina::kernel::quadrature_type_t __type> static void get(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights);

      protected:

      static sina::kernel::static_container<sina::kernel::matrix, 50> gauss_legendre_points_quadrilateral;
      static sina::kernel::static_container<sina::kernel::vector, 50> gauss_legendre_weights_quadrilateral;

      static sina::kernel::static_container<sina::kernel::matrix, 49> gauss_lobatto_points_quadrilateral;
      static sina::kernel::static_container<sina::kernel::vector, 49> gauss_lobatto_weights_quadrilateral;

      static sina::kernel::static_container<sina::kernel::matrix, 50> gauss_legendre_points_brick;
      static sina::kernel::static_container<sina::kernel::vector, 50> gauss_legendre_weights_brick;

      static sina::kernel::static_container<sina::kernel::matrix, 49> gauss_lobatto_points_brick;
      static sina::kernel::static_container<sina::kernel::vector, 49> gauss_lobatto_weights_brick;

      static void build_gauss_legendre_quadrilateral_points(const sina::kernel::index_t order, sina::kernel::matrix &points_1d, sina::kernel::vector &weights_1d)
      {
        sina::kernel::quadrature::gauss_legendre_points_quadrilateral[order - 1].resize(order * order, 2);
        sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[order - 1].resize(order * order);

        for (sina::kernel::index_t i = 0; i < order; i++)
        {
          for (sina::kernel::index_t j = 0; j < order; j++)
          {
            sina::kernel::quadrature::gauss_legendre_points_quadrilateral[order - 1](i * order + j, 0) = points_1d(i, 0);
            sina::kernel::quadrature::gauss_legendre_points_quadrilateral[order - 1](i * order + j, 1) = points_1d(j, 0);
            sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[order - 1][i * order + j] = weights_1d[i] * weights_1d[j];
          }
        }
      }

      static void build_gauss_lobatto_quadrilateral_points(const sina::kernel::index_t order, sina::kernel::matrix &points_1d, sina::kernel::vector &weights_1d)
      {
        sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[order - 2].resize(order * order, 2);
        sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[order - 2].resize(order * order);

        for (sina::kernel::index_t i = 0; i < order; i++)
        {
          for (sina::kernel::index_t j = 0; j < order; j++)
          {
            sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[order - 2](i * order + j, 0) = points_1d(i, 0);
            sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[order - 2](i * order + j, 1) = points_1d(j, 0);
            sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[order - 2][i * order + j] = weights_1d[i] * weights_1d[j];
          }
        }
      }

      static void build_gauss_legendre_brick_points(const sina::kernel::index_t order, sina::kernel::matrix &points_1d, sina::kernel::vector &weights_1d)
      {
        sina::kernel::quadrature::gauss_legendre_points_brick[order - 1].resize(order * order * order, 3);
        sina::kernel::quadrature::gauss_legendre_weights_brick[order - 1].resize(order * order * order);

        for (sina::kernel::index_t i = 0; i < order; i++)
        {
          for (sina::kernel::index_t j = 0; j < order; j++)
          {
            for (sina::kernel::index_t k = 0; k < order; k++)
            {
              sina::kernel::quadrature::gauss_legendre_points_brick[order - 1](i * order * order + j * order + k, 0) = points_1d(i, 0);
              sina::kernel::quadrature::gauss_legendre_points_brick[order - 1](i * order * order + j * order + k, 1) = points_1d(j, 0);
              sina::kernel::quadrature::gauss_legendre_points_brick[order - 1](i * order * order + j * order + k, 2) = points_1d(k, 0);
              sina::kernel::quadrature::gauss_legendre_weights_brick[order - 1][i * order * order + j * order + k] = weights_1d[i] * weights_1d[j] * weights_1d[k];
            }
          }
        }
      }

      static void build_gauss_lobatto_brick_points(const sina::kernel::index_t order, sina::kernel::matrix &points_1d, sina::kernel::vector &weights_1d)
      {
        sina::kernel::quadrature::gauss_lobatto_points_brick[order - 2].resize(order * order * order, 3);
        sina::kernel::quadrature::gauss_lobatto_weights_brick[order - 2].resize(order * order * order);

        for (sina::kernel::index_t i = 0; i < order; i++)
        {
          for (sina::kernel::index_t j = 0; j < order; j++)
          {
            for (sina::kernel::index_t k = 0; k < order; k++)
            {
              sina::kernel::quadrature::gauss_lobatto_points_brick[order - 2](i * order * order + j * order + k, 0) = points_1d(i, 0);
              sina::kernel::quadrature::gauss_lobatto_points_brick[order - 2](i * order * order + j * order + k, 1) = points_1d(j, 0);
              sina::kernel::quadrature::gauss_lobatto_points_brick[order - 2](i * order * order + j * order + k, 2) = points_1d(k, 0);
              sina::kernel::quadrature::gauss_lobatto_weights_brick[order - 2][i * order * order + j * order + k] = weights_1d[i] * weights_1d[j] * weights_1d[k];
            }
          }
        }
      }
    };

    // static data

    sina::kernel::static_container<sina::kernel::matrix, 50> sina::kernel::quadrature::gauss_legendre_points_quadrilateral;
    sina::kernel::static_container<sina::kernel::vector, 50> sina::kernel::quadrature::gauss_legendre_weights_quadrilateral;

    sina::kernel::static_container<sina::kernel::matrix, 49> sina::kernel::quadrature::gauss_lobatto_points_quadrilateral;
    sina::kernel::static_container<sina::kernel::vector, 49> sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral;

    sina::kernel::static_container<sina::kernel::matrix, 50> sina::kernel::quadrature::gauss_legendre_points_brick;
    sina::kernel::static_container<sina::kernel::vector, 50> sina::kernel::quadrature::gauss_legendre_weights_brick;

    sina::kernel::static_container<sina::kernel::matrix, 49> sina::kernel::quadrature::gauss_lobatto_points_brick;
    sina::kernel::static_container<sina::kernel::vector, 49> sina::kernel::quadrature::gauss_lobatto_weights_brick;
    
    // 1d Lagrange shape functions

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(2);

      s[0] = 0.5 - 0.5 * x;
      s[1] = 0.5 + 0.5 * x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(3);

      s[0] = (-0.5 + 0.5 * x) * x;
      s[1] = 1. - x * x;
      s[2] = (0.5 + 0.5 * x) * x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(4);

      s[0] = -0.0625 + x * (0.0625 + (0.5625 - 0.5625 * x) * x);
      s[1] = 0.5625 + x * (-1.6875 + x * (-0.5625 + 1.6875 * x));
      s[2] = 0.5625 + x * (1.6875 + (-0.5625 - 1.6875 * x) * x);
      s[3] = -0.0625 + x * (-0.0625 + (0.5625 + 0.5625 * x) * x);
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(5);

      s[0] = x * (0.16666666666666666 + x * (-0.16666666666666666 + (-0.6666666666666666 + 0.6666666666666666 * x) * x));
      s[1] = x * (-1.3333333333333333 + x * (2.6666666666666665 + (1.3333333333333333 - 2.6666666666666665 * x) * x));
      s[2] = 1. + x * x * (-5. + 4. * x * x);
      s[3] = x * (1.3333333333333333 + x * (2.6666666666666665 + (-1.3333333333333333 - 2.6666666666666665 * x) * x));
      s[4] = x * (-0.16666666666666666 + x * (-0.16666666666666666 + (0.6666666666666666 + 0.6666666666666666 * x) * x));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(6);

      s[0] = 0.01171875 + x * (-0.01171875 + x * (-0.3255208333333333 + x * (0.3255208333333333 + (0.8138020833333334 - 0.8138020833333334 * x) * x)));
      s[1] = -0.09765625 + x * (0.16276041666666666 + x * (2.5390625 + x * (-4.231770833333333 + x * (-2.44140625 + 4.069010416666667 * x))));
      s[2] = 0.5859375 + x * (-2.9296875 + x * (-2.2135416666666665 + x * (11.067708333333334 + (1.6276041666666667 - 8.138020833333334 * x) * x)));
      s[3] = 0.5859375 + x * (2.9296875 + x * (-2.2135416666666665 + x * (-11.067708333333334 + x * (1.6276041666666667 + 8.138020833333334 * x))));
      s[4] = -0.09765625 + x * (-0.16276041666666666 + x * (2.5390625 + x * (4.231770833333333 + (-2.44140625 - 4.069010416666667 * x) * x)));
      s[5] = 0.01171875 + x * (0.01171875 + x * (-0.3255208333333333 + x * (-0.3255208333333333 + (0.8138020833333334 + 0.8138020833333334 * x) * x)));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(7);

      s[0] = x * (-0.05 + x * (0.05 + x * (0.5625 + x * (-0.5625 + x * (-1.0125 + 1.0125 * x)))));
      s[1] = x * (0.45 + x * (-0.675 + x * (-4.5 + x * (6.75 + (4.05 - 6.075 * x) * x))));
      s[2] = x * (-2.25 + x * (6.75 + x * (7.3125 + x * (-21.9375 + x * (-5.0625 + 15.1875 * x)))));
      s[3] = 1. + x * x * (-12.25 + x * x * (31.5 - 20.25 * x * x));
      s[4] = x * (2.25 + x * (6.75 + x * (-7.3125 + x * (-21.9375 + x * (5.0625 + 15.1875 * x)))));
      s[5] = x * (-0.45 + x * (-0.675 + x * (4.5 + x * (6.75 + (-4.05 - 6.075 * x) * x))));
      s[6] = x * (0.05 + x * (0.05 + x * (-0.5625 + x * (-0.5625 + x * (1.0125 + 1.0125 * x)))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(8);

      s[0] = -0.00244140625 + x * (0.00244140625 + x * (0.13770616319444445 + x * (-0.13770616319444445 + x * (-0.9118381076388888 + x * (0.9118381076388888 + (1.2765733506944446 - 1.2765733506944446 * x) * x)))));
      s[1] = 0.02392578125 + x * (-0.03349609375 + x * (-1.3265516493055556 + x * (1.8571723090277779 + x * (7.685492621527778 + x * (-10.759689670138888 + x * (-6.382866753472222 + 8.936013454861111 * x))))));
      s[2] = -0.11962890625 + x * (0.2791341145833333 + x * (6.21591796875 + x * (-14.50380859375 + x * (-17.58544921875 + x * (41.03271484375 + (11.48916015625 - 26.808040364583334 * x) * x)))));
      s[3] = 0.59814453125 + x * (-4.18701171875 + x * (-5.027072482638889 + x * (35.18950737847222 + x * (10.81179470486111 + x * (-75.68256293402777 + x * (-6.382866753472222 + 44.68006727430556 * x))))));
      s[4] = 0.59814453125 + x * (4.18701171875 + x * (-5.027072482638889 + x * (-35.18950737847222 + x * (10.81179470486111 + x * (75.68256293402777 + (-6.382866753472222 - 44.68006727430556 * x) * x)))));
      s[5] = -0.11962890625 + x * (-0.2791341145833333 + x * (6.21591796875 + x * (14.50380859375 + x * (-17.58544921875 + x * (-41.03271484375 + x * (11.48916015625 + 26.808040364583334 * x))))));
      s[6] = 0.02392578125 + x * (0.03349609375 + x * (-1.3265516493055556 + x * (-1.8571723090277779 + x * (7.685492621527778 + x * (10.759689670138888 + (-6.382866753472222 - 8.936013454861111 * x) * x)))));
      s[7] = -0.00244140625 + x * (-0.00244140625 + x * (0.13770616319444445 + x * (0.13770616319444445 + x * (-0.9118381076388888 + x * (-0.9118381076388888 + x * (1.2765733506944446 + 1.2765733506944446 * x))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(9);

      s[0] = x * (0.014285714285714285 + x * (-0.014285714285714285 + x * (-0.3111111111111111 + x * (0.3111111111111111 + x * (1.4222222222222223 + x * (-1.4222222222222223 + x * (-1.6253968253968254 + 1.6253968253968254 * x)))))));
      s[1] = x * (-0.1523809523809524 + x * (0.20317460317460317 + x * (3.2 + x * (-4.266666666666667 + x * (-12.8 + x * (17.066666666666666 + (9.752380952380953 - 13.003174603174603 * x) * x))))));
      s[2] = x * (0.8 + x * (-1.6 + x * (-15.022222222222222 + x * (30.044444444444444 + x * (36.977777777777774 + x * (-73.95555555555555 + x * (-22.755555555555556 + 45.51111111111111 * x)))))));
      s[3] = x * (-3.2 + x * (12.8 + x * (21.68888888888889 + x * (-86.75555555555556 + x * (-41.24444444444445 + x * (164.9777777777778 + (22.755555555555556 - 91.02222222222223 * x) * x))))));
      s[4] = 1. + x * x * (-22.77777777777778 + x * x * (121.33333333333333 + x * x * (-213.33333333333334 + 113.77777777777777 * x * x)));
      s[5] = x * (3.2 + x * (12.8 + x * (-21.68888888888889 + x * (-86.75555555555556 + x * (41.24444444444445 + x * (164.9777777777778 + (-22.755555555555556 - 91.02222222222223 * x) * x))))));
      s[6] = x * (-0.8 + x * (-1.6 + x * (15.022222222222222 + x * (30.044444444444444 + x * (-36.977777777777774 + x * (-73.95555555555555 + x * (22.755555555555556 + 45.51111111111111 * x)))))));
      s[7] = x * (0.1523809523809524 + x * (0.20317460317460317 + x * (-3.2 + x * (-4.266666666666667 + x * (12.8 + x * (17.066666666666666 + (-9.752380952380953 - 13.003174603174603 * x) * x))))));
      s[8] = x * (-0.014285714285714285 + x * (-0.014285714285714285 + x * (0.3111111111111111 + x * (0.3111111111111111 + x * (-1.4222222222222223 + x * (-1.4222222222222223 + x * (1.6253968253968254 + 1.6253968253968254 * x)))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(10);

      s[0] = 0.0005340576171875 + x * (-0.0005340576171875 + x * (-0.05067836216517857 + x * (0.05067836216517857 + x * (0.627374267578125 + x * (-0.627374267578125 + x * (-2.16243896484375 + x * (2.16243896484375 + (2.0852090018136162 - 2.0852090018136162 * x) * x)))))));
      s[1] = -0.0061798095703125 + x * (0.007945469447544642 + x * (0.58238525390625 + x * (-0.7487810407366071 + x * (-6.883319091796875 + x * (8.849981689453125 + x * (20.90357666015625 + x * (-26.876027134486606 + x * (-14.596463012695313 + 18.766881016322543 * x))))))));
      s[2] = 0.03460693359375 + x * (-0.06229248046875 + x * (-3.2064383370535716 + x * (5.771589006696429 + x * (33.5489501953125 + x * (-60.3881103515625 + x * (-72.081298828125 + x * (129.746337890625 + (41.70418003627232 - 75.06752406529017 * x) * x)))))));
      s[3] = -0.13458251953125 + x * (0.40374755859375 + x * (11.694287109375 + x * (-35.082861328125 + x * (-65.6206787109375 + x * (196.8620361328125 + x * (112.446826171875 + x * (-337.340478515625 + x * (-58.38585205078125 + 175.15755615234374 * x))))))));
      s[4] = 0.605621337890625 + x * (-5.450592041015625 + x * (-9.0195556640625 + x * (81.1760009765625 + x * (38.32767333984375 + x * (-344.9490600585938 + x * (-59.1066650390625 + x * (531.9599853515625 + (29.192926025390626 - 262.7363342285156 * x) * x)))))));
      s[5] = 0.605621337890625 + x * (5.450592041015625 + x * (-9.0195556640625 + x * (-81.1760009765625 + x * (38.32767333984375 + x * (344.9490600585938 + x * (-59.1066650390625 + x * (-531.9599853515625 + x * (29.192926025390626 + 262.7363342285156 * x))))))));
      s[6] = -0.13458251953125 + x * (-0.40374755859375 + x * (11.694287109375 + x * (35.082861328125 + x * (-65.6206787109375 + x * (-196.8620361328125 + x * (112.446826171875 + x * (337.340478515625 + (-58.38585205078125 - 175.15755615234374 * x) * x)))))));
      s[7] = 0.03460693359375 + x * (0.06229248046875 + x * (-3.2064383370535716 + x * (-5.771589006696429 + x * (33.5489501953125 + x * (60.3881103515625 + x * (-72.081298828125 + x * (-129.746337890625 + x * (41.70418003627232 + 75.06752406529017 * x))))))));
      s[8] = -0.0061798095703125 + x * (-0.007945469447544642 + x * (0.58238525390625 + x * (0.7487810407366071 + x * (-6.883319091796875 + x * (-8.849981689453125 + x * (20.90357666015625 + x * (26.876027134486606 + (-14.596463012695313 - 18.766881016322543 * x) * x)))))));
      s[9] = 0.0005340576171875 + x * (0.0005340576171875 + x * (-0.05067836216517857 + x * (-0.05067836216517857 + x * (0.627374267578125 + x * (0.627374267578125 + x * (-2.16243896484375 + x * (-2.16243896484375 + x * (2.0852090018136162 + 2.0852090018136162 * x))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(11);

      s[0] = x * (-0.003968253968253968 + x * (0.003968253968253968 + x * (0.14123126102292768 + x * (-0.14123126102292768 + x * (-1.1754918981481481 + x * (1.1754918981481481 + x * (3.2293733465608465 + x * (-3.2293733465608465 + x * (-2.6911444554673722 + 2.6911444554673722 * x)))))))));
      s[1] = x * (0.0496031746031746 + x * (-0.062003968253968256 + x * (-1.7374889770723103 + x * (2.171861221340388 + x * (13.744212962962964 + x * (-17.180266203703702 + x * (-33.585482804232804 + x * (41.98185350529101 + (21.529155643738978 - 26.91144455467372 * x) * x))))))));
      s[2] = x * (-0.2976190476190476 + x * (0.49603174603174605 + x * (10.063244047619047 + x * (-16.77207341269841 + x * (-70.80078125 + x * (118.00130208333333 + x * (133.69605654761904 + x * (-222.8267609126984 + x * (-72.66090029761905 + 121.10150049603175 * x)))))))));
      s[3] = x * (1.1904761904761905 + x * (-2.9761904761904763 + x * (-36.1193783068783 + x * (90.29844576719577 + x * (169.27083333333334 + x * (-423.1770833333333 + x * (-263.51686507936506 + x * (658.7921626984127 + (129.17493386243387 - 322.93733465608466 * x) * x))))))));
      s[4] = x * (-4.166666666666667 + x * (20.833333333333332 + x * (48.292824074074076 + x * (-241.46412037037038 + x * (-175.23871527777777 + x * (876.1935763888889 + x * (244.140625 + x * (-1220.703125 + x * (-113.02806712962963 + 565.1403356481482 * x)))))))));
      s[5] = 1. + x * x * (-36.59027777777778 + x * x * (331.8142361111111 + x * x * (-1110.0260416666667 + x * x * (1491.970486111111 - 678.1684027777778 * x * x))));
      s[6] = x * (4.166666666666667 + x * (20.833333333333332 + x * (-48.292824074074076 + x * (-241.46412037037038 + x * (175.23871527777777 + x * (876.1935763888889 + x * (-244.140625 + x * (-1220.703125 + x * (113.02806712962963 + 565.1403356481482 * x)))))))));
      s[7] = x * (-1.1904761904761905 + x * (-2.9761904761904763 + x * (36.1193783068783 + x * (90.29844576719577 + x * (-169.27083333333334 + x * (-423.1770833333333 + x * (263.51686507936506 + x * (658.7921626984127 + (-129.17493386243387 - 322.93733465608466 * x) * x))))))));
      s[8] = x * (0.2976190476190476 + x * (0.49603174603174605 + x * (-10.063244047619047 + x * (-16.77207341269841 + x * (70.80078125 + x * (118.00130208333333 + x * (-133.69605654761904 + x * (-222.8267609126984 + x * (72.66090029761905 + 121.10150049603175 * x)))))))));
      s[9] = x * (-0.0496031746031746 + x * (-0.062003968253968256 + x * (1.7374889770723103 + x * (2.171861221340388 + x * (-13.744212962962964 + x * (-17.180266203703702 + x * (33.585482804232804 + x * (41.98185350529101 + (-21.529155643738978 - 26.91144455467372 * x) * x))))))));
      s[10] = x * (0.003968253968253968 + x * (0.003968253968253968 + x * (-0.14123126102292768 + x * (-0.14123126102292768 + x * (1.1754918981481481 + x * (1.1754918981481481 + x * (-3.2293733465608465 + x * (-3.2293733465608465 + x * (2.6911444554673722 + 2.6911444554673722 * x)))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(12);

      s[0] = -0.0001201629638671875 + x * (0.0001201629638671875 + x * (0.017213063315739706 + x * (-0.017213063315739706 + x * (-0.3404447377253672 + x * (0.3404447377253672 + x * (2.092467408356843 + x * (-2.092467408356843 + x * (-4.759183391187557 + x * (4.759183391187557 + (3.4900678202042084 - 3.4900678202042084 * x) * x)))))))));
      s[1] = 0.0016155242919921875 + x * (-0.0019745296902126735 + x * (-0.23062228369334387 + x * (0.2818716800696425 + x * (4.464000605023096 + x * (-5.456000739472674 + x * (-26.040706837972007 + x * (31.827530579743563 + x * (53.216323374188136 + x * (-65.04217301289661 + x * (-31.410610381837873 + 38.39074602224629 * x))))))))));
      s[2] = -0.010385513305664062 + x * (0.016320092337472097 + x * (1.4724401262071398 + x * (-2.313834484039791 + x * (-27.275827186490282 + x * (42.862014150199016 + x * (142.9185275325069 + x * (-224.58625755108224 + x * (-239.25712866606537 + x * (375.975487903817 + (122.15237370714729 - 191.95373011123147 * x) * x)))))))));
      s[3] = 0.04361915588378906 + x * (-0.09596214294433594 + x * (-6.080844425019764 + x * (13.37785773504348 + x * (100.39849476082615 + x * (-220.87668847381752 + x * (-397.2183943854438 + x * (873.8804676479764 + x * (564.6122114090692 + x * (-1242.1468650999523 + x * (-261.7550865153156 + 575.8611903336944 * x))))))))));
      s[4] = -0.14539718627929688 + x * (0.5331230163574219 + x * (19.018419405013795 + x * (-69.73420448505058 + x * (-177.07385614788723 + x * (649.2708058755865 + x * (563.1640752156576 + x * (-2064.934942457411 + x * (-719.0693451048836 + x * (2636.5875987179065 + (314.10610381837876 - 1151.7223806673887 * x) * x)))))))));
      s[5] = 0.6106681823730469 + x * (-6.717350006103516 + x * (-14.196605885823567 + x * (156.16266474405924 + x * (99.82763270625362 + x * (-1098.1039597687898 + x * (-284.9159689331055 + x * (3134.07565826416 + x * (345.2571223788791 + x * (-3797.82834616767 + x * (-146.58284844857675 + 1612.4113329343443 * x))))))))));
      s[6] = 0.6106681823730469 + x * (6.717350006103516 + x * (-14.196605885823567 + x * (-156.16266474405924 + x * (99.82763270625362 + x * (1098.1039597687898 + x * (-284.9159689331055 + x * (-3134.07565826416 + x * (345.2571223788791 + x * (3797.82834616767 + (-146.58284844857675 - 1612.4113329343443 * x) * x)))))))));
      s[7] = -0.14539718627929688 + x * (-0.5331230163574219 + x * (19.018419405013795 + x * (69.73420448505058 + x * (-177.07385614788723 + x * (-649.2708058755865 + x * (563.1640752156576 + x * (2064.934942457411 + x * (-719.0693451048836 + x * (-2636.5875987179065 + x * (314.10610381837876 + 1151.7223806673887 * x))))))))));
      s[8] = 0.04361915588378906 + x * (0.09596214294433594 + x * (-6.080844425019764 + x * (-13.37785773504348 + x * (100.39849476082615 + x * (220.87668847381752 + x * (-397.2183943854438 + x * (-873.8804676479764 + x * (564.6122114090692 + x * (1242.1468650999523 + (-261.7550865153156 - 575.8611903336944 * x) * x)))))))));
      s[9] = -0.010385513305664062 + x * (-0.016320092337472097 + x * (1.4724401262071398 + x * (2.313834484039791 + x * (-27.275827186490282 + x * (-42.862014150199016 + x * (142.9185275325069 + x * (224.58625755108224 + x * (-239.25712866606537 + x * (-375.975487903817 + x * (122.15237370714729 + 191.95373011123147 * x))))))))));
      s[10] = 0.0016155242919921875 + x * (0.0019745296902126735 + x * (-0.23062228369334387 + x * (-0.2818716800696425 + x * (4.464000605023096 + x * (5.456000739472674 + x * (-26.040706837972007 + x * (-31.827530579743563 + x * (53.216323374188136 + x * (65.04217301289661 + (-31.410610381837873 - 38.39074602224629 * x) * x)))))))));
      s[11] = -0.0001201629638671875 + x * (-0.0001201629638671875 + x * (0.017213063315739706 + x * (0.017213063315739706 + x * (-0.3404447377253672 + x * (-0.3404447377253672 + x * (2.092467408356843 + x * (2.092467408356843 + x * (-4.759183391187557 + x * (-4.759183391187557 + x * (3.4900678202042084 + 3.4900678202042084 * x))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(13);

      s[0] = x * (0.0010822510822510823 + x * (-0.0010822510822510823 + x * (-0.057023809523809525 + x * (0.057023809523809525 + x * (0.7446428571428572 + x * (-0.7446428571428572 + x * (-3.587142857142857 + x * (3.587142857142857 + x * (6.942857142857143 + x * (-6.942857142857143 + x * (-4.544415584415584 + 4.544415584415584 * x)))))))))));
      s[1] = x * (-0.015584415584415584 + x * (0.0187012987012987 + x * (0.8142857142857143 + x * (-0.9771428571428571 + x * (-10.371428571428572 + x * (12.445714285714285 + x * (47.44285714285714 + x * (-56.93142857142857 + x * (-83.31428571428572 + x * (99.97714285714285 + (45.444155844155844 - 54.532987012987014 * x) * x))))))))));
      s[2] = x * (0.10714285714285714 + x * (-0.16071428571428573 + x * (-5.511428571428572 + x * (8.267142857142858 + x * (66.96428571428571 + x * (-100.44642857142857 + x * (-278.1771428571429 + x * (417.2657142857143 + x * (416.57142857142856 + x * (-624.8571428571429 + x * (-199.9542857142857 + 299.93142857142857 * x)))))))))));
      s[3] = x * (-0.47619047619047616 + x * (0.9523809523809523 + x * (23.66190476190476 + x * (-47.32380952380952 + x * (-258.0857142857143 + x * (516.1714285714286 + x * (873.6428571428571 + x * (-1747.2857142857142 + x * (-1138.6285714285714 + x * (2277.2571428571428 + (499.8857142857143 - 999.7714285714286 * x) * x))))))))));
      s[4] = x * (1.6071428571428572 + x * (-4.821428571428571 + x * (-71.82321428571429 + x * (215.46964285714284 + x * (544.0660714285714 + x * (-1632.1982142857144 + x * (-1536.107142857143 + x * (4608.321428571428 + x * (1812.0857142857142 + x * (-5436.257142857143 + x * (-749.8285714285714 + 2249.4857142857145 * x)))))))))));
      s[5] = x * (-5.142857142857143 + x * (30.857142857142858 + x * (90.97714285714285 + x * (-545.8628571428571 + x * (-534.3428571428572 + x * (3206.057142857143 + x * (1348.3028571428572 + x * (-8089.817142857143 + x * (-1499.6571428571428 + x * (8997.942857142858 + (599.8628571428571 - 3599.177142857143 * x) * x))))))))));
      s[6] = 1. + x * x * (-53.69 + x * x * (740.74 + x * x * (-4002.57 + x * x * (9729.72 + x * x * (-10614.24 + 4199.04 * x * x)))));
      s[7] = x * (5.142857142857143 + x * (30.857142857142858 + x * (-90.97714285714285 + x * (-545.8628571428571 + x * (534.3428571428572 + x * (3206.057142857143 + x * (-1348.3028571428572 + x * (-8089.817142857143 + x * (1499.6571428571428 + x * (8997.942857142858 + (-599.8628571428571 - 3599.177142857143 * x) * x))))))))));
      s[8] = x * (-1.6071428571428572 + x * (-4.821428571428571 + x * (71.82321428571429 + x * (215.46964285714284 + x * (-544.0660714285714 + x * (-1632.1982142857144 + x * (1536.107142857143 + x * (4608.321428571428 + x * (-1812.0857142857142 + x * (-5436.257142857143 + x * (749.8285714285714 + 2249.4857142857145 * x)))))))))));
      s[9] = x * (0.47619047619047616 + x * (0.9523809523809523 + x * (-23.66190476190476 + x * (-47.32380952380952 + x * (258.0857142857143 + x * (516.1714285714286 + x * (-873.6428571428571 + x * (-1747.2857142857142 + x * (1138.6285714285714 + x * (2277.2571428571428 + (-499.8857142857143 - 999.7714285714286 * x) * x))))))))));
      s[10] = x * (-0.10714285714285714 + x * (-0.16071428571428573 + x * (5.511428571428572 + x * (8.267142857142858 + x * (-66.96428571428571 + x * (-100.44642857142857 + x * (278.1771428571429 + x * (417.2657142857143 + x * (-416.57142857142856 + x * (-624.8571428571429 + x * (199.9542857142857 + 299.93142857142857 * x)))))))))));
      s[11] = x * (0.015584415584415584 + x * (0.0187012987012987 + x * (-0.8142857142857143 + x * (-0.9771428571428571 + x * (10.371428571428572 + x * (12.445714285714285 + x * (-47.44285714285714 + x * (-56.93142857142857 + x * (83.31428571428572 + x * (99.97714285714285 + (-45.444155844155844 - 54.532987012987014 * x) * x))))))))));
      s[12] = x * (-0.0010822510822510823 + x * (-0.0010822510822510823 + x * (0.057023809523809525 + x * (0.057023809523809525 + x * (-0.7446428571428572 + x * (-0.7446428571428572 + x * (3.587142857142857 + x * (3.587142857142857 + x * (-6.942857142857143 + x * (-6.942857142857143 + x * (4.544415584415584 + 4.544415584415584 * x)))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(14);

      s[0] = 0.00002753734588623047 + x * (-0.00002753734588623047 + x * (-0.0055479455326772065 + x * (0.0055479455326772065 + x * (0.15989018995014798 + x * (-0.15989018995014798 + x * (-1.5190843070050957 + x * (1.5190843070050957 + x * (5.975193935231136 + x * (-5.975193935231136 + x * (-10.047838557751861 + x * (10.047838557751861 + (5.937359147762463 - 5.937359147762463 * x) * x)))))))))));
      s[1] = -0.00042307376861572266 + x * (0.0004999962720003995 + x * (0.08506878681283779 + x * (-0.10053583896062648 + x * (-2.4229162718281194 + x * (2.8634465030695955 + x * (22.411080495048314 + x * (-26.485822403238913 + x * (-83.83793924507431 + x * (99.08120092599691 + x * (129.076079934197 + x * (-152.544458104051 + x * (-65.3109506253871 + 77.18566892091202 * x))))))))))));
      s[2] = 0.003102540969848633 + x * (-0.004481448067559136 + x * (-0.6216978682205618 + x * (0.8980080318741449 + x * (17.342240551691205 + x * (-25.04990301910952 + x * (-152.9812667404659 + x * (220.97294084733966 + x * (525.1722118457915 + x * (-758.5820837772544 + x * (-709.5319843089392 + x * (1024.87953289069 + (320.617393979173 - 463.11401352547216 * x) * x)))))))))));
      s[3] = -0.014626264572143555 + x * (0.02716306277683803 + x * (2.910932218057138 + x * (-5.406016976391828 + x * (-77.83153814743575 + x * (144.54428513095212 + x * (623.3359247110312 + x * (-1157.6238601776292 + x * (-1830.6594746178757 + x * (3399.796167147483 + x * (2196.6120908562148 + x * (-4079.422454447256 + x * (-914.3533087554193 + 1698.0847162600646 * x))))))))))));
      s[4] = 0.05119192600250244 + x * (-0.13309900760650634 + x * (-10.018765251472514 + x * (26.048789653828536 + x * (239.82264076261785 + x * (-623.5388659828063 + x * (-1500.0125382845013 + x * (3900.0325995397034 + x * (3791.7784935139266 + x * (-9858.624083136208 + x * (-4154.394788301251 + x * (10801.42644958325 + (1632.7737656346774 - 4245.211790650162 * x) * x)))))))))));
      s[5] = -0.15357577800750732 + x * (0.6654950380325317 + x * (28.210656182273986 + x * (-122.24617678985393 + x * (-392.9150488316824 + x * (1702.6318782706235 + x * (1985.5692970133584 + x * (-8604.13362039122 + x * (-4511.01073525618 + x * (19547.71318611011 + x * (4653.695073555689 + x * (-20166.011985407986 + x * (-1763.3956668854516 + 7641.3812231702905 * x))))))))))));
      s[6] = 0.6143031120300293 + x * (-7.985940456390381 + x * (-20.560646121918207 + x * (267.2883995849367 + x * (215.84473174668705 + x * (-2805.9815127069314 + x * (-976.8034128874656 + x * (12698.444367537053 + x * (2102.582249824181 + x * (-27333.56924771435 + x * (-2105.408633178159 + x * (27370.31223131607 + (783.7314075046452 - 10188.508297560387 * x) * x)))))))))));
      s[7] = 0.6143031120300293 + x * (7.985940456390381 + x * (-20.560646121918207 + x * (-267.2883995849367 + x * (215.84473174668705 + x * (2805.9815127069314 + x * (-976.8034128874656 + x * (-12698.444367537053 + x * (2102.582249824181 + x * (27333.56924771435 + x * (-2105.408633178159 + x * (-27370.31223131607 + x * (783.7314075046452 + 10188.508297560387 * x))))))))))));
      s[8] = -0.15357577800750732 + x * (-0.6654950380325317 + x * (28.210656182273986 + x * (122.24617678985393 + x * (-392.9150488316824 + x * (-1702.6318782706235 + x * (1985.5692970133584 + x * (8604.13362039122 + x * (-4511.01073525618 + x * (-19547.71318611011 + x * (4653.695073555689 + x * (20166.011985407986 + (-1763.3956668854516 - 7641.3812231702905 * x) * x)))))))))));
      s[9] = 0.05119192600250244 + x * (0.13309900760650634 + x * (-10.018765251472514 + x * (-26.048789653828536 + x * (239.82264076261785 + x * (623.5388659828063 + x * (-1500.0125382845013 + x * (-3900.0325995397034 + x * (3791.7784935139266 + x * (9858.624083136208 + x * (-4154.394788301251 + x * (-10801.42644958325 + x * (1632.7737656346774 + 4245.211790650162 * x))))))))))));
      s[10] = -0.014626264572143555 + x * (-0.02716306277683803 + x * (2.910932218057138 + x * (5.406016976391828 + x * (-77.83153814743575 + x * (-144.54428513095212 + x * (623.3359247110312 + x * (1157.6238601776292 + x * (-1830.6594746178757 + x * (-3399.796167147483 + x * (2196.6120908562148 + x * (4079.422454447256 + (-914.3533087554193 - 1698.0847162600646 * x) * x)))))))))));
      s[11] = 0.003102540969848633 + x * (0.004481448067559136 + x * (-0.6216978682205618 + x * (-0.8980080318741449 + x * (17.342240551691205 + x * (25.04990301910952 + x * (-152.9812667404659 + x * (-220.97294084733966 + x * (525.1722118457915 + x * (758.5820837772544 + x * (-709.5319843089392 + x * (-1024.87953289069 + x * (320.617393979173 + 463.11401352547216 * x))))))))))));
      s[12] = -0.00042307376861572266 + x * (-0.0004999962720003995 + x * (0.08506878681283779 + x * (0.10053583896062648 + x * (-2.4229162718281194 + x * (-2.8634465030695955 + x * (22.411080495048314 + x * (26.485822403238913 + x * (-83.83793924507431 + x * (-99.08120092599691 + x * (129.076079934197 + x * (152.544458104051 + (-65.3109506253871 - 77.18566892091202 * x) * x)))))))))));
      s[13] = 0.00002753734588623047 + x * (0.00002753734588623047 + x * (-0.0055479455326772065 + x * (-0.0055479455326772065 + x * (0.15989018995014798 + x * (0.15989018995014798 + x * (-1.5190843070050957 + x * (-1.5190843070050957 + x * (5.975193935231136 + x * (5.975193935231136 + x * (-10.047838557751861 + x * (-10.047838557751861 + x * (5.937359147762463 + 5.937359147762463 * x))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(15);

      s[0] = x * (-0.0002913752913752914 + x * (0.0002913752913752914 + x * (0.021293139730639732 + x * (-0.021293139730639732 + x * (-0.39985789609053496 + x * (0.39985789609053496 + x * (2.940846756044239 + x * (-2.940846756044239 + x * (-9.730325761959877 + x * (9.730325761959877 + x * (14.448059464728301 + x * (-14.448059464728301 + x * (-7.779724327161393 + 7.779724327161393 * x)))))))))))));
      s[1] = x * (0.004759129759129759 + x * (-0.005552318052318052 + x * (-0.34606937429854095 + x * (0.4037476033482978 + x * (6.40776138117284 + x * (-7.4757216113683125 + x * (-45.84316743827161 + x * (53.48369534465021 + x * (144.5648398919753 + x * (-168.6589798739712 + x * (-198.14481551627384 + x * (231.16895143565282 + (93.35669192593672 - 108.91614058025951 * x) * x))))))))))));
      s[2] = x * (-0.037121212121212124 + x * (0.05196969696969697 + x * (2.677109638047138 + x * (-3.7479534932659933 + x * (-48.40750707304527 + x * (67.77050990226337 + x * (330.7270588188014 + x * (-463.01788234632204 + x * (-966.0823435088735 + x * (1352.515280912423 + x * (1186.804884602682 + x * (-1661.5268384437547 + x * (-505.6820812654906 + 707.9549137716867 * x)))))))))))));
      s[3] = x * (0.1856060606060606 + x * (-0.3248106060606061 + x * (-13.180917508417508 + x * (23.06660563973064 + x * (227.90664994855968 + x * (-398.8366374099794 + x * (-1430.064747942387 + x * (2502.613308899177 + x * (3691.963603395062 + x * (-6460.936305941358 + x * (-4094.9928540029928 + x * (7166.237494505238 + (1618.1826600495697 - 2831.819655086747 * x) * x))))))))))));
      s[4] = x * (-0.6805555555555556 + x * (1.587962962962963 + x * (46.70898533950617 + x * (-108.98763245884774 + x * (-729.3639602623457 + x * (1701.84924061214 + x * (3831.7909377411265 + x * (-8940.845521395962 + x * (-8733.662394627701 + x * (20378.545587464636 + x * (8922.708723717207 + x * (-20819.653688673483 + x * (-3337.5017363522375 + 7787.504051488555 * x)))))))))))));
      s[5] = x * (2.0416666666666665 + x * (-7.145833333333333 + x * (-126.23228009259259 + x * (441.8129803240741 + x * (1404.659876864712 + x * (-4916.309569026492 + x * (-6201.234005915638 + x * (21704.319020704734 + x * (12821.78926118827 + x * (-44876.26241415895 + x * (-12351.026833847736 + x * (43228.59391846708 + (4450.002315136317 - 15575.00810297711 * x) * x))))))))))));
      s[6] = x * (-6.125 + x * (42.875 + x * (153.60309027777777 + x * (-1075.2216319444444 + x * (-1326.4645003858025 + x * (9285.251502700617 + x * (5228.1919736207565 + x * (-36597.343815345295 + x * (-10179.310793547455 + x * (71255.17555483218 + x * (9467.60696638696 + x * (-66273.24876470873 + x * (-3337.5017363522375 + 23362.512154465665 * x)))))))))))));
      s[7] = 1. + x * x * (-74.07805555555555 + x * x * (1445.3903549382717 + x * x * (-11465.298366126543 + x * x * (43487.46408179012 + x * x * (-82980.21809799383 + x * x * (76285.75397376543 - 26700.0138908179 * x * x))))));
      s[8] = x * (6.125 + x * (42.875 + x * (-153.60309027777777 + x * (-1075.2216319444444 + x * (1326.4645003858025 + x * (9285.251502700617 + x * (-5228.1919736207565 + x * (-36597.343815345295 + x * (10179.310793547455 + x * (71255.17555483218 + x * (-9467.60696638696 + x * (-66273.24876470873 + x * (3337.5017363522375 + 23362.512154465665 * x)))))))))))));
      s[9] = x * (-2.0416666666666665 + x * (-7.145833333333333 + x * (126.23228009259259 + x * (441.8129803240741 + x * (-1404.659876864712 + x * (-4916.309569026492 + x * (6201.234005915638 + x * (21704.319020704734 + x * (-12821.78926118827 + x * (-44876.26241415895 + x * (12351.026833847736 + x * (43228.59391846708 + (-4450.002315136317 - 15575.00810297711 * x) * x))))))))))));
      s[10] = x * (0.6805555555555556 + x * (1.587962962962963 + x * (-46.70898533950617 + x * (-108.98763245884774 + x * (729.3639602623457 + x * (1701.84924061214 + x * (-3831.7909377411265 + x * (-8940.845521395962 + x * (8733.662394627701 + x * (20378.545587464636 + x * (-8922.708723717207 + x * (-20819.653688673483 + x * (3337.5017363522375 + 7787.504051488555 * x)))))))))))));
      s[11] = x * (-0.1856060606060606 + x * (-0.3248106060606061 + x * (13.180917508417508 + x * (23.06660563973064 + x * (-227.90664994855968 + x * (-398.8366374099794 + x * (1430.064747942387 + x * (2502.613308899177 + x * (-3691.963603395062 + x * (-6460.936305941358 + x * (4094.9928540029928 + x * (7166.237494505238 + (-1618.1826600495697 - 2831.819655086747 * x) * x))))))))))));
      s[12] = x * (0.037121212121212124 + x * (0.05196969696969697 + x * (-2.677109638047138 + x * (-3.7479534932659933 + x * (48.40750707304527 + x * (67.77050990226337 + x * (-330.7270588188014 + x * (-463.01788234632204 + x * (966.0823435088735 + x * (1352.515280912423 + x * (-1186.804884602682 + x * (-1661.5268384437547 + x * (505.6820812654906 + 707.9549137716867 * x)))))))))))));
      s[13] = x * (-0.004759129759129759 + x * (-0.005552318052318052 + x * (0.34606937429854095 + x * (0.4037476033482978 + x * (-6.40776138117284 + x * (-7.4757216113683125 + x * (45.84316743827161 + x * (53.48369534465021 + x * (-144.5648398919753 + x * (-168.6589798739712 + x * (198.14481551627384 + x * (231.16895143565282 + (-93.35669192593672 - 108.91614058025951 * x) * x))))))))))));
      s[14] = x * (0.0002913752913752914 + x * (0.0002913752913752914 + x * (-0.021293139730639732 + x * (-0.021293139730639732 + x * (0.39985789609053496 + x * (0.39985789609053496 + x * (-2.940846756044239 + x * (-2.940846756044239 + x * (9.730325761959877 + x * (9.730325761959877 + x * (-14.448059464728301 + x * (-14.448059464728301 + x * (7.779724327161393 + 7.779724327161393 * x)))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(16);

      s[0] = -6.3925981521606445e-6 + x * (6.3925981521606445e-6 + x * (0.0017231918237318317 + x * (-0.0017231918237318317 + x * (-0.0680742051565286 + x * (0.0680742051565286 + x * (0.9197861488376345 + x * (-0.9197861488376345 + x * (-5.465984458521921 + x * (5.465984458521921 + x * (15.558907762169838 + x * (-15.558907762169838 + x * (-20.665609483401497 + x * (20.665609483401497 + (10.219257436846894 - 10.219257436846894 * x) * x)))))))))))));
      s[1] = 0.00011064112186431885 + x * (-0.0001276628329203679 + x * (-0.029787811725391748 + x * (0.034370551990836634 + x * (1.1683735415920036 + x * (-1.3481233172215425 + x * (-15.542056145412582 + x * (17.933141706245287 + x * (89.83086623555543 + x * (-103.65099950256396 + x * (-244.29505823978357 + x * (281.87891335359643 + x * (301.7178984576619 + x * (-348.1360366819175 + x * (-132.85034667900962 + 153.28886155270342 * x))))))))))))));
      s[2] = -0.0009153038263320923 + x * (0.001248141581361944 + x * (0.24594303097698714 + x * (-0.3353768604231643 + x * (-9.536386121596609 + x * (13.004162893086285 + x * (123.71069219495568 + x * (-168.69639844766684 + x * (-684.285702716027 + x * (933.1168673400368 + x * (1737.950203408088 + x * (-2369.9320955564835 + x * (-1954.9666571297817 + x * (2665.863623358793 + (786.8828226372108 - 1073.0220308689238 * x) * x)))))))))))));
      s[3] = 0.004847720265388489 + x * (-0.008079533775647482 + x * (-1.298135630302615 + x * (2.1635593838376916 + x * (49.323760403634665 + x * (-82.2062673393911 + x * (-612.1169895465885 + x * (1020.1949825776475 + x * (3142.21773961825 + x * (-5237.029566030417 + x * (-7215.493990640555 + x * (12025.823317734259 + x * (7427.220048334498 + x * (-12378.700080557497 + x * (-2789.857280259202 + 4649.762133765336 * x))))))))))))));
      s[4] = -0.018698349595069885 + x * (0.040067891989435465 + x * (4.973174665461887 + x * (-10.656802854561187 + x * (-181.3213800503449 + x * (388.54581439359623 + x * (2056.8933617323637 + x * (-4407.628632283637 + x * (-9233.46052877605 + x * (19785.986847377248 + x * (19099.266501143575 + x * (-40926.99964530766 + x * (-18255.999417636882 + x * (39119.99875207903 + (6509.666987271471 - 13949.28640129601 * x) * x)))))))))))));
      s[5] = 0.05759091675281525 + x * (-0.17277275025844574 + x * (-15.06350780597755 + x * (45.190523417932646 + x * (493.23317914136817 + x * (-1479.6995374241046 + x * (-4460.535316861102 + x * (13381.605950583305 + x * (17384.58954995232 + x * (-52153.76864985696 + x * (-32951.94806664118 + x * (98855.84419992354 + x * (29779.143265581555 + x * (-89337.42979674468 + x * (-10229.476694283741 + 30688.430082851224 * x))))))))))))));
      s[6] = -0.15997476875782013 + x * (0.7998738437891006 + x * (39.2834809387014 + x * (-196.41740469350702 + x * (-764.592835963482 + x * (3822.96417981741 + x * (5606.384459616883 + x * (-28031.922298084413 + x * (-19644.29795875081 + x * (98221.48979375405 + x * (35040.478854041015 + x * (-175202.39427020508 + x * (-30506.57271939729 + x * (152532.86359698646 + (10229.476694283741 - 51147.3834714187 * x) * x)))))))))))));
      s[7] = 0.6170455366373062 + x * (-9.255683049559593 + x * (-28.112890578958453 + x * (421.6933586843768 + x * (411.79336325398515 + x * (-6176.900448809777 + x * (-2699.7139371399367 + x * (40495.709057099055 + x * (8950.872018895283 + x * (-134263.08028342924 + x * (-15481.51735083333 + x * (232222.76026249997 + x * (13230.123191273638 + x * (-198451.84786910456 + x * (-4384.061440407318 + 65760.92160610977 * x))))))))))))));
      s[8] = 0.6170455366373062 + x * (9.255683049559593 + x * (-28.112890578958453 + x * (-421.6933586843768 + x * (411.79336325398515 + x * (6176.900448809777 + x * (-2699.7139371399367 + x * (-40495.709057099055 + x * (8950.872018895283 + x * (134263.08028342924 + x * (-15481.51735083333 + x * (-232222.76026249997 + x * (13230.123191273638 + x * (198451.84786910456 + (-4384.061440407318 - 65760.92160610977 * x) * x)))))))))))));
      s[9] = -0.15997476875782013 + x * (-0.7998738437891006 + x * (39.2834809387014 + x * (196.41740469350702 + x * (-764.592835963482 + x * (-3822.96417981741 + x * (5606.384459616883 + x * (28031.922298084413 + x * (-19644.29795875081 + x * (-98221.48979375405 + x * (35040.478854041015 + x * (175202.39427020508 + x * (-30506.57271939729 + x * (-152532.86359698646 + x * (10229.476694283741 + 51147.3834714187 * x))))))))))))));
      s[10] = 0.05759091675281525 + x * (0.17277275025844574 + x * (-15.06350780597755 + x * (-45.190523417932646 + x * (493.23317914136817 + x * (1479.6995374241046 + x * (-4460.535316861102 + x * (-13381.605950583305 + x * (17384.58954995232 + x * (52153.76864985696 + x * (-32951.94806664118 + x * (-98855.84419992354 + x * (29779.143265581555 + x * (89337.42979674468 + (-10229.476694283741 - 30688.430082851224 * x) * x)))))))))))));
      s[11] = -0.018698349595069885 + x * (-0.040067891989435465 + x * (4.973174665461887 + x * (10.656802854561187 + x * (-181.3213800503449 + x * (-388.54581439359623 + x * (2056.8933617323637 + x * (4407.628632283637 + x * (-9233.46052877605 + x * (-19785.986847377248 + x * (19099.266501143575 + x * (40926.99964530766 + x * (-18255.999417636882 + x * (-39119.99875207903 + x * (6509.666987271471 + 13949.28640129601 * x))))))))))))));
      s[12] = 0.004847720265388489 + x * (0.008079533775647482 + x * (-1.298135630302615 + x * (-2.1635593838376916 + x * (49.323760403634665 + x * (82.2062673393911 + x * (-612.1169895465885 + x * (-1020.1949825776475 + x * (3142.21773961825 + x * (5237.029566030417 + x * (-7215.493990640555 + x * (-12025.823317734259 + x * (7427.220048334498 + x * (12378.700080557497 + (-2789.857280259202 - 4649.762133765336 * x) * x)))))))))))));
      s[13] = -0.0009153038263320923 + x * (-0.001248141581361944 + x * (0.24594303097698714 + x * (0.3353768604231643 + x * (-9.536386121596609 + x * (-13.004162893086285 + x * (123.71069219495568 + x * (168.69639844766684 + x * (-684.285702716027 + x * (-933.1168673400368 + x * (1737.950203408088 + x * (2369.9320955564835 + x * (-1954.9666571297817 + x * (-2665.863623358793 + x * (786.8828226372108 + 1073.0220308689238 * x))))))))))))));
      s[14] = 0.00011064112186431885 + x * (0.0001276628329203679 + x * (-0.029787811725391748 + x * (-0.034370551990836634 + x * (1.1683735415920036 + x * (1.3481233172215425 + x * (-15.542056145412582 + x * (-17.933141706245287 + x * (89.83086623555543 + x * (103.65099950256396 + x * (-244.29505823978357 + x * (-281.87891335359643 + x * (301.7178984576619 + x * (348.1360366819175 + (-132.85034667900962 - 153.28886155270342 * x) * x)))))))))))));
      s[15] = -6.3925981521606445e-6 + x * (-6.3925981521606445e-6 + x * (0.0017231918237318317 + x * (0.0017231918237318317 + x * (-0.0680742051565286 + x * (-0.0680742051565286 + x * (0.9197861488376345 + x * (0.9197861488376345 + x * (-5.465984458521921 + x * (-5.465984458521921 + x * (15.558907762169838 + x * (15.558907762169838 + x * (-20.665609483401497 + x * (-20.665609483401497 + x * (10.219257436846894 + 10.219257436846894 * x))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(17);

      s[0] = x * (0.0000777000777000777 + x * (-0.0000777000777000777 + x * (-0.0075178718988242795 + x * (0.0075178718988242795 + x * (0.19159068640550123 + x * (-0.19159068640550123 + x * (-1.9849907897315304 + x * (1.9849907897315304 + x * (9.833794126704179 + x * (-9.833794126704179 + x * (-24.50843019257834 + x * (24.50843019257834 + x * (29.42850904924979 + x * (-29.42850904924979 + x * (-13.453032708228475 + 13.453032708228475 * x)))))))))))))));
      s[1] = x * (-0.0014208014208014208 + x * (0.001623773052344481 + x * (0.1370347183680517 + x * (-0.1566111067063448 + x * (-3.461858087043272 + x * (3.956409242335168 + x * (35.278736429551245 + x * (-40.31855591948714 + x * (-170.03657456398196 + x * (194.32751378740798 + x * (405.88351465269983 + x * (-463.86687388879983 + x * (-456.14189026337175 + x * (521.3050174438534 + (188.34245791519865 - 215.2485233316556 * x) * x))))))))))))));
      s[2] = x * (0.012432012432012432 + x * (-0.016576016576016577 + x * (-1.1931901608092084 + x * (1.5909202144122778 + x * (29.736142376142375 + x * (-39.6481898348565 + x * (-295.3887830687831 + x * (393.8517107583774 + x * (1365.8699722852105 + x * (-1821.1599630469473 + x * (-3066.542607022607 + x * (4088.7234760301426 + x * (3178.2789773189775 + x * (-4237.70530309197 + x * (-1210.7729437405628 + 1614.363924987417 * x)))))))))))))));
      s[3] = x * (-0.06961926961926962 + x * (0.11139083139083139 + x * (6.627407160740494 + x * (-10.60385145718479 + x * (-161.43510590917998 + x * (258.29616945468797 + x * (1536.9431314912797 + x * (-2459.1090103860474 + x * (-6655.05686850872 + x * (10648.090989613953 + x * (13733.687406694815 + x * (-21973.899850711703 + x * (-13169.25779953928 + x * (21070.81247926285 + (4708.561447879966 - 7533.698316607946 * x) * x))))))))))))));
      s[4] = x * (0.2828282828282828 + x * (-0.5656565656565656 + x * (-26.51656886323553 + x * (53.03313772647106 + x * (618.6888767748027 + x * (-1237.3777535496054 + x * (-5448.001066039585 + x * (10896.00213207917 + x * (21228.372831667646 + x * (-42456.74566333529 + x * (-40092.20519551779 + x * (80184.41039103558 + x * (35961.63805818324 + x * (-71923.27611636648 + x * (-12242.259764487913 + 24484.519528975827 * x)))))))))))))));
      s[5] = x * (-0.9050505050505051 + x * (2.4134680134680133 + x * (82.03730767997435 + x * (-218.76615381326494 + x * (-1735.8400769600769 + x * (4628.906871893539 + x * (13009.069375661376 + x * (-34690.85166843033 + x * (-45156.26892416226 + x * (120416.71713109936 + x * (78906.98318807119 + x * (-210418.6218348565 + x * (-67141.1433958634 + x * (179043.04905563573 + (22036.067576078243 - 58762.84686954198 * x) * x))))))))))))));
      s[6] = x * (2.488888888888889 + x * (-9.955555555555556 + x * (-203.479139329806 + x * (813.916557319224 + x * (3122.1791103272585 + x * (-12488.716441309034 + x * (-19765.392078385263 + x * (79061.56831354105 + x * (62333.04518910445 + x * (-249332.1807564178 + x * (-102721.40636958652 + x * (410885.6254783461 + x * (84165.5358808544 + x * (-336662.1435234176 + x * (-26932.971481873406 + 107731.88592749363 * x)))))))))))))));
      s[7] = x * (-7.111111111111111 + x * (56.888888888888886 + x * (240.0356361803981 + x * (-1920.2850894431847 + x * (-2860.1345404663925 + x * (22881.07632373114 + x * (16152.126106212032 + x * (-129217.00884969626 + x * (-47919.12475462613 + x * (383352.99803700903 + x * (76176.38540466392 + x * (-609411.0832373113 + x * (-61020.01351361944 + x * (488160.1081089555 + (19237.83677276672 - 153902.69418213377 * x) * x))))))))))))));
      s[8] = 1. + x * x * (-97.75501133786848 + x * x * (2562.527145376669 + x * x * (-28012.603597883597 + x * x * (152107.76187452758 + x * x * (-441984.426989166 + x * x * (694168.4080423281 + x * x * (-551885.4424187453 + 173140.5309549005 * x * x)))))));
      s[9] = x * (7.111111111111111 + x * (56.888888888888886 + x * (-240.0356361803981 + x * (-1920.2850894431847 + x * (2860.1345404663925 + x * (22881.07632373114 + x * (-16152.126106212032 + x * (-129217.00884969626 + x * (47919.12475462613 + x * (383352.99803700903 + x * (-76176.38540466392 + x * (-609411.0832373113 + x * (61020.01351361944 + x * (488160.1081089555 + (-19237.83677276672 - 153902.69418213377 * x) * x))))))))))))));
      s[10] = x * (-2.488888888888889 + x * (-9.955555555555556 + x * (203.479139329806 + x * (813.916557319224 + x * (-3122.1791103272585 + x * (-12488.716441309034 + x * (19765.392078385263 + x * (79061.56831354105 + x * (-62333.04518910445 + x * (-249332.1807564178 + x * (102721.40636958652 + x * (410885.6254783461 + x * (-84165.5358808544 + x * (-336662.1435234176 + x * (26932.971481873406 + 107731.88592749363 * x)))))))))))))));
      s[11] = x * (0.9050505050505051 + x * (2.4134680134680133 + x * (-82.03730767997435 + x * (-218.76615381326494 + x * (1735.8400769600769 + x * (4628.906871893539 + x * (-13009.069375661376 + x * (-34690.85166843033 + x * (45156.26892416226 + x * (120416.71713109936 + x * (-78906.98318807119 + x * (-210418.6218348565 + x * (67141.1433958634 + x * (179043.04905563573 + (-22036.067576078243 - 58762.84686954198 * x) * x))))))))))))));
      s[12] = x * (-0.2828282828282828 + x * (-0.5656565656565656 + x * (26.51656886323553 + x * (53.03313772647106 + x * (-618.6888767748027 + x * (-1237.3777535496054 + x * (5448.001066039585 + x * (10896.00213207917 + x * (-21228.372831667646 + x * (-42456.74566333529 + x * (40092.20519551779 + x * (80184.41039103558 + x * (-35961.63805818324 + x * (-71923.27611636648 + x * (12242.259764487913 + 24484.519528975827 * x)))))))))))))));
      s[13] = x * (0.06961926961926962 + x * (0.11139083139083139 + x * (-6.627407160740494 + x * (-10.60385145718479 + x * (161.43510590917998 + x * (258.29616945468797 + x * (-1536.9431314912797 + x * (-2459.1090103860474 + x * (6655.05686850872 + x * (10648.090989613953 + x * (-13733.687406694815 + x * (-21973.899850711703 + x * (13169.25779953928 + x * (21070.81247926285 + (-4708.561447879966 - 7533.698316607946 * x) * x))))))))))))));
      s[14] = x * (-0.012432012432012432 + x * (-0.016576016576016577 + x * (1.1931901608092084 + x * (1.5909202144122778 + x * (-29.736142376142375 + x * (-39.6481898348565 + x * (295.3887830687831 + x * (393.8517107583774 + x * (-1365.8699722852105 + x * (-1821.1599630469473 + x * (3066.542607022607 + x * (4088.7234760301426 + x * (-3178.2789773189775 + x * (-4237.70530309197 + x * (1210.7729437405628 + 1614.363924987417 * x)))))))))))))));
      s[15] = x * (0.0014208014208014208 + x * (0.001623773052344481 + x * (-0.1370347183680517 + x * (-0.1566111067063448 + x * (3.461858087043272 + x * (3.956409242335168 + x * (-35.278736429551245 + x * (-40.31855591948714 + x * (170.03657456398196 + x * (194.32751378740798 + x * (-405.88351465269983 + x * (-463.86687388879983 + x * (456.14189026337175 + x * (521.3050174438534 + (-188.34245791519865 - 215.2485233316556 * x) * x))))))))))))));
      s[16] = x * (-0.0000777000777000777 + x * (-0.0000777000777000777 + x * (0.0075178718988242795 + x * (0.0075178718988242795 + x * (-0.19159068640550123 + x * (-0.19159068640550123 + x * (1.9849907897315304 + x * (1.9849907897315304 + x * (-9.833794126704179 + x * (-9.833794126704179 + x * (24.50843019257834 + x * (24.50843019257834 + x * (-29.42850904924979 + x * (-29.42850904924979 + x * (13.453032708228475 + 13.453032708228475 * x)))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(18);

      s[0] = 1.498265191912651e-6 + x * (-1.498265191912651e-6 + x * (-0.0005206769770046602 + x * (0.0005206769770046602 + x * (0.026988649968464493 + x * (-0.026988649968464493 + x * (-0.4906285484958547 + x * (0.4906285484958547 + x * (4.073670492072018 + x * (-4.073670492072018 + x * (-17.227477305090574 + x * (17.227477305090574 + x * (38.12464772002069 + x * (-38.12464772002069 + x * (-41.750751008283366 + x * (41.750751008283366 + (17.74406917852043 - 17.74406917852043 * x) * x)))))))))))))));
      s[1] = -0.00002886657603085041 + x * (0.000032715452834963796 + x * (0.010023498819774344 + x * (-0.01135996532907759 + x * (-0.5171384051097511 + x * (0.5860901924577179 + x * (9.308522472293802 + x * (-10.549658801932976 + x * (-75.98254820608364 + x * (86.11355463356144 + x * (312.8067523072963 + x * (-354.5143192816024 + x * (-664.668046964661 + x * (753.2904532266158 + x * (685.203501841827 + x * (-776.5639687540706 + x * (-266.16103767780646 + 301.64917603484736 * x))))))))))))))));
      s[2] = 0.00026646070182323456 + x * (-0.0003484486100765375 + x * (-0.09241119489132117 + x * (0.12084540870403537 + x * (4.734399380765852 + x * (-6.19113765177073 + x * (-83.96012482841566 + x * (109.79400939100509 + x * (668.1662478573718 + x * (-873.7558625827169 + x * (-2645.723387933363 + x * (3459.79212268209 + x * (5319.81899788167 + x * (-6956.686381845261 + x * (-5108.327182189965 + x * (6680.120161325339 + (1845.383194566125 - 2413.193408278779 * x) * x)))))))))))))));
      s[3] = -0.0015745405107736588 + x * (0.0024333807893774724 + x * (0.5449980296702696 + x * (-0.8422696822176893 + x * (-27.608112262902065 + x * (42.667082588121374 + x * (478.02858274995145 + x * (-738.7714460681068 + x * (-3654.9256659824346 + x * (5648.521483791035 + x * (13656.036664613812 + x * (-21104.783936221345 + x * (-25553.56712495667 + x * (39491.87646584213 + x * (22908.88267089807 + x * (-35404.63685502429 + x * (-7807.39043854899 + 12065.967041393895 * x))))))))))))))));
      s[4] = 0.006735534407198429 + x * (-0.012722676102485921 + x * (-2.3234360895034527 + x * (4.388712613506522 + x * (115.379917087119 + x * (-217.93984338678035 + x * (-1915.3127235878987 + x * (3617.8129223326973 + x * (13685.413277968915 + x * (-25850.22508060795 + x * (-46932.29038920702 + x * (88649.88184627992 + x * (81388.77634769367 + x * (-153734.3553234214 + x * (-68697.17689433543 + x * (129761.3341337447 + (22357.527164935742 - 42230.88464487863 * x) * x)))))))))))))));
      s[5] = -0.02251592930406332 + x * (0.05468154259558235 + x * (7.714451507712253 + x * (-18.73509651872976 + x * (-367.9106452195953 + x * (893.4972812475887 + x * (5608.829289777645 + x * (-13621.442560888565 + x * (-35511.63976235318 + x * (86242.553708572 + x * (110667.44723208454 + x * (-268763.8004207767 + x * (-179119.6481412 + x * (435004.8597714858 + x * (143927.11835820228 + x * (-349537.28744134837 + x * (-45211.88826687006 + 109800.30007668443 * x))))))))))))))));
      s[6] = 0.0630446020513773 + x * (-0.2143516469746828 + x * (-21.243503111530348 + x * (72.22791057920318 + x * (911.9735669729383 + x * (-3100.7101277079905 + x * (-11238.089089653839 + x * (38209.50290482306 + x * (62146.09087223275 + x * (-211296.70896559136 + x * (-177909.40698511567 + x * (604891.9837493934 + x * (272496.1129087045 + x * (-926486.7838895953 + x * (-210973.91262444557 + x * (717311.3029231149 + (64588.41180981437 - 219600.60015336887 * x) * x)))))))))))))));
      s[7] = -0.16511681489646435 + x * (0.9356619510799646 + x * (52.244412235234236 + x * (-296.05166933299404 + x * (-1354.0484195807771 + x * (7672.94104429107 + x * (13564.176644843717 + x * (-76863.6676541144 + x * (-67449.31382548089 + x * (382212.77834439167 + x * (181627.68275068246 + x * (-1.0292235355872005e6 + x * (-267832.6874399253 + x * (1.517718562159577e6 + x * (202289.7564147226 + x * (-1.1463086196834282e6 + x * (-60897.64542068212 + 345086.6573838654 * x))))))))))))))));
      s[8] = 0.6191880558617413 + x * (-10.526196949649602 + x * (-36.85401419853441 + x * (626.5182413750849 + x * (717.9694433775925 + x * (-12205.480537419073 + x * (-6422.490473224958 + x * (109182.33804482428 + x * (30188.117733471478 + x * (-513198.0014690151 + x * (-78759.32516012694 + x * (1.338908527722158e6 + x * (113927.73785104683 + x * (-1.9367715434677962e6 + x * (-84989.79349368555 + x * (1.4448264893926543e6 + (25374.018925284217 - 431358.3217298317 * x) * x)))))))))))))));
      s[9] = 0.6191880558617413 + x * (10.526196949649602 + x * (-36.85401419853441 + x * (-626.5182413750849 + x * (717.9694433775925 + x * (12205.480537419073 + x * (-6422.490473224958 + x * (-109182.33804482428 + x * (30188.117733471478 + x * (513198.0014690151 + x * (-78759.32516012694 + x * (-1.338908527722158e6 + x * (113927.73785104683 + x * (1.9367715434677962e6 + x * (-84989.79349368555 + x * (-1.4448264893926543e6 + x * (25374.018925284217 + 431358.3217298317 * x))))))))))))))));
      s[10] = -0.16511681489646435 + x * (-0.9356619510799646 + x * (52.244412235234236 + x * (296.05166933299404 + x * (-1354.0484195807771 + x * (-7672.94104429107 + x * (13564.176644843717 + x * (76863.6676541144 + x * (-67449.31382548089 + x * (-382212.77834439167 + x * (181627.68275068246 + x * (1.0292235355872005e6 + x * (-267832.6874399253 + x * (-1.517718562159577e6 + x * (202289.7564147226 + x * (1.1463086196834282e6 + (-60897.64542068212 - 345086.6573838654 * x) * x)))))))))))))));
      s[11] = 0.0630446020513773 + x * (0.2143516469746828 + x * (-21.243503111530348 + x * (-72.22791057920318 + x * (911.9735669729383 + x * (3100.7101277079905 + x * (-11238.089089653839 + x * (-38209.50290482306 + x * (62146.09087223275 + x * (211296.70896559136 + x * (-177909.40698511567 + x * (-604891.9837493934 + x * (272496.1129087045 + x * (926486.7838895953 + x * (-210973.91262444557 + x * (-717311.3029231149 + x * (64588.41180981437 + 219600.60015336887 * x))))))))))))))));
      s[12] = -0.02251592930406332 + x * (-0.05468154259558235 + x * (7.714451507712253 + x * (18.73509651872976 + x * (-367.9106452195953 + x * (-893.4972812475887 + x * (5608.829289777645 + x * (13621.442560888565 + x * (-35511.63976235318 + x * (-86242.553708572 + x * (110667.44723208454 + x * (268763.8004207767 + x * (-179119.6481412 + x * (-435004.8597714858 + x * (143927.11835820228 + x * (349537.28744134837 + (-45211.88826687006 - 109800.30007668443 * x) * x)))))))))))))));
      s[13] = 0.006735534407198429 + x * (0.012722676102485921 + x * (-2.3234360895034527 + x * (-4.388712613506522 + x * (115.379917087119 + x * (217.93984338678035 + x * (-1915.3127235878987 + x * (-3617.8129223326973 + x * (13685.413277968915 + x * (25850.22508060795 + x * (-46932.29038920702 + x * (-88649.88184627992 + x * (81388.77634769367 + x * (153734.3553234214 + x * (-68697.17689433543 + x * (-129761.3341337447 + x * (22357.527164935742 + 42230.88464487863 * x))))))))))))))));
      s[14] = -0.0015745405107736588 + x * (-0.0024333807893774724 + x * (0.5449980296702696 + x * (0.8422696822176893 + x * (-27.608112262902065 + x * (-42.667082588121374 + x * (478.02858274995145 + x * (738.7714460681068 + x * (-3654.9256659824346 + x * (-5648.521483791035 + x * (13656.036664613812 + x * (21104.783936221345 + x * (-25553.56712495667 + x * (-39491.87646584213 + x * (22908.88267089807 + x * (35404.63685502429 + (-7807.39043854899 - 12065.967041393895 * x) * x)))))))))))))));
      s[15] = 0.00026646070182323456 + x * (0.0003484486100765375 + x * (-0.09241119489132117 + x * (-0.12084540870403537 + x * (4.734399380765852 + x * (6.19113765177073 + x * (-83.96012482841566 + x * (-109.79400939100509 + x * (668.1662478573718 + x * (873.7558625827169 + x * (-2645.723387933363 + x * (-3459.79212268209 + x * (5319.81899788167 + x * (6956.686381845261 + x * (-5108.327182189965 + x * (-6680.120161325339 + x * (1845.383194566125 + 2413.193408278779 * x))))))))))))))));
      s[16] = -0.00002886657603085041 + x * (-0.000032715452834963796 + x * (0.010023498819774344 + x * (0.01135996532907759 + x * (-0.5171384051097511 + x * (-0.5860901924577179 + x * (9.308522472293802 + x * (10.549658801932976 + x * (-75.98254820608364 + x * (-86.11355463356144 + x * (312.8067523072963 + x * (354.5143192816024 + x * (-664.668046964661 + x * (-753.2904532266158 + x * (685.203501841827 + x * (776.5639687540706 + (-266.16103767780646 - 301.64917603484736 * x) * x)))))))))))))));
      s[17] = 1.498265191912651e-6 + x * (1.498265191912651e-6 + x * (-0.0005206769770046602 + x * (-0.0005206769770046602 + x * (0.026988649968464493 + x * (0.026988649968464493 + x * (-0.4906285484958547 + x * (-0.4906285484958547 + x * (4.073670492072018 + x * (4.073670492072018 + x * (-17.227477305090574 + x * (-17.227477305090574 + x * (38.12464772002069 + x * (38.12464772002069 + x * (-41.750751008283366 + x * (-41.750751008283366 + x * (17.74406917852043 + 17.74406917852043 * x))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(19);

      s[0] = x * (-0.000020567667626491154 + x * (0.000020567667626491154 + x * (0.0025446562366205224 + x * (-0.0025446562366205224 + x * (-0.08442354994336021 + x * (0.08442354994336021 + x * (1.1680290812702923 + x * (-1.1680290812702923 + x * (-8.027061700314892 + x * (8.027061700314892 + x * (29.520060112947878 + x * (-29.520060112947878 + x * (-58.67865622390305 + x * (58.67865622390305 + x * (59.04311992715711 + x * (-59.04311992715711 + x * (-23.44359173578297 + 23.44359173578297 * x)))))))))))))))));
      s[1] = x * (0.0004164952694364459 + x * (-0.00046855717811600164 + x * (-0.05141865723562152 + x * (0.05784598939007421 + x * (1.6960294370807765 + x * (-1.9080331167158735 + x * (-23.215628525771105 + x * (26.11758209149249 + x * (156.81830847417092 + x * (-176.42059703344228 + x * (-561.8560450559485 + x * (632.0880506879421 + x * (1074.9249487972966 + x * (-1209.2905673969585 + x * (-1023.4140787373898 + x * (1151.3408385795635 + (375.0974677725275 - 421.9846512440934 * x) * x))))))))))))))));
      s[2] = x * (-0.004045954045954046 + x * (0.0052019409162266305 + x * (0.49792797827172824 + x * (-0.6401931149207934 + x * (-16.284783125078047 + x * (20.937578303671774 + x * (219.45558120687906 + x * (-282.15717583741593 + x * (-1446.0322033865793 + x * (1859.1842614970305 + x * (4995.675483341366 + x * (-6423.011335724613 + x * (-9091.790053474602 + x * (11689.444354467345 + x * (8128.269509971961 + x * (-10450.632227106807 + x * (-2789.7874165581734 + 3586.869535574794 * x)))))))))))))))));
      s[3] = x * (0.025174825174825177 + x * (-0.03776223776223776 + x * (-3.083190702154988 + x * (4.624786053232482 + x * (99.51190528444769 + x * (-149.26785792667155 + x * (-1309.1002337155032 + x * (1963.6503505732549 + x * (8309.315590800383 + x * (-12463.973386200574 + x * (-27261.717020132768 + x * (40892.57553019915 + x * (46616.3655010068 + x * (-69924.5482515102 + x * (-39204.63163163232 + x * (58806.94744744848 + (12753.313904265935 - 19129.9708563989 * x) * x))))))))))))))));
      s[4] = x * (-0.11328671328671329 + x * (0.20391608391608393 + x * (13.762204313543599 + x * (-24.771967764378477 + x * (-434.4313376634526 + x * (781.9764077942148 + x * (5490.951558695211 + x * (-9883.71280565138 + x * (-32855.87697479871 + x * (59140.57855463767 + x * (100356.50554910352 + x * (-180641.70998838634 + x * (-160643.45160427951 + x * (289158.2128877031 + x * (127926.75984217373 + x * (-230268.1677159127 + x * (-39854.10595083105 + 71737.39071149589 * x)))))))))))))))));
      s[5] = x * (0.3965034965034965 + x * (-0.8921328671328671 + x * (-47.44508747502498 + x * (106.75144681880619 + x * (1436.3823233953547 + x * (-3231.860227639548 + x * (-16873.096312347807 + x * (37964.46670278257 + x * (91842.9100061384 + x * (-206646.54751381138 + x * (-258878.68241000405 + x * (582477.0354225092 + x * (389721.52384116664 + x * (-876873.428642625 + x * (-296475.18619423156 + x * (667069.1689370209 + (89273.19732986155 - 200864.69399218846 * x) * x))))))))))))))));
      s[6] = x * (-1.1454545454545455 + x * (3.4363636363636365 + x * (132.55335876623377 + x * (-397.6600762987013 + x * (-3650.453109679383 + x * (10951.359329038149 + x * (36897.51395043628 + x * (-110692.54185130885 + x * (-180015.37025411552 + x * (540046.1107623465 + x * (470935.9757371906 + x * (-1.4128079272115717e6 + x * (-673539.128597187 + x * (2.0206173857915609e6 + x * (494309.0000301593 + x * (-1.482927000090478e6 + x * (-145068.945661025 + 435206.836983075 * x)))))))))))))))));
      s[7] = x * (2.9454545454545453 + x * (-13.254545454545454 + x * (-307.7151303339518 + x * (1384.7180865027829 + x * (6223.311481360158 + x * (-28004.90166612071 + x * (-53339.17891330154 + x * (240026.30510985694 + x * (236692.18765489478 + x * (-1.0651148444470265e6 + x * (-584031.4206221156 + x * (2.6281413927995204e6 + x * (804125.5015699066 + x * (-3.61856475706458e6 + x * (-575158.7122504131 + x * (2.588214205126859e6 + (165793.08075545717 - 746068.8633995572 * x) * x))))))))))))))));
      s[8] = x * (-8.1 + x * (72.9 + x * (354.14160841836735 + x * (-3187.2744757653063 + x * (-5564.5226123246175 + x * (50080.70351092156 + x * (42517.06853152902 + x * (-382653.6167837612 + x * (-177346.49073158982 + x * (1.5961184165843083e6 + x * (421816.8574839963 + x * (-3.796351717355967e6 + x * (-567429.4090076032 + x * (5.106864681068429e6 + x * (399643.1977469507 + x * (-3.5967887797225565e6 + x * (-113982.7430193768 + 1.0258446871743911e6 * x)))))))))))))))));
      s[9] = 1. + x * x * (-124.7211862244898 + x * x * (4228.394184470663 + x * x * (-60894.24692960778 + x * x * (447065.31380067166 + x * x * (-1.8255410625608359e6 + x * x * (4.288221588297692e6 + x * x * (-5.723632756464545e6 + x * x * (4.0105039210521462e6 - 1.1398274301937679e6 * x * x))))))));
      s[10] = x * (8.1 + x * (72.9 + x * (-354.14160841836735 + x * (-3187.2744757653063 + x * (5564.5226123246175 + x * (50080.70351092156 + x * (-42517.06853152902 + x * (-382653.6167837612 + x * (177346.49073158982 + x * (1.5961184165843083e6 + x * (-421816.8574839963 + x * (-3.796351717355967e6 + x * (567429.4090076032 + x * (5.106864681068429e6 + x * (-399643.1977469507 + x * (-3.5967887797225565e6 + x * (113982.7430193768 + 1.0258446871743911e6 * x)))))))))))))))));
      s[11] = x * (-2.9454545454545453 + x * (-13.254545454545454 + x * (307.7151303339518 + x * (1384.7180865027829 + x * (-6223.311481360158 + x * (-28004.90166612071 + x * (53339.17891330154 + x * (240026.30510985694 + x * (-236692.18765489478 + x * (-1.0651148444470265e6 + x * (584031.4206221156 + x * (2.6281413927995204e6 + x * (-804125.5015699066 + x * (-3.61856475706458e6 + x * (575158.7122504131 + x * (2.588214205126859e6 + (-165793.08075545717 - 746068.8633995572 * x) * x))))))))))))))));
      s[12] = x * (1.1454545454545455 + x * (3.4363636363636365 + x * (-132.55335876623377 + x * (-397.6600762987013 + x * (3650.453109679383 + x * (10951.359329038149 + x * (-36897.51395043628 + x * (-110692.54185130885 + x * (180015.37025411552 + x * (540046.1107623465 + x * (-470935.9757371906 + x * (-1.4128079272115717e6 + x * (673539.128597187 + x * (2.0206173857915609e6 + x * (-494309.0000301593 + x * (-1.482927000090478e6 + x * (145068.945661025 + 435206.836983075 * x)))))))))))))))));
      s[13] = x * (-0.3965034965034965 + x * (-0.8921328671328671 + x * (47.44508747502498 + x * (106.75144681880619 + x * (-1436.3823233953547 + x * (-3231.860227639548 + x * (16873.096312347807 + x * (37964.46670278257 + x * (-91842.9100061384 + x * (-206646.54751381138 + x * (258878.68241000405 + x * (582477.0354225092 + x * (-389721.52384116664 + x * (-876873.428642625 + x * (296475.18619423156 + x * (667069.1689370209 + (-89273.19732986155 - 200864.69399218846 * x) * x))))))))))))))));
      s[14] = x * (0.11328671328671329 + x * (0.20391608391608393 + x * (-13.762204313543599 + x * (-24.771967764378477 + x * (434.4313376634526 + x * (781.9764077942148 + x * (-5490.951558695211 + x * (-9883.71280565138 + x * (32855.87697479871 + x * (59140.57855463767 + x * (-100356.50554910352 + x * (-180641.70998838634 + x * (160643.45160427951 + x * (289158.2128877031 + x * (-127926.75984217373 + x * (-230268.1677159127 + x * (39854.10595083105 + 71737.39071149589 * x)))))))))))))))));
      s[15] = x * (-0.025174825174825177 + x * (-0.03776223776223776 + x * (3.083190702154988 + x * (4.624786053232482 + x * (-99.51190528444769 + x * (-149.26785792667155 + x * (1309.1002337155032 + x * (1963.6503505732549 + x * (-8309.315590800383 + x * (-12463.973386200574 + x * (27261.717020132768 + x * (40892.57553019915 + x * (-46616.3655010068 + x * (-69924.5482515102 + x * (39204.63163163232 + x * (58806.94744744848 + (-12753.313904265935 - 19129.9708563989 * x) * x))))))))))))))));
      s[16] = x * (0.004045954045954046 + x * (0.0052019409162266305 + x * (-0.49792797827172824 + x * (-0.6401931149207934 + x * (16.284783125078047 + x * (20.937578303671774 + x * (-219.45558120687906 + x * (-282.15717583741593 + x * (1446.0322033865793 + x * (1859.1842614970305 + x * (-4995.675483341366 + x * (-6423.011335724613 + x * (9091.790053474602 + x * (11689.444354467345 + x * (-8128.269509971961 + x * (-10450.632227106807 + x * (2789.7874165581734 + 3586.869535574794 * x)))))))))))))))));
      s[17] = x * (-0.0004164952694364459 + x * (-0.00046855717811600164 + x * (0.05141865723562152 + x * (0.05784598939007421 + x * (-1.6960294370807765 + x * (-1.9080331167158735 + x * (23.215628525771105 + x * (26.11758209149249 + x * (-156.81830847417092 + x * (-176.42059703344228 + x * (561.8560450559485 + x * (632.0880506879421 + x * (-1074.9249487972966 + x * (-1209.2905673969585 + x * (1023.4140787373898 + x * (1151.3408385795635 + (-375.0974677725275 - 421.9846512440934 * x) * x))))))))))))))));
      s[18] = x * (0.000020567667626491154 + x * (0.000020567667626491154 + x * (-0.0025446562366205224 + x * (-0.0025446562366205224 + x * (0.08442354994336021 + x * (0.08442354994336021 + x * (-1.1680290812702923 + x * (-1.1680290812702923 + x * (8.027061700314892 + x * (8.027061700314892 + x * (-29.520060112947878 + x * (-29.520060112947878 + x * (58.67865622390305 + x * (58.67865622390305 + x * (-59.04311992715711 + x * (-59.04311992715711 + x * (23.44359173578297 + 23.44359173578297 * x)))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(20);

      s[0] = -3.5375705920159817e-7 + x * (3.5375705920159817e-7 + x * (0.00015400756734719183 + x * (-0.00015400756734719183 + x * (-0.010134798258759316 + x * (0.010134798258759316 + x * (0.23820627635296435 + x * (-0.23820627635296435 + x * (-2.6237832305799675 + x * (2.6237832305799675 + x * (15.295589740589204 + x * (-15.295589740589204 + x * (-49.64858533245719 + x * (49.64858533245719 + x * (89.49421811904733 + x * (-89.49421811904733 + x * (-83.26652768292806 + x * (83.26652768292806 + (31.020863254424178 - 31.020863254424178 * x) * x)))))))))))))))));
      s[1] = 7.51213519833982e-6 + x * (-8.39591580990921e-6 + x * (-0.0032685244535482203 + x * (0.003653056742200952 + x * (0.21440298971309593 + x * (-0.23962687085581313 + x * (-5.0057774934453985 + x * (5.59469249267427 + x * (54.52229733188103 + x * (-60.93668525327879 + x * (-312.4174483988103 + x * (349.172442328082 + x * (988.8571057138934 + x * (-1105.1932357978808 + x * (-1719.5223862254936 + x * (1921.81913754614 + x * (1520.7097424197912 + x * (-1699.6167709397666 + x * (-527.354675325211 + 589.3964018340594 * x))))))))))))))))));
      s[2] = -0.00007662377902306616 + x * (0.00009705678676255047 + x * (0.03331172426985892 + x * (-0.0421948507418213 + x * (-2.175108530995029 + x * (2.755137472593704 + x * (50.30083596228065 + x * (-63.714392218888825 + x * (-539.2020303910806 + x * (682.9892384953688 + x * (3016.216483461109 + x * (-3820.540879050738 + x * (-9227.556540690912 + x * (11688.238284875155 + x * (15333.229400087346 + x * (-19422.090573443973 + x * (-12818.662814345504 + x * (16236.972898170972 + (4187.816539347265 - 5304.567616506534 * x) * x)))))))))))))))));
      s[3] = 0.0005010016320738941 + x * (-0.0007322331545695376 + x * (-0.21754107028532985 + x * (0.3179446411862513 + x * (14.106635067839088 + x * (-20.617389714534053 + x * (-321.57516308463823 + x * (469.99446912370206 + x * (3366.3226075993753 + x * (-4920.009964952933 + x * (-18187.183572160764 + x * (26581.268297773422 + x * (53126.39304708938 + x * (-77646.26676113064 + x * (-83575.3142987821 + x * (122148.5362828354 + x * (66144.3001220228 + x * (-96672.43863987947 + x * (-20566.83233768323 + 30059.216493537027 * x))))))))))))))))));
      s[4] = -0.002368371351622045 + x * (0.004090823243710805 + x * (1.0263690666321756 + x * (-1.7728192969101215 + x * (-65.82047723786322 + x * (113.68991522903646 + x * (1466.2474281230984 + x * (-2532.6091940308065 + x * (-14786.25277836214 + x * (25539.891162625514 + x * (75854.21554535434 + x * (-131020.91776015749 + x * (-208486.49014876687 + x * (360113.0284387791 + x * (309535.00700416317 + x * (-534651.3757344637 + x * (-233128.74771689688 + x * (402676.92787464004 + (69610.81714292786 - 120236.86597414811 * x) * x)))))))))))))))));
      s[5] = 0.008684028289280832 + x * (-0.01833294861070398 + x * (-3.7505589000166593 + x * (7.9178465667018365 + x * (235.85415155622533 + x * (-497.91431995203135 + x * (-5045.124246336526 + x * (10650.817853377112 + x * (47771.05850350461 + x * (-100850.01239628751 + x * (-226979.18597076501 + x * (479178.28149383725 + x * (582651.0154283752 + x * (-1.2300410325710145e6 + x * (-818924.2481442803 + x * (1.7288400794157027e6 + x * (591157.2869581858 + x * (-1.2479987169117257e6 + x * (-170862.91480536837 + 360710.59792244434 * x))))))))))))))))));
      s[6] = -0.026052084867842495 + x * (0.07071280178414392 + x * (11.175850626884618 + x * (-30.334451701543962 + x * (-675.372447353597 + x * (1833.1537856740488 + x * (13313.126966161928 + x * (-36135.63033672523 + x * (-112685.93004888608 + x * (305861.8101326908 + x * (489457.96130005043 + x * (-1.3285287521001368e6 + x * (-1.1767422162361993e6 + x * (3.1940145869268267e6 + x * (1.577564452866926e6 + x * (-4.281960657781656e6 + x * (-1.1003277212904654e6 + x * (2.9866038149312637e6 + (310084.5490912241 - 841658.0618190368 * x) * x)))))))))))))))));
      s[7] = 0.06773542065639049 + x * (-0.25739459849428387 + x * (-28.578142499641256 + x * (108.59694149863678 + x * (1557.3745445754282 + x * (-5918.023269386628 + x * (-25062.469832965835 + x * (95237.38536527017 + x * (186095.65925825242 + x * (-707163.5051813591 + x * (-743879.8683416699 + x * (2.8267434996983455e6 + x * (1.6935216567527999e6 + x * (-6.435382295660638e6 + x * (-2.1878320816843268e6 + x * (8.313761910400442e6 + x * (1.4869648864640784e6 + x * (-5.650466568563498e6 + x * (-411336.6467536646 + 1.5630792576639254e6 * x))))))))))))))))));
      s[8] = -0.16933855164097622 + x * (1.0724774937261827 + x * (67.09824747453301 + x * (-424.9555673387091 + x * (-2233.7220458637958 + x * (14146.906290470706 + x * (29280.322468606402 + x * (-185442.0423011739 + x * (-195528.04120826302 + x * (1.2383442609856657e6 + x * (734905.9838345374 + x * (-4.654404564285404e6 + x * (-1.609971815208724e6 + x * (1.0196488162988584e7 + x * (2.0279536473925186e6 + x * (-1.2843706433485951e7 + x * (-1.354676286220033e6 + x * (8.579616479393542e6 + (370202.98207829817 - 2.3446188864958882e6 * x) * x)))))))))))))))));
      s[9] = 0.6209080226835795 + x * (-11.79725243098801 + x * (-46.78442190549022 + x * (888.9040162043142 + x * (1169.5504795953038 + x * (-22221.459112310775 + x * (-13676.060885249623 + x * (259845.1568197428 + x * (86254.4871824446 + x * (-1.6388352564664474e6 + x * (-313891.0174201495 + x * (5.963929330982841e6 + x * (674189.8043857352 + x * (-1.2809606283328967e7 + x * (-838424.6643681997 + x * (1.5930068622995792e7 + x * (555247.5012827168 + x * (-1.0549702524371618e7 + x * (-150823.43714301035 + 2.865645305717197e6 * x))))))))))))))))));
      s[10] = 0.6209080226835795 + x * (11.79725243098801 + x * (-46.78442190549022 + x * (-888.9040162043142 + x * (1169.5504795953038 + x * (22221.459112310775 + x * (-13676.060885249623 + x * (-259845.1568197428 + x * (86254.4871824446 + x * (1.6388352564664474e6 + x * (-313891.0174201495 + x * (-5.963929330982841e6 + x * (674189.8043857352 + x * (1.2809606283328967e7 + x * (-838424.6643681997 + x * (-1.5930068622995792e7 + x * (555247.5012827168 + x * (1.0549702524371618e7 + (-150823.43714301035 - 2.865645305717197e6 * x) * x)))))))))))))))));
      s[11] = -0.16933855164097622 + x * (-1.0724774937261827 + x * (67.09824747453301 + x * (424.9555673387091 + x * (-2233.7220458637958 + x * (-14146.906290470706 + x * (29280.322468606402 + x * (185442.0423011739 + x * (-195528.04120826302 + x * (-1.2383442609856657e6 + x * (734905.9838345374 + x * (4.654404564285404e6 + x * (-1.609971815208724e6 + x * (-1.0196488162988584e7 + x * (2.0279536473925186e6 + x * (1.2843706433485951e7 + x * (-1.354676286220033e6 + x * (-8.579616479393542e6 + x * (370202.98207829817 + 2.3446188864958882e6 * x))))))))))))))))));
      s[12] = 0.06773542065639049 + x * (0.25739459849428387 + x * (-28.578142499641256 + x * (-108.59694149863678 + x * (1557.3745445754282 + x * (5918.023269386628 + x * (-25062.469832965835 + x * (-95237.38536527017 + x * (186095.65925825242 + x * (707163.5051813591 + x * (-743879.8683416699 + x * (-2.8267434996983455e6 + x * (1.6935216567527999e6 + x * (6.435382295660638e6 + x * (-2.1878320816843268e6 + x * (-8.313761910400442e6 + x * (1.4869648864640784e6 + x * (5.650466568563498e6 + (-411336.6467536646 - 1.5630792576639254e6 * x) * x)))))))))))))))));
      s[13] = -0.026052084867842495 + x * (-0.07071280178414392 + x * (11.175850626884618 + x * (30.334451701543962 + x * (-675.372447353597 + x * (-1833.1537856740488 + x * (13313.126966161928 + x * (36135.63033672523 + x * (-112685.93004888608 + x * (-305861.8101326908 + x * (489457.96130005043 + x * (1.3285287521001368e6 + x * (-1.1767422162361993e6 + x * (-3.1940145869268267e6 + x * (1.577564452866926e6 + x * (4.281960657781656e6 + x * (-1.1003277212904654e6 + x * (-2.9866038149312637e6 + x * (310084.5490912241 + 841658.0618190368 * x))))))))))))))))));
      s[14] = 0.008684028289280832 + x * (0.01833294861070398 + x * (-3.7505589000166593 + x * (-7.9178465667018365 + x * (235.85415155622533 + x * (497.91431995203135 + x * (-5045.124246336526 + x * (-10650.817853377112 + x * (47771.05850350461 + x * (100850.01239628751 + x * (-226979.18597076501 + x * (-479178.28149383725 + x * (582651.0154283752 + x * (1.2300410325710145e6 + x * (-818924.2481442803 + x * (-1.7288400794157027e6 + x * (591157.2869581858 + x * (1.2479987169117257e6 + (-170862.91480536837 - 360710.59792244434 * x) * x)))))))))))))))));
      s[15] = -0.002368371351622045 + x * (-0.004090823243710805 + x * (1.0263690666321756 + x * (1.7728192969101215 + x * (-65.82047723786322 + x * (-113.68991522903646 + x * (1466.2474281230984 + x * (2532.6091940308065 + x * (-14786.25277836214 + x * (-25539.891162625514 + x * (75854.21554535434 + x * (131020.91776015749 + x * (-208486.49014876687 + x * (-360113.0284387791 + x * (309535.00700416317 + x * (534651.3757344637 + x * (-233128.74771689688 + x * (-402676.92787464004 + x * (69610.81714292786 + 120236.86597414811 * x))))))))))))))))));
      s[16] = 0.0005010016320738941 + x * (0.0007322331545695376 + x * (-0.21754107028532985 + x * (-0.3179446411862513 + x * (14.106635067839088 + x * (20.617389714534053 + x * (-321.57516308463823 + x * (-469.99446912370206 + x * (3366.3226075993753 + x * (4920.009964952933 + x * (-18187.183572160764 + x * (-26581.268297773422 + x * (53126.39304708938 + x * (77646.26676113064 + x * (-83575.3142987821 + x * (-122148.5362828354 + x * (66144.3001220228 + x * (96672.43863987947 + (-20566.83233768323 - 30059.216493537027 * x) * x)))))))))))))))));
      s[17] = -0.00007662377902306616 + x * (-0.00009705678676255047 + x * (0.03331172426985892 + x * (0.0421948507418213 + x * (-2.175108530995029 + x * (-2.755137472593704 + x * (50.30083596228065 + x * (63.714392218888825 + x * (-539.2020303910806 + x * (-682.9892384953688 + x * (3016.216483461109 + x * (3820.540879050738 + x * (-9227.556540690912 + x * (-11688.238284875155 + x * (15333.229400087346 + x * (19422.090573443973 + x * (-12818.662814345504 + x * (-16236.972898170972 + x * (4187.816539347265 + 5304.567616506534 * x))))))))))))))))));
      s[18] = 7.51213519833982e-6 + x * (8.39591580990921e-6 + x * (-0.0032685244535482203 + x * (-0.003653056742200952 + x * (0.21440298971309593 + x * (0.23962687085581313 + x * (-5.0057774934453985 + x * (-5.59469249267427 + x * (54.52229733188103 + x * (60.93668525327879 + x * (-312.4174483988103 + x * (-349.172442328082 + x * (988.8571057138934 + x * (1105.1932357978808 + x * (-1719.5223862254936 + x * (-1921.81913754614 + x * (1520.7097424197912 + x * (1699.6167709397666 + (-527.354675325211 - 589.3964018340594 * x) * x)))))))))))))))));
      s[19] = -3.5375705920159817e-7 + x * (-3.5375705920159817e-7 + x * (0.00015400756734719183 + x * (0.00015400756734719183 + x * (-0.010134798258759316 + x * (-0.010134798258759316 + x * (0.23820627635296435 + x * (0.23820627635296435 + x * (-2.6237832305799675 + x * (-2.6237832305799675 + x * (15.295589740589204 + x * (15.295589740589204 + x * (-49.64858533245719 + x * (-49.64858533245719 + x * (89.49421811904733 + x * (89.49421811904733 + x * (-83.26652768292806 + x * (-83.26652768292806 + x * (31.020863254424178 + 31.020863254424178 * x))))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(21);

      s[0] = x * (5.412544112234515e-6 + x * (-5.412544112234515e-6 + x * (-0.0008334060767534157 + x * (0.0008334060767534157 + x * (0.03488244177314945 + x * (-0.03488244177314945 + x * (-0.6201869966521275 + x * (0.6201869966521275 + x * (5.621242863065229 + x * (-5.621242863065229 + x * (-28.337919393502506 + x * (28.337919393502506 + x * (82.18045746521643 + x * (-82.18045746521643 + x * (-135.41852441764257 + x * (135.41852441764257 + x * (117.14405226439669 + x * (-117.14405226439669 + x * (-41.10317623312165 + 41.10317623312165 * x)))))))))))))))))));
      s[1] = x * (-0.00012027875804965589 + x * (0.00013364306449961764 + x * (0.018491921503125983 + x * (-0.02054657944791776 + x * (-0.7708559750557105 + x * (0.8565066389507895 + x * (13.605424588394165 + x * (-15.117138431549073 + x * (-121.90162084755339 + x * (135.44624538617043 + x * (604.1522219390936 + x * (-671.2802465989929 + x * (-1710.0969895282064 + x * (1900.1077661424515 + x * (2724.3020794608096 + x * (-3027.002310512011 + x * (-2249.1658034764164 + x * (2499.0731149737962 + (739.8571721961897 - 822.063524662433 * x) * x))))))))))))))))));
      s[2] = x * (0.0012854792266556972 + x * (-0.0016068490333196216 + x * (-0.1972108611639424 + x * (0.246513576454928 + x * (8.174371893783269 + x * (-10.217964867229087 + x * (-142.8065355419669 + x * (178.50816942745863 + x * (1259.2043798985487 + x * (-1574.005474873186 + x * (-6097.794192343355 + x * (7622.242740429193 + x * (16720.311078409257 + x * (-20900.38884801157 + x * (-25554.272137164553 + x * (31942.840171455693 + x * (20055.061747664713 + x * (-25068.827184580892 + x * (-6247.682787434491 + 7809.603484293113 * x)))))))))))))))))));
      s[3] = x * (-0.008814714697067638 + x * (0.012592449567239483 + x * (1.3480868260280026 + x * (-1.9258383228971465 + x * (-55.414611751417304 + x * (79.16373107345329 + x * (953.7363267590891 + x * (-1362.4804667986987 + x * (-8218.213676112982 + x * (11740.305251589974 + x * (38533.05674413892 + x * (-55047.223920198456 + x * (-101348.17956963019 + x * (144783.11367090026 + x * (147542.4652507986 + x * (-210774.9503582837 + x * (-110209.12437034442 + x * (157441.60624334918 + (32800.334634031075 - 46857.62090575868 * x) * x))))))))))))))))));
      s[4] = x * (0.043706293706293704 + x * (-0.07284382284382285 + x * (-6.652053992083754 + x * (11.086756653472923 + x * (269.9275436321774 + x * (-449.87923938696235 + x * (-4539.886982972507 + x * (7566.478304954178 + x * (37788.74894229402 + x * (-62981.2482371567 + x * (-169251.48815985664 + x * (282085.81359976105 + x * (422292.870467887 + x * (-703821.4507798117 + x * (-584076.0274044004 + x * (973460.0456740008 + x * (417009.39725079935 + x * (-695015.6620846656 + x * (-119486.93330968464 + 199144.88884947437 * x)))))))))))))))))));
      s[5] = x * (-0.16783216783216784 + x * (0.3356643356643357 + x * (25.33875912447341 + x * (-50.67751824894682 + x * (-1006.1219736318943 + x * (2012.2439472637886 + x * (16287.90525216341 + x * (-32575.81050432682 + x * (-128382.63608146214 + x * (256765.2721629243 + x * (539475.1589258037 + x * (-1.0789503178516075e6 + x * (-1.2690531939319416e6 + x * (2.5381063878638833e6 + x * (1.6710964544959255e6 + x * (-3.342192908991851e6 + x * (-1.1470745597729725e6 + x * (2.294149119545945e6 + (318631.822159159 - 637263.644318318 * x) * x))))))))))))))))));
      s[6] = x * (0.5244755244755245 + x * (-1.3111888111888113 + x * (-78.00355233390948 + x * (195.0088808347737 + x * (2973.3434545686528 + x * (-7433.358636421633 + x * (-44892.83199235525 + x * (112232.07998088813 + x * (324214.3534543915 + x * (-810535.8836359787 + x * (-1.2643031135714666e6 + x * (3.1607577839286667e6 + x * (2.8073362577881976e6 + x * (-7.018340644470494e6 + x * (-3.539489733272802e6 + x * (8.848724333182005e6 + x * (2.3515028475345937e6 + x * (-5.878757118836484e6 + x * (-637263.644318318 + 1.593159110795795e6 * x)))))))))))))))))));
      s[7] = x * (-1.3986013986013985 + x * (4.662004662004662 + x * (201.21071609166847 + x * (-670.7023869722283 + x * (-6993.300461174138 + x * (23311.001537247128 + x * (91566.60443160112 + x * (-305222.01477200375 + x * (-595378.7598442857 + x * (1.9845958661476187e6 + x * (2.1597279732717066e6 + x * (-7.199093244239022e6 + x * (-4.560971099496231e6 + x * (1.5203236998320773e7 + x * (5.550120257461527e6 + x * (-1.850040085820509e7 + x * (-3.5941669539553137e6 + x * (1.198055651318438e7 + (955895.4664774771 - 3.18631822159159e6 * x) * x))))))))))))))))));
      s[8] = x * (3.409090909090909 + x * (-17.045454545454547 + x * (-443.10263562495703 + x * (2215.513178124785 + x * (11418.06087763739 + x * (-57090.30438818695 + x * (-127143.9638512259 + x * (635719.8192561294 + x * (752565.5008623294 + x * (-3.762827504311647e6 + x * (-2.575040825740954e6 + x * (1.287520412870477e7 + x * (5.233979020940275e6 + x * (-2.6169895104701377e7 + x * (-6.205243215411866e6 + x * (3.1026216077059332e7 + x * (3.9454585378857865e6 + x * (-1.9727292689428933e7 + x * (-1.0355534220172669e6 + 5.177767110086334e6 * x)))))))))))))))))));
      s[9] = x * (-9.090909090909092 + x * (90.9090909090909 + x * (499.788846515037 + x * (-4997.8884651503695 + x * (-10009.453397193145 + x * (100094.53397193147 + x * (99309.2890597805 + x * (-993092.890597805 + x * (-552176.6864032213 + x * (5.521766864032214e6 + x * (1.820140285809033e6 + x * (-1.820140285809033e7 + x * (-3.6126371910010213e6 + x * (3.612637191001021e7 + x * (4.21553087034789e6 + x * (-4.2155308703478895e7 + x * (-2.6510167603642032e6 + x * (2.651016760364203e7 + (690368.9480115112 - 6.903689480115112e6 * x) * x))))))))))))))))));
      s[10] = 1. + x * x * (-154.97677311665407 + x * x * (6598.717185356653 + x * x * (-121028.00916570045 + x * x * (1.1531416151619398e6 + x * x * (-6.274158981874429e6 + x * x * (2.0418933234909475e7 + x * x * (-4.02027174967495e7 + x * x * (4.666245141746685e7 + x * x * (-2.92371249482875e7 + 7.594058428126623e6 * x * x)))))))));
      s[11] = x * (9.090909090909092 + x * (90.9090909090909 + x * (-499.788846515037 + x * (-4997.8884651503695 + x * (10009.453397193145 + x * (100094.53397193147 + x * (-99309.2890597805 + x * (-993092.890597805 + x * (552176.6864032213 + x * (5.521766864032214e6 + x * (-1.820140285809033e6 + x * (-1.820140285809033e7 + x * (3.6126371910010213e6 + x * (3.612637191001021e7 + x * (-4.21553087034789e6 + x * (-4.2155308703478895e7 + x * (2.6510167603642032e6 + x * (2.651016760364203e7 + (-690368.9480115112 - 6.903689480115112e6 * x) * x))))))))))))))))));
      s[12] = x * (-3.409090909090909 + x * (-17.045454545454547 + x * (443.10263562495703 + x * (2215.513178124785 + x * (-11418.06087763739 + x * (-57090.30438818695 + x * (127143.9638512259 + x * (635719.8192561294 + x * (-752565.5008623294 + x * (-3.762827504311647e6 + x * (2.575040825740954e6 + x * (1.287520412870477e7 + x * (-5.233979020940275e6 + x * (-2.6169895104701377e7 + x * (6.205243215411866e6 + x * (3.1026216077059332e7 + x * (-3.9454585378857865e6 + x * (-1.9727292689428933e7 + x * (1.0355534220172669e6 + 5.177767110086334e6 * x)))))))))))))))))));
      s[13] = x * (1.3986013986013985 + x * (4.662004662004662 + x * (-201.21071609166847 + x * (-670.7023869722283 + x * (6993.300461174138 + x * (23311.001537247128 + x * (-91566.60443160112 + x * (-305222.01477200375 + x * (595378.7598442857 + x * (1.9845958661476187e6 + x * (-2.1597279732717066e6 + x * (-7.199093244239022e6 + x * (4.560971099496231e6 + x * (1.5203236998320773e7 + x * (-5.550120257461527e6 + x * (-1.850040085820509e7 + x * (3.5941669539553137e6 + x * (1.198055651318438e7 + (-955895.4664774771 - 3.18631822159159e6 * x) * x))))))))))))))))));
      s[14] = x * (-0.5244755244755245 + x * (-1.3111888111888113 + x * (78.00355233390948 + x * (195.0088808347737 + x * (-2973.3434545686528 + x * (-7433.358636421633 + x * (44892.83199235525 + x * (112232.07998088813 + x * (-324214.3534543915 + x * (-810535.8836359787 + x * (1.2643031135714666e6 + x * (3.1607577839286667e6 + x * (-2.8073362577881976e6 + x * (-7.018340644470494e6 + x * (3.539489733272802e6 + x * (8.848724333182005e6 + x * (-2.3515028475345937e6 + x * (-5.878757118836484e6 + x * (637263.644318318 + 1.593159110795795e6 * x)))))))))))))))))));
      s[15] = x * (0.16783216783216784 + x * (0.3356643356643357 + x * (-25.33875912447341 + x * (-50.67751824894682 + x * (1006.1219736318943 + x * (2012.2439472637886 + x * (-16287.90525216341 + x * (-32575.81050432682 + x * (128382.63608146214 + x * (256765.2721629243 + x * (-539475.1589258037 + x * (-1.0789503178516075e6 + x * (1.2690531939319416e6 + x * (2.5381063878638833e6 + x * (-1.6710964544959255e6 + x * (-3.342192908991851e6 + x * (1.1470745597729725e6 + x * (2.294149119545945e6 + (-318631.822159159 - 637263.644318318 * x) * x))))))))))))))))));
      s[16] = x * (-0.043706293706293704 + x * (-0.07284382284382285 + x * (6.652053992083754 + x * (11.086756653472923 + x * (-269.9275436321774 + x * (-449.87923938696235 + x * (4539.886982972507 + x * (7566.478304954178 + x * (-37788.74894229402 + x * (-62981.2482371567 + x * (169251.48815985664 + x * (282085.81359976105 + x * (-422292.870467887 + x * (-703821.4507798117 + x * (584076.0274044004 + x * (973460.0456740008 + x * (-417009.39725079935 + x * (-695015.6620846656 + x * (119486.93330968464 + 199144.88884947437 * x)))))))))))))))))));
      s[17] = x * (0.008814714697067638 + x * (0.012592449567239483 + x * (-1.3480868260280026 + x * (-1.9258383228971465 + x * (55.414611751417304 + x * (79.16373107345329 + x * (-953.7363267590891 + x * (-1362.4804667986987 + x * (8218.213676112982 + x * (11740.305251589974 + x * (-38533.05674413892 + x * (-55047.223920198456 + x * (101348.17956963019 + x * (144783.11367090026 + x * (-147542.4652507986 + x * (-210774.9503582837 + x * (110209.12437034442 + x * (157441.60624334918 + (-32800.334634031075 - 46857.62090575868 * x) * x))))))))))))))))));
      s[18] = x * (-0.0012854792266556972 + x * (-0.0016068490333196216 + x * (0.1972108611639424 + x * (0.246513576454928 + x * (-8.174371893783269 + x * (-10.217964867229087 + x * (142.8065355419669 + x * (178.50816942745863 + x * (-1259.2043798985487 + x * (-1574.005474873186 + x * (6097.794192343355 + x * (7622.242740429193 + x * (-16720.311078409257 + x * (-20900.38884801157 + x * (25554.272137164553 + x * (31942.840171455693 + x * (-20055.061747664713 + x * (-25068.827184580892 + x * (6247.682787434491 + 7809.603484293113 * x)))))))))))))))))));
      s[19] = x * (0.00012027875804965589 + x * (0.00013364306449961764 + x * (-0.018491921503125983 + x * (-0.02054657944791776 + x * (0.7708559750557105 + x * (0.8565066389507895 + x * (-13.605424588394165 + x * (-15.117138431549073 + x * (121.90162084755339 + x * (135.44624538617043 + x * (-604.1522219390936 + x * (-671.2802465989929 + x * (1710.0969895282064 + x * (1900.1077661424515 + x * (-2724.3020794608096 + x * (-3027.002310512011 + x * (2249.1658034764164 + x * (2499.0731149737962 + (-739.8571721961897 - 822.063524662433 * x) * x))))))))))))))))));
      s[20] = x * (-5.412544112234515e-6 + x * (-5.412544112234515e-6 + x * (0.0008334060767534157 + x * (0.0008334060767534157 + x * (-0.03488244177314945 + x * (-0.03488244177314945 + x * (0.6201869966521275 + x * (0.6201869966521275 + x * (-5.621242863065229 + x * (-5.621242863065229 + x * (28.337919393502506 + x * (28.337919393502506 + x * (-82.18045746521643 + x * (-82.18045746521643 + x * (135.41852441764257 + x * (135.41852441764257 + x * (-117.14405226439669 + x * (-117.14405226439669 + x * (41.10317623312165 + 41.10317623312165 * x)))))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(2);

      s[0] = 0.5 - 0.5 * x;
      s[1] = 0.5 + 0.5 * x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(3);

      s[0] = (-0.5 + 0.5 * x) * x;
      s[1] = 1. - x * x;
      s[2] = (0.5 + 0.5 * x) * x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(4);

      s[0] = -0.125 + x * (0.125 + (0.625 - 0.625 * x) * x);
      s[1] = 0.625 + x * (-1.3975424859373686 + x * (-0.625 + 1.3975424859373686 * x));
      s[2] = 0.625 + x * (1.3975424859373686 + (-0.625 - 1.3975424859373686 * x) * x);
      s[3] = -0.125 + x * (-0.125 + (0.625 + 0.625 * x) * x);
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(5);

      s[0] = x * (0.37500000000000006 + x * (-0.37500000000000006 + (-0.8750000000000001 + 0.8750000000000001 * x) * x));
      s[1] = x * (-1.3365845776954535 + x * (2.041666666666667 + (1.3365845776954535 - 2.041666666666667 * x) * x));
      s[2] = 1. + x * x * (-3.3333333333333335 + 2.3333333333333335 * x * x);
      s[3] = x * (1.3365845776954535 + x * (2.041666666666667 + (-1.3365845776954535 - 2.041666666666667 * x) * x));
      s[4] = x * (-0.37500000000000006 + x * (-0.37500000000000006 + (0.8750000000000001 + 0.8750000000000001 * x) * x));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(6);

      s[0] = 0.06250000000000001 + x * (-0.06250000000000001 + x * (-0.8750000000000001 + x * (0.8750000000000001 + (1.3125000000000002 - 1.3125000000000002 * x) * x)));
      s[1] = -0.19464864235384238 + x * (0.25442427006989676 + x * (2.5871729402399812 + x * (-3.3816808527673343 + x * (-2.3925242978861387 + 3.127256582697437 * x))));
      s[2] = 0.6321486423538424 + x * (-2.2162650542747366 + x * (-1.7121729402399801 + x * (6.002748088169852 + (1.0800242978861376 - 3.786483033895115 * x) * x)));
      s[3] = 0.6321486423538424 + x * (2.2162650542747366 + x * (-1.7121729402399801 + x * (-6.002748088169852 + x * (1.0800242978861376 + 3.786483033895115 * x))));
      s[4] = -0.19464864235384238 + x * (-0.25442427006989676 + x * (2.5871729402399812 + x * (3.3816808527673343 + (-2.3925242978861387 - 3.127256582697437 * x) * x)));
      s[5] = 0.06250000000000001 + x * (0.06250000000000001 + x * (-0.8750000000000001 + x * (-0.8750000000000001 + x * (1.3125000000000002 + 1.3125000000000002 * x))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(7);

      s[0] = x * (-0.3124999999999999 + x * (0.3124999999999999 + x * (1.8749999999999993 + x * (-1.8749999999999993 + x * (-2.062499999999999 + 2.062499999999999 * x)))));
      s[1] = x * (0.9075444712688205 + x * (-1.0931321964313954 + x * (-5.036139734341987 + x * (6.066001902518355 + (4.128595263073167 - 4.97286970608696 * x) * x))));
      s[2] = x * (-2.0069692405887536 + x * (4.280632196431396 + x * (4.918693584294698 + x * (-10.491001902518356 + x * (-2.911724343705945 + 6.210369706086959 * x)))));
      s[3] = 1. + x * x * (-7. + x * x * (12.600000000000001 - 6.600000000000001 * x * x));
      s[4] = x * (2.0069692405887536 + x * (4.280632196431396 + x * (-4.918693584294698 + x * (-10.491001902518356 + x * (2.911724343705945 + 6.210369706086959 * x)))));
      s[5] = x * (-0.9075444712688205 + x * (-1.0931321964313954 + x * (5.036139734341987 + x * (6.066001902518355 + (-4.128595263073167 - 4.97286970608696 * x) * x))));
      s[6] = x * (0.3124999999999999 + x * (0.3124999999999999 + x * (-1.8749999999999993 + x * (-1.8749999999999993 + x * (2.062499999999999 + 2.062499999999999 * x)))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(8);

      s[0] = -0.03906249999999999 + x * (0.03906249999999999 + x * (1.0546875 + x * (-1.0546875 + x * (-3.867187499999999 + x * (3.867187499999999 + (3.3515624999999987 - 3.3515624999999987 * x) * x)))));
      s[1] = 0.10884002339880917 + x * (-0.12485374636569209 + x * (-2.9042970734844875 + x * (3.3316087121258504 + x * (9.892051881471831 + x * (-11.347477684014024 + x * (-7.096594831386153 + 8.140722718253866 * x))))));
      s[2] = -0.20402935346955614 + x * (0.34481881174242957 + x * (5.130062549487321 + x * (-8.670037141212168 + x * (-11.054944637017066 + x * (18.6833551584202 + (6.128911440999301 - 10.35813682895046 * x) * x)))));
      s[3] = 0.6342518300707471 + x * (-3.0303592933934 + x * (-3.280452976002834 + x * (15.673508046892614 + x * (5.030080255545233 + x * (-24.032962501985814 + x * (-2.3838791096131464 + 11.389813748486599 * x))))));
      s[4] = 0.6342518300707471 + x * (3.0303592933934 + x * (-3.280452976002834 + x * (-15.673508046892614 + x * (5.030080255545233 + x * (24.032962501985814 + (-2.3838791096131464 - 11.389813748486599 * x) * x)))));
      s[5] = -0.20402935346955614 + x * (-0.34481881174242957 + x * (5.130062549487321 + x * (8.670037141212168 + x * (-11.054944637017066 + x * (-18.6833551584202 + x * (6.128911440999301 + 10.35813682895046 * x))))));
      s[6] = 0.10884002339880917 + x * (0.12485374636569209 + x * (-2.9042970734844875 + x * (-3.3316087121258504 + x * (9.892051881471831 + x * (11.347477684014024 + (-7.096594831386153 - 8.140722718253866 * x) * x)))));
      s[7] = -0.03906249999999999 + x * (-0.03906249999999999 + x * (1.0546875 + x * (1.0546875 + x * (-3.867187499999999 + x * (-3.867187499999999 + x * (3.3515624999999987 + 3.3515624999999987 * x))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(9);

      s[0] = x * (0.2734375 + x * (-0.2734375 + x * (-3.0078125000000004 + x * (3.0078125000000004 + x * (7.8203125 + x * (-7.8203125 + x * (-5.5859375 + 5.5859375 * x)))))));
      s[1] = x * (-0.7417823979162542 + x * (0.8244243471012852 + x * (7.985115342243531 + x * (-8.874736743619522 + x * (-19.51111212546167 + x * (21.68484439700835 + (12.267779181134392 - 13.634532000490115 * x) * x))))));
      s[2] = x * (1.2694130863581494 + x * (-1.874540469537114 + x * (-12.464825834804081 + x * (18.40679029086329 + x * (23.087477606474856 + x * (-34.093244805779875 + x * (-11.892064858028922 + 17.560994984453693 * x)))))));
      s[3] = x * (-2.6593102175739185 + x * (7.3235536224358295 + x * (11.743170139553492 + x * (-32.33986604724378 + x * (-16.24696418398273 + x * (44.74299862305725 + (7.163104262003158 - 19.7266861982493 * x) * x))))));
      s[4] = 1. + x * x * (-12. + x * x * (39.6 + x * x * (-49.028571428571425 + 20.428571428571427 * x * x)));
      s[5] = x * (2.6593102175739185 + x * (7.3235536224358295 + x * (-11.743170139553492 + x * (-32.33986604724378 + x * (16.24696418398273 + x * (44.74299862305725 + (-7.163104262003158 - 19.7266861982493 * x) * x))))));
      s[6] = x * (-1.2694130863581494 + x * (-1.874540469537114 + x * (12.464825834804081 + x * (18.40679029086329 + x * (-23.087477606474856 + x * (-34.093244805779875 + x * (11.892064858028922 + 17.560994984453693 * x)))))));
      s[7] = x * (0.7417823979162542 + x * (0.8244243471012852 + x * (-7.985115342243531 + x * (-8.874736743619522 + x * (19.51111212546167 + x * (21.68484439700835 + (-12.267779181134392 - 13.634532000490115 * x) * x))))));
      s[8] = x * (-0.2734375 + x * (-0.2734375 + x * (3.0078125000000004 + x * (3.0078125000000004 + x * (-7.8203125 + x * (-7.8203125 + x * (5.5859375 + 5.5859375 * x)))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(10);

      s[0] = 0.02734375000000001 + x * (-0.02734375000000001 + x * (-1.2031250000000004 + x * (1.2031250000000004 + x * (7.820312500000002 + x * (-7.820312500000002 + x * (-15.640625000000005 + x * (15.640625000000005 + (9.496093750000004 - 9.496093750000004 * x) * x)))))));
      s[1] = -0.07283186257766802 + x * (0.07920519507855234 + x * (3.1912975741717577 + x * (-3.470559971556864 + x * (-20.260254734019945 + x * (22.033178498461996 + x * (38.528491744132594 + x * (-41.90002282891125 + x * (-21.38670272170674 + 23.25819910692756 * x))))))));
      s[2] = 0.11774358235405703 + x * (-0.15937702714651655 + x * (-5.082729390455099 + x * (6.879952892931896 + x * (29.54271802087363 + x * (-39.988851008765195 + x * (-46.895317893679845 + x * (63.47722910715402 + (22.31758568090725 - 30.208953964174206 * x) * x)))))));
      s[3] = -0.20740909365743632 + x * (0.4339783761858413 + x * (8.4253620905373 + x * (-17.629048439255964 + x * (-31.558354904798158 + x * (66.03203058830661 + x * (39.79298599003698 + x * (-83.26199752873282 + x * (-16.452584082118683 + 34.42503700349635 * x))))))));
      s[4] = 0.6351536238810472 + x * (-3.842918861837783 + x * (-5.330805274253958 + x * (32.25338149224116 + x * (14.45557911794446 + x * (-87.46170306278685 + x * (-15.785534840489724 + x * (95.50843654491445 + (6.0256073729181745 - 36.45719611253096 * x) * x)))))));
      s[5] = 0.6351536238810472 + x * (3.842918861837783 + x * (-5.330805274253958 + x * (-32.25338149224116 + x * (14.45557911794446 + x * (87.46170306278685 + x * (-15.785534840489724 + x * (-95.50843654491445 + x * (6.0256073729181745 + 36.45719611253096 * x))))))));
      s[6] = -0.20740909365743632 + x * (-0.4339783761858413 + x * (8.4253620905373 + x * (17.629048439255964 + x * (-31.558354904798158 + x * (-66.03203058830661 + x * (39.79298599003698 + x * (83.26199752873282 + (-16.452584082118683 - 34.42503700349635 * x) * x)))))));
      s[7] = 0.11774358235405703 + x * (0.15937702714651655 + x * (-5.082729390455099 + x * (-6.879952892931896 + x * (29.54271802087363 + x * (39.988851008765195 + x * (-46.895317893679845 + x * (-63.47722910715402 + x * (22.31758568090725 + 30.208953964174206 * x))))))));
      s[8] = -0.07283186257766802 + x * (-0.07920519507855234 + x * (3.1912975741717577 + x * (3.470559971556864 + x * (-20.260254734019945 + x * (-22.033178498461996 + x * (38.528491744132594 + x * (41.90002282891125 + (-21.38670272170674 - 23.25819910692756 * x) * x)))))));
      s[9] = 0.02734375000000001 + x * (0.02734375000000001 + x * (-1.2031250000000004 + x * (-1.2031250000000004 + x * (7.820312500000002 + x * (7.820312500000002 + x * (-15.640625000000005 + x * (-15.640625000000005 + x * (9.496093750000004 + 9.496093750000004 * x))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(11);

      s[0] = x * (-0.24609375000000006 + x * (0.24609375000000006 + x * (4.265625000000001 + x * (-4.265625000000001 + x * (-19.1953125 + x * (19.1953125 + x * (31.07812500000001 + x * (-31.07812500000001 + x * (-16.402343750000007 + 16.402343750000007 * x)))))))));
      s[1] = x * (0.6469399638321012 + x * (-0.6926541467387873 + x * (-11.118967410494108 + x * (11.904657796547806 + x * (48.92907644697161 + x * (-52.386511255764134 + x * (-76.07233669420847 + x * (81.44777322340175 + (37.61528769389888 - 40.27326561744664 * x) * x))))))));
      s[2] = x * (-1.0065054085767788 + x * (1.283016714012984 + x * (16.817106814716585 + x * (-21.437171564863096 + x * (-68.627036112913 + x * (87.48053772561856 + x * (94.10112548080934 + x * (-119.95297369542315 + x * (-41.28469077403615 + 52.626590820654705 * x)))))))));
      s[3] = x * (1.6081279037255147 + x * (-2.8450590876396364 + x * (-24.448938545455395 + x * (43.25444178335928 + x * (76.78353248894041 + x * (-135.84347761309678 + x * (-88.18672335180293 + x * (156.0177135786048 + (34.24400150459239 - 60.583618661227646 * x) * x))))))));
      s[4] = x * (-3.305176853378321 + x * (11.175269437032103 + x * (22.809745723990797 + x * (-77.12296968171066 + x * (-54.32988098661865 + x * (183.69699578609945 + x * (54.094944413979185 + x * (-182.90264207483727 + x * (-19.26963229797302 + 65.1533465334164 * x)))))))));
      s[5] = 1. + x * x * (-18.333333333333332 + x * x * (95.33333333333333 + x * x * (-204.2857142857143 + x * x * (192.93650793650792 - 66.65079365079364 * x * x))));
      s[6] = x * (3.305176853378321 + x * (11.175269437032103 + x * (-22.809745723990797 + x * (-77.12296968171066 + x * (54.32988098661865 + x * (183.69699578609945 + x * (-54.094944413979185 + x * (-182.90264207483727 + x * (19.26963229797302 + 65.1533465334164 * x)))))))));
      s[7] = x * (-1.6081279037255147 + x * (-2.8450590876396364 + x * (24.448938545455395 + x * (43.25444178335928 + x * (-76.78353248894041 + x * (-135.84347761309678 + x * (88.18672335180293 + x * (156.0177135786048 + (-34.24400150459239 - 60.583618661227646 * x) * x))))))));
      s[8] = x * (1.0065054085767788 + x * (1.283016714012984 + x * (-16.817106814716585 + x * (-21.437171564863096 + x * (68.627036112913 + x * (87.48053772561856 + x * (-94.10112548080934 + x * (-119.95297369542315 + x * (41.28469077403615 + 52.626590820654705 * x)))))))));
      s[9] = x * (-0.6469399638321012 + x * (-0.6926541467387873 + x * (11.118967410494108 + x * (11.904657796547806 + x * (-48.92907644697161 + x * (-52.386511255764134 + x * (76.07233669420847 + x * (81.44777322340175 + (-37.61528769389888 - 40.27326561744664 * x) * x))))))));
      s[10] = x * (0.24609375000000006 + x * (0.24609375000000006 + x * (-4.265625000000001 + x * (-4.265625000000001 + x * (19.1953125 + x * (19.1953125 + x * (-31.07812500000001 + x * (-31.07812500000001 + x * (16.402343750000007 + 16.402343750000007 * x)))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(12);

      s[0] = -0.020507812499999993 + x * (0.020507812499999993 + x * (1.3330078124999996 + x * (-1.3330078124999996 + x * (-13.330078124999993 + x * (13.330078124999993 + x * (45.32226562499998 + x * (-45.32226562499998 + x * (-61.50878906249996 + x * (61.50878906249996 + (28.704101562499982 - 28.704101562499982 * x) * x)))))))));
      s[1] = 0.05338924668599505 + x * (-0.056502579963255195 + x * (-3.463892817541435 + x * (3.665885792665077 + x * (34.29365362179112 + x * (-36.29344907961995 + x * (-114.28338518388105 + x * (120.94769097983172 + x * (150.1192218593404 + x * (-158.87325376617537 + x * (-66.71898672639503 + 70.60962865326178 * x))))))))));
      s[2] = -0.08082637279563801 + x * (0.09865545322619368 + x * (5.2141232442542815 + x * (-6.364280296726349 + x * (-50.02271187759193 + x * (61.05696867487619 + x * (156.63820987204144 + x * (-191.1902396825095 + x * (-187.68374229592536 + x * (229.08394895078004 + (75.93494743001719 - 92.68505309964658 * x) * x)))))))));
      s[3] = 0.12135582949558432 + x * (-0.191752887060472 + x * (-7.706498315410974 + x * (12.17694532886438 + x * (67.52877318507609 + x * (-106.70140257548387 + x * (-178.48006907540292 + x * (282.0142111855142 + x * (186.56992464884087 + x * (-294.7968947084793 + x * (-68.03348627259862 + 107.49889365664508 * x))))))))));
      s[4] = -0.20903357581805157 + x * (0.5231974657907181 + x * (12.486686723163828 + x * (-31.253365992114205 + x * (-71.23386120152733 + x * (178.29372871450624 + x * (151.57840212672807 + x * (-379.39089713673604 + x * (-139.32484213888364 + x * (348.7210322240528 + (46.702648066337105 - 116.89369527549952 * x) * x)))))))));
      s[5] = 0.6356226849321102 + x * (-4.654771388963057 + x * (-7.863426646965698 + x * (57.585190464709555 + x * (32.76422439725204 + x * (-239.93790328956482 + x * (-60.77542336448549 + x * (445.0686052203118 + x * (51.828226989127664 + x * (-379.5467875024658 + x * (-16.589224059860626 + 121.48566649597231 * x))))))))));
      s[6] = 0.6356226849321102 + x * (4.654771388963057 + x * (-7.863426646965698 + x * (-57.585190464709555 + x * (32.76422439725204 + x * (239.93790328956482 + x * (-60.77542336448549 + x * (-445.0686052203118 + x * (51.828226989127664 + x * (379.5467875024658 + (-16.589224059860626 - 121.48566649597231 * x) * x)))))))));
      s[7] = -0.20903357581805157 + x * (-0.5231974657907181 + x * (12.486686723163828 + x * (31.253365992114205 + x * (-71.23386120152733 + x * (-178.29372871450624 + x * (151.57840212672807 + x * (379.39089713673604 + x * (-139.32484213888364 + x * (-348.7210322240528 + x * (46.702648066337105 + 116.89369527549952 * x))))))))));
      s[8] = 0.12135582949558432 + x * (0.191752887060472 + x * (-7.706498315410974 + x * (-12.17694532886438 + x * (67.52877318507609 + x * (106.70140257548387 + x * (-178.48006907540292 + x * (-282.0142111855142 + x * (186.56992464884087 + x * (294.7968947084793 + (-68.03348627259862 - 107.49889365664508 * x) * x)))))))));
      s[9] = -0.08082637279563801 + x * (-0.09865545322619368 + x * (5.2141232442542815 + x * (6.364280296726349 + x * (-50.02271187759193 + x * (-61.05696867487619 + x * (156.63820987204144 + x * (191.1902396825095 + x * (-187.68374229592536 + x * (-229.08394895078004 + x * (75.93494743001719 + 92.68505309964658 * x))))))))));
      s[10] = 0.05338924668599505 + x * (0.056502579963255195 + x * (-3.463892817541435 + x * (-3.665885792665077 + x * (34.29365362179112 + x * (36.29344907961995 + x * (-114.28338518388105 + x * (-120.94769097983172 + x * (150.1192218593404 + x * (158.87325376617537 + (-66.71898672639503 - 70.60962865326178 * x) * x)))))))));
      s[11] = -0.020507812499999993 + x * (-0.020507812499999993 + x * (1.3330078124999996 + x * (1.3330078124999996 + x * (-13.330078124999993 + x * (-13.330078124999993 + x * (45.32226562499998 + x * (45.32226562499998 + x * (-61.50878906249996 + x * (-61.50878906249996 + x * (28.704101562499982 + 28.704101562499982 * x))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(13);

      s[0] = x * (0.22558593750000006 + x * (-0.22558593750000006 + x * (-5.639648437500001 + x * (5.639648437500001 + x * (38.34960937500001 + x * (-38.34960937500001 + x * (-104.091796875 + x * (104.091796875 + x * (121.4404296875 + x * (-121.4404296875 + x * (-50.78417968749999 + 50.78417968749999 * x)))))))))));
      s[1] = x * (-0.5829344906221525 + x * (0.6114848101857108 + x * (14.514863320510178 + x * (-15.225756213088301 + x * (-97.70075924126255 + x * (102.4858387704619 + x * (260.5762160272328 + x * (-273.3384292054241 + x * (-296.0700007762741 + x * (310.57058921516375 + (119.26261516041588 - 125.1037273772989 * x) * x))))))))));
      s[2] = x * (0.8648651295090922 + x * (-1.0218793857637394 + x * (-21.279094151544122 + x * (25.142264289845077 + x * (138.94191625686543 + x * (-164.16649856376245 + x * (-352.1300079812173 + x * (416.05839336946485 + x * (373.06638054146714 + x * (-440.79571575883284 + x * (-139.46405979508023 + 164.78343604904907 * x)))))))))));
      s[3] = x * (-1.2442500548652053 + x * (1.8132774171070436 + x * (29.707965885882828 + x * (-43.29417823886984 + x * (-179.5350478346602 + x * (261.6410154412972 + x * (404.35889337862545 + x * (-589.2825536980093 + x * (-385.1772729664137 + x * (561.3286878484706 + (131.8897115914308 - 192.2062487699958 * x) * x))))))))));
      s[4] = x * (1.938479199753327 + x * (-4.014163959996764 + x * (-42.08800874284795 + x * (87.15500680382215 + x * (197.5245988398673 + x * (-409.02998906395834 + x * (-377.0000305140037 + x * (780.6841237190308 + x * (321.3925862717391 + x * (-665.533340252676 + x * (-101.76762505450809 + 210.73836275377806 * x)))))))))));
      s[5] = x * (-3.9479239708828486 + x * (15.836867055967753 + x * (39.1173534919227 + x * (-156.9169850792091 + x * (-140.3818285609679 + x * (563.1335285052473 + x * (233.85464406922353 + x * (-938.0942834410148 + x * (-183.87341178298894 + x * (737.5974813626474 + (55.23116675369345 - 221.55660840363862 * x) * x))))))))));
      s[6] = 1. + x * x * (-26. + x * x * (195. + x * x * (-631.4285714285713 + x * x * (999.7619047619048 + x * x * (-763.4545454545454 + 225.12121212121212 * x * x)))));
      s[7] = x * (3.9479239708828486 + x * (15.836867055967753 + x * (-39.1173534919227 + x * (-156.9169850792091 + x * (140.3818285609679 + x * (563.1335285052473 + x * (-233.85464406922353 + x * (-938.0942834410148 + x * (183.87341178298894 + x * (737.5974813626474 + (-55.23116675369345 - 221.55660840363862 * x) * x))))))))));
      s[8] = x * (-1.938479199753327 + x * (-4.014163959996764 + x * (42.08800874284795 + x * (87.15500680382215 + x * (-197.5245988398673 + x * (-409.02998906395834 + x * (377.0000305140037 + x * (780.6841237190308 + x * (-321.3925862717391 + x * (-665.533340252676 + x * (101.76762505450809 + 210.73836275377806 * x)))))))))));
      s[9] = x * (1.2442500548652053 + x * (1.8132774171070436 + x * (-29.707965885882828 + x * (-43.29417823886984 + x * (179.5350478346602 + x * (261.6410154412972 + x * (-404.35889337862545 + x * (-589.2825536980093 + x * (385.1772729664137 + x * (561.3286878484706 + (-131.8897115914308 - 192.2062487699958 * x) * x))))))))));
      s[10] = x * (-0.8648651295090922 + x * (-1.0218793857637394 + x * (21.279094151544122 + x * (25.142264289845077 + x * (-138.94191625686543 + x * (-164.16649856376245 + x * (352.1300079812173 + x * (416.05839336946485 + x * (-373.06638054146714 + x * (-440.79571575883284 + x * (139.46405979508023 + 164.78343604904907 * x)))))))))));
      s[11] = x * (0.5829344906221525 + x * (0.6114848101857108 + x * (-14.514863320510178 + x * (-15.225756213088301 + x * (97.70075924126255 + x * (102.4858387704619 + x * (-260.5762160272328 + x * (-273.3384292054241 + x * (296.0700007762741 + x * (310.57058921516375 + (-119.26261516041588 - 125.1037273772989 * x) * x))))))))));
      s[12] = x * (-0.22558593750000006 + x * (-0.22558593750000006 + x * (5.639648437500001 + x * (5.639648437500001 + x * (-38.34960937500001 + x * (-38.34960937500001 + x * (104.091796875 + x * (104.091796875 + x * (-121.4404296875 + x * (-121.4404296875 + x * (50.78417968749999 + 50.78417968749999 * x)))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(14);

      s[0] = 0.016113281250000003 + x * (-0.016113281250000003 + x * (-1.4501953125000007 + x * (1.4501953125000007 + x * (20.544433593750004 + x * (-20.544433593750004 + x * (-104.09179687500006 + x * (104.09179687500006 + x * (234.2065429687501 + x * (-234.2065429687501 + x * (-239.4111328125001 + x * (239.4111328125001 + (90.68603515625001 - 90.68603515625001 * x) * x)))))))))));
      s[1] = -0.04139732081171974 + x * (0.04312512707585759 + x * (3.722231146814119 + x * (-3.8775864733407994 + x * (-52.467917019278886 + x * (54.65777843819733 + x * (263.269238043005 + x * (-274.25734620378057 + x * (-583.432683738852 + x * (607.7835022435452 + x * (583.640796061487 + x * (-608.000300581788 + x * (-214.6902671723634 + 223.6508274500909 * x))))))))))));
      s[2] = 0.060479603217050364 + x * (-0.06969293589827096 + x * (-5.423334084886454 + x * (6.249513135468839 + x * (75.35310786551165 + x * (-86.83223825658433 + x * (-367.74965620050006 + x * (423.7718479106551 + x * (781.4409297223926 + x * (-900.4839603192767 + x * (-740.0152271861014 + x * (852.7475553524422 + (256.33370028036654 - 295.38302488680677 * x) * x)))))))))));
      s[3] = -0.08436165461443217 + x * (0.11574329682964127 + x * (7.5181119922630675 + x * (-10.314770044471427 + x * (-101.00190327027146 + x * (138.57354178268835 + x * (462.4159664651175 + x * (-634.4298094904997 + x * (-900.7419579546968 + x * (1235.8084284021063 + x * (784.1260362282219 + x * (-1075.8126186335705 + x * (-252.2318918060197 + 346.0594846869173 * x))))))))))));
      s[4] = 0.12321427376695661 + x * (-0.2237658131830478 + x * (-10.806124410727053 + x * (19.624684236640675 + x * (132.5476727153034 + x * (-240.71592408812626 + x * (-515.9053083899174 + x * (936.9204340372451 + x * (885.3700754521427 + x * (-1607.8945145283599 + x * (-701.5872832094553 + x * (1274.1319990505083 + (210.2577535688867 - 381.8429128947249 * x) * x)))))))))));
      s[5] = -0.20994587939045584 + x * (0.6125800096199178 + x * (17.317689297907894 + x * (-50.52954746007473 + x * (-139.14103038515637 + x * (405.9856472502844 + x * (439.3466049515938 + x * (-1281.925362236761 + x * (-667.4123876501367 + x * (1947.3756190604186 + x * (488.8873683141516 + x * (-1426.4753833437405 + x * (-138.78829864896974 + 404.95644672025344 * x))))))))))));
      s[6] = 0.6358976965826005 + x * (-5.466238122747797 + x * (-10.878378628871559 + x * (93.51159517386068 + x * (64.16563650014156 + x * (-551.5740193625487 + x * (-177.2850479942983 + x * (1523.9594248376502 + x * (250.5694812003992 + x * (-2153.919502925649 + x * (-175.64055739580294 + x * (1509.8232245489796 + (48.43296862184941 - 416.3344841495454 * x) * x)))))))))));
      s[7] = 0.6358976965826005 + x * (5.466238122747797 + x * (-10.878378628871559 + x * (-93.51159517386068 + x * (64.16563650014156 + x * (551.5740193625487 + x * (-177.2850479942983 + x * (-1523.9594248376502 + x * (250.5694812003992 + x * (2153.919502925649 + x * (-175.64055739580294 + x * (-1509.8232245489796 + x * (48.43296862184941 + 416.3344841495454 * x))))))))))));
      s[8] = -0.20994587939045584 + x * (-0.6125800096199178 + x * (17.317689297907894 + x * (50.52954746007473 + x * (-139.14103038515637 + x * (-405.9856472502844 + x * (439.3466049515938 + x * (1281.925362236761 + x * (-667.4123876501367 + x * (-1947.3756190604186 + x * (488.8873683141516 + x * (1426.4753833437405 + (-138.78829864896974 - 404.95644672025344 * x) * x)))))))))));
      s[9] = 0.12321427376695661 + x * (0.2237658131830478 + x * (-10.806124410727053 + x * (-19.624684236640675 + x * (132.5476727153034 + x * (240.71592408812626 + x * (-515.9053083899174 + x * (-936.9204340372451 + x * (885.3700754521427 + x * (1607.8945145283599 + x * (-701.5872832094553 + x * (-1274.1319990505083 + x * (210.2577535688867 + 381.8429128947249 * x))))))))))));
      s[10] = -0.08436165461443217 + x * (-0.11574329682964127 + x * (7.5181119922630675 + x * (10.314770044471427 + x * (-101.00190327027146 + x * (-138.57354178268835 + x * (462.4159664651175 + x * (634.4298094904997 + x * (-900.7419579546968 + x * (-1235.8084284021063 + x * (784.1260362282219 + x * (1075.8126186335705 + (-252.2318918060197 - 346.0594846869173 * x) * x)))))))))));
      s[11] = 0.060479603217050364 + x * (0.06969293589827096 + x * (-5.423334084886454 + x * (-6.249513135468839 + x * (75.35310786551165 + x * (86.83223825658433 + x * (-367.74965620050006 + x * (-423.7718479106551 + x * (781.4409297223926 + x * (900.4839603192767 + x * (-740.0152271861014 + x * (-852.7475553524422 + x * (256.33370028036654 + 295.38302488680677 * x))))))))))));
      s[12] = -0.04139732081171974 + x * (-0.04312512707585759 + x * (3.722231146814119 + x * (3.8775864733407994 + x * (-52.467917019278886 + x * (-54.65777843819733 + x * (263.269238043005 + x * (274.25734620378057 + x * (-583.432683738852 + x * (-607.7835022435452 + x * (583.640796061487 + x * (608.000300581788 + (-214.6902671723634 - 223.6508274500909 * x) * x)))))))))));
      s[13] = 0.016113281250000003 + x * (0.016113281250000003 + x * (-1.4501953125000007 + x * (-1.4501953125000007 + x * (20.544433593750004 + x * (20.544433593750004 + x * (-104.09179687500006 + x * (-104.09179687500006 + x * (234.2065429687501 + x * (234.2065429687501 + x * (-239.4111328125001 + x * (-239.4111328125001 + x * (90.68603515625001 + 90.68603515625001 * x))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(15);

      s[0] = x * (-0.20947265624999997 + x * (0.20947265624999997 + x * (7.122070312500001 + x * (-7.122070312500001 + x * (-67.65966796875 + x * (67.65966796875 + x * (270.638671875 + x * (-270.638671875 + x * (-518.7241210937499 + x * (518.7241210937499 + x * (471.5673828125 + x * (-471.5673828125 + x * (-163.23486328125 + 163.23486328125 * x)))))))))))));
      s[1] = x * (0.5356855072902406 + x * (-0.5549730825909994 + x * (-18.174037640246794 + x * (18.828401282224444 + x * (171.7334005484416 + x * (-177.91673171879341 + x * (-680.809398022416 + x * (705.3222182333744 + x * (1287.9239207657938 + x * (-1334.2961471287515 + x * (-1150.139560629656 + x * (1191.5508048767526 + (388.929989470793 - 402.93357246221564 * x) * x))))))))))));
      s[2] = x * (-0.7732388425498722 + x * (0.8736352156242276 + x * (26.07629255988396 + x * (-29.462006070608556 + x * (-242.75895036251083 + x * (274.2784716366399 + x * (938.8902822258567 + x * (-1060.794632942892 + x * (-1715.2948115226673 + x * (1938.0065641581787 + x * (1465.8868406160445 + x * (-1656.2157713898303 + x * (-472.026414674057 + 533.3137393928881 * x)))))))))))));
      s[3] = x * (1.053799509049798 + x * (-1.3801864220637217 + x * (-35.075319648094556 + x * (45.93898508407571 + x * (316.03903718511435 + x * (-413.92388610837156 + x * (-1159.7601931360148 + x * (1518.9656644076927 + x * (1981.642154896991 + x * (-2595.404127720727 + x * (-1582.6222153580363 + x * (2072.798169039902 + (478.7227365509904 - 626.9946182805082 * x) * x))))))))))));
      s[4] = x * (-1.4717254517469394 + x * (2.4275755385183553 + x * (47.506163672027 + x * (-78.36026802565073 + x * (-396.1526193328235 + x * (653.4441645150653 + x * (1298.9962589542529 + x * (-2142.66291251612 + x * (-2011.6814241072934 + x * (3318.219855923471 + x * (1484.3255695795617 + x * (-2448.3591281454933 + x * (-421.52222331397775 + 695.2907127102089 * x)))))))))))));
      s[5] = x * (2.264813641904642 + x * (-5.384233824127721 + x * (-66.46831884146923 + x * (158.01784478751952 + x * (432.8762041886058 + x * (-1029.094251786762 + x * (-1211.1663031081089 + x * (2879.355040600279 + x * (1689.3645899256924 + x * (-4016.1953275379224 + x * (-1159.1445159911818 + x * (2755.6815247736185 + (312.2735301845573 - 742.3805970126057 * x) * x))))))))))));
      s[6] = x * (-4.588914964624965 + x * (21.30870991838984 + x * (61.66464254292495 + x * (-286.34088674506023 + x * (-308.6135382232518 + x * (1433.052565493471 + x * (756.6920727984681 + x * (-3513.7133725740005 + x * (-976.5694122087433 + x * (4534.717788484726 + x * (637.2597349022924 + x * (-2959.1271440813757 + x * (-165.84458484706542 + 770.1023395038491 * x)))))))))))));
      s[7] = 1. + x * x * (-35. + x * x * (357. + x * x * (-1615. + x * x * (3768.3333333333335 + x * x * (-4727.545454545455 + x * x * (3030.477855477856 - 779.2657342657343 * x * x))))));
      s[8] = x * (4.588914964624965 + x * (21.30870991838984 + x * (-61.66464254292495 + x * (-286.34088674506023 + x * (308.6135382232518 + x * (1433.052565493471 + x * (-756.6920727984681 + x * (-3513.7133725740005 + x * (976.5694122087433 + x * (4534.717788484726 + x * (-637.2597349022924 + x * (-2959.1271440813757 + x * (165.84458484706542 + 770.1023395038491 * x)))))))))))));
      s[9] = x * (-2.264813641904642 + x * (-5.384233824127721 + x * (66.46831884146923 + x * (158.01784478751952 + x * (-432.8762041886058 + x * (-1029.094251786762 + x * (1211.1663031081089 + x * (2879.355040600279 + x * (-1689.3645899256924 + x * (-4016.1953275379224 + x * (1159.1445159911818 + x * (2755.6815247736185 + (-312.2735301845573 - 742.3805970126057 * x) * x))))))))))));
      s[10] = x * (1.4717254517469394 + x * (2.4275755385183553 + x * (-47.506163672027 + x * (-78.36026802565073 + x * (396.1526193328235 + x * (653.4441645150653 + x * (-1298.9962589542529 + x * (-2142.66291251612 + x * (2011.6814241072934 + x * (3318.219855923471 + x * (-1484.3255695795617 + x * (-2448.3591281454933 + x * (421.52222331397775 + 695.2907127102089 * x)))))))))))));
      s[11] = x * (-1.053799509049798 + x * (-1.3801864220637217 + x * (35.075319648094556 + x * (45.93898508407571 + x * (-316.03903718511435 + x * (-413.92388610837156 + x * (1159.7601931360148 + x * (1518.9656644076927 + x * (-1981.642154896991 + x * (-2595.404127720727 + x * (1582.6222153580363 + x * (2072.798169039902 + (-478.7227365509904 - 626.9946182805082 * x) * x))))))))))));
      s[12] = x * (0.7732388425498722 + x * (0.8736352156242276 + x * (-26.07629255988396 + x * (-29.462006070608556 + x * (242.75895036251083 + x * (274.2784716366399 + x * (-938.8902822258567 + x * (-1060.794632942892 + x * (1715.2948115226673 + x * (1938.0065641581787 + x * (-1465.8868406160445 + x * (-1656.2157713898303 + x * (472.026414674057 + 533.3137393928881 * x)))))))))))));
      s[13] = x * (-0.5356855072902406 + x * (-0.5549730825909994 + x * (18.174037640246794 + x * (18.828401282224444 + x * (-171.7334005484416 + x * (-177.91673171879341 + x * (680.809398022416 + x * (705.3222182333744 + x * (-1287.9239207657938 + x * (-1334.2961471287515 + x * (1150.139560629656 + x * (1191.5508048767526 + (-388.929989470793 - 402.93357246221564 * x) * x))))))))))));
      s[14] = x * (0.20947265624999997 + x * (0.20947265624999997 + x * (-7.122070312500001 + x * (-7.122070312500001 + x * (67.65966796875 + x * (67.65966796875 + x * (-270.638671875 + x * (-270.638671875 + x * (518.7241210937499 + x * (518.7241210937499 + x * (-471.5673828125 + x * (-471.5673828125 + x * (163.23486328125 + 163.23486328125 * x)))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(16);

      s[0] = -0.013092041015625026 + x * (0.013092041015625026 + x * (1.5579528808593786 + x * (-1.5579528808593786 + x * (-29.601104736328196 + x * (29.601104736328196 + x * (207.20773315429736 + x * (-207.20773315429736 + x * (-680.8254089355485 + x * (680.8254089355485 + x * (1134.7090148925806 + x * (-1134.7090148925806 + x * (-928.3982849121114 + x * (928.3982849121114 + (295.86318969726625 - 295.86318969726625 * x) * x)))))))))))));
      s[1] = 0.033355442489955596 + x * (-0.03440237394195174 + x * (-3.967170933232086 + x * (4.091689024296123 + x * (75.16583774581109 + x * (-77.52507731145094 + x * (-523.3748771334284 + x * (539.8021099671885 + x * (1705.7547176778835 + x * (-1759.2934546880588 + x * (-2811.0422500699865 + x * (2899.272785322951 + x * (2266.0397274858524 + x * (-2337.164200287918 + x * (-708.6093402153903 + 730.8505503469339 * x))))))))))))));
      s[2] = -0.047686437026390895 + x * (0.05303203820658086 + x * (5.6633955673146 + x * (-6.2982564610266865 + x * (-106.48943550638656 + x * (118.42679312036944 + x * (730.8499565290832 + x * (-812.7774947094157 + x * (-2330.6819967517895 + x * (2591.94908251852 + x * (3730.3968157899963 + x * (-4148.570511803979 + x * (-2901.0388989678486 + x * (3226.2424144562697 + (871.3478497766567 - 969.025059158945 * x) * x)))))))))))));
      s[3] = 0.063830148745981 + x * (-0.08059277838611026 + x * (-7.557860356301763 + x * (9.542653068107539 + x * (139.86707578041893 + x * (-176.59799426042127 + x * (-931.5847994780306 + x * (1176.2311191062226 + x * (2844.474236085107 + x * (-3591.470272866024 + x * (-4316.987388156813 + x * (5450.6845856482705 + x * (3176.5588641269665 + x * (-4010.7646558341758 + x * (-904.8339581500928 + 1142.4551579164056 * x))))))))))))));
      s[4] = -0.08627598963282573 + x * (0.1322462961906402 + x * (10.150407863481371 + x * (-15.558834508680393 + x * (-181.4878302894627 + x * (278.1897195453917 + x * (1134.1429686118483 + x * (-1738.4466708279708 + x * (-3187.359765642239 + x * (4885.6759038887585 + x * (4475.390812882214 + x * (-6860.006608189707 + x * (-3080.575081891192 + x * (4721.993296757101 + (829.8247644549834 - 1271.9790529610843 * x) * x)))))))))))));
      s[5] = 0.1243076624552217 + x * (-0.25574581390191786 + x * (-14.390757872434445 + x * (29.60699294041452 + x * (234.93994566166947 + x * (-483.3564273880532 + x * (-1254.0380356335954 + x * (2580.0097254873936 + x * (3123.7757539291442 + x * (-6426.736347998374 + x * (-4016.2029459671803 + x * (8262.781802221161 + x * (2589.4739928974673 + x * (-5327.48441094665 + x * (-663.6822606775269 + 1365.4344114980104 * x))))))))))))));
      s[6] = -0.21051150812650277 + x * (0.7021017873809786 + x * (22.919718401810048 + x * (-76.44225914010073 + x * (-246.06578478816738 + x * (820.6830536279131 + x * (1070.575202807253 + x * (-3570.6017695005776 + x * (-2370.2600277806305 + x * (7905.334092530572 + x * (2826.6000465194447 + x * (-9427.327572418875 + x * (-1731.2307723711135 + x * (5774.032167971929 + (427.6721287195306 - 1426.3798148582425 * x) * x)))))))))))));
      s[7] = 0.6360727221101862 + x * (-6.277470788189986 + x * (-14.375685551497117 + x * (141.87520227301198 + x * (113.67129613244543 + x * (-1121.8343691265995 + x * (-433.7781488574282 + x * (4281.003670419819 + x * (895.1224914180732 + x * (-8834.061100886833 + x * (-1022.8641058902572 + x * (10094.756970102948 + x * (609.1704536319814 + x * (-6011.969378307612 + x * (-147.58237360542793 + 1456.5064763134556 * x))))))))))))));
      s[8] = 0.6360727221101862 + x * (6.277470788189986 + x * (-14.375685551497117 + x * (-141.87520227301198 + x * (113.67129613244543 + x * (1121.8343691265995 + x * (-433.7781488574282 + x * (-4281.003670419819 + x * (895.1224914180732 + x * (8834.061100886833 + x * (-1022.8641058902572 + x * (-10094.756970102948 + x * (609.1704536319814 + x * (6011.969378307612 + (-147.58237360542793 - 1456.5064763134556 * x) * x)))))))))))));
      s[9] = -0.21051150812650277 + x * (-0.7021017873809786 + x * (22.919718401810048 + x * (76.44225914010073 + x * (-246.06578478816738 + x * (-820.6830536279131 + x * (1070.575202807253 + x * (3570.6017695005776 + x * (-2370.2600277806305 + x * (-7905.334092530572 + x * (2826.6000465194447 + x * (9427.327572418875 + x * (-1731.2307723711135 + x * (-5774.032167971929 + x * (427.6721287195306 + 1426.3798148582425 * x))))))))))))));
      s[10] = 0.1243076624552217 + x * (0.25574581390191786 + x * (-14.390757872434445 + x * (-29.60699294041452 + x * (234.93994566166947 + x * (483.3564273880532 + x * (-1254.0380356335954 + x * (-2580.0097254873936 + x * (3123.7757539291442 + x * (6426.736347998374 + x * (-4016.2029459671803 + x * (-8262.781802221161 + x * (2589.4739928974673 + x * (5327.48441094665 + (-663.6822606775269 - 1365.4344114980104 * x) * x)))))))))))));
      s[11] = -0.08627598963282573 + x * (-0.1322462961906402 + x * (10.150407863481371 + x * (15.558834508680393 + x * (-181.4878302894627 + x * (-278.1897195453917 + x * (1134.1429686118483 + x * (1738.4466708279708 + x * (-3187.359765642239 + x * (-4885.6759038887585 + x * (4475.390812882214 + x * (6860.006608189707 + x * (-3080.575081891192 + x * (-4721.993296757101 + x * (829.8247644549834 + 1271.9790529610843 * x))))))))))))));
      s[12] = 0.063830148745981 + x * (0.08059277838611026 + x * (-7.557860356301763 + x * (-9.542653068107539 + x * (139.86707578041893 + x * (176.59799426042127 + x * (-931.5847994780306 + x * (-1176.2311191062226 + x * (2844.474236085107 + x * (3591.470272866024 + x * (-4316.987388156813 + x * (-5450.6845856482705 + x * (3176.5588641269665 + x * (4010.7646558341758 + (-904.8339581500928 - 1142.4551579164056 * x) * x)))))))))))));
      s[13] = -0.047686437026390895 + x * (-0.05303203820658086 + x * (5.6633955673146 + x * (6.2982564610266865 + x * (-106.48943550638656 + x * (-118.42679312036944 + x * (730.8499565290832 + x * (812.7774947094157 + x * (-2330.6819967517895 + x * (-2591.94908251852 + x * (3730.3968157899963 + x * (4148.570511803979 + x * (-2901.0388989678486 + x * (-3226.2424144562697 + x * (871.3478497766567 + 969.025059158945 * x))))))))))))));
      s[14] = 0.033355442489955596 + x * (0.03440237394195174 + x * (-3.967170933232086 + x * (-4.091689024296123 + x * (75.16583774581109 + x * (77.52507731145094 + x * (-523.3748771334284 + x * (-539.8021099671885 + x * (1705.7547176778835 + x * (1759.2934546880588 + x * (-2811.0422500699865 + x * (-2899.272785322951 + x * (2266.0397274858524 + x * (2337.164200287918 + (-708.6093402153903 - 730.8505503469339 * x) * x)))))))))))));
      s[15] = -0.013092041015625026 + x * (-0.013092041015625026 + x * (1.5579528808593786 + x * (1.5579528808593786 + x * (-29.601104736328196 + x * (-29.601104736328196 + x * (207.20773315429736 + x * (207.20773315429736 + x * (-680.8254089355485 + x * (-680.8254089355485 + x * (1134.7090148925806 + x * (1134.7090148925806 + x * (-928.3982849121114 + x * (-928.3982849121114 + x * (295.86318969726625 + 295.86318969726625 * x))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(17);

      s[0] = x * (0.1963806152343753 + x * (-0.1963806152343753 + x * (-8.706207275390637 + x * (8.706207275390637 + x * (109.69821166992205 + x * (-109.69821166992205 + x * (-600.7283020019541 + x * (600.7283020019541 + x * (1668.6897277832059 + x * (-1668.6897277832059 + x * (-2457.5248718261764 + x * (2457.5248718261764 + x * (1827.3902893066438 + x * (-1827.3902893066438 + x * (-539.5152282714854 + 539.5152282714854 * x)))))))))))))));
      s[1] = x * (-0.49879890575153146 + x * (0.512570561049751 + x * (22.085494614023805 + x * (-22.695267040161667 + x * (-277.420611847895 + x * (285.08009344445946 + x * (1511.5038709211174 + x * (-1553.2359398014353 + x * (-4168.110783230448 + x * (4283.19079701868 + x * (6078.97187041711 + x * (-6246.810059718711 + x * (-4464.230875137546 + x * (4587.486656325423 + (1297.6998331693878 - 1333.5288507893024 * x) * x))))))))))))));
      s[2] = x * (0.7075624137968644 + x * (-0.7767899360723758 + x * (-31.22337211726262 + x * (34.27824988721852 + x * (388.980949452897 + x * (-427.0386342845435 + x * (-2090.857925821259 + x * (2295.4263296995855 + x * (5656.738894820077 + x * (-6210.191156008634 + x * (-8049.02255039206 + x * (8836.534545147808 + x * (5737.519744176995 + x * (-6298.875559793044 + x * (-1612.8433025331838 + 1770.6430152876828 * x)))))))))))))));
      s[3] = x * (-0.9336911556183038 + x * (1.1446554452344215 + x * (40.92404600106903 + x * (-50.1706927545296 + x * (-501.4469333768492 + x * (614.7471348872443 + x * (2624.0739992206773 + x * (-3216.974450097415 + x * (-6846.103772563891 + x * (8392.95725867273 + x * (9328.760294855341 + x * (-11436.561441691672 + x * (-6352.005698153438 + x * (7787.219432036429 + (1706.731755172709 - 2092.3618964980205 * x) * x))))))))))))));
      s[4] = x * (1.2310964237727344 + x * (-1.7815409458724705 + x * (-53.23160580203012 + x * (77.03237822772361 + x * (630.7941824291896 + x * (-912.8331808258146 + x * (-3132.637724967365 + x * (4533.294279672447 + x * (7666.615223894245 + x * (-11094.491604289015 + x * (-9811.921601736802 + x * (14199.001600228556 + x * (6314.214232369024 + x * (-9137.40871856577 + x * (-1615.0638026100323 + 2337.1867864977467 * x)))))))))))))));
      s[5] = x * (-1.69416804819576 + x * (3.129319797490081 + x * (71.02207762511382 + x * (-131.18580167288403 + x * (-779.1553910482646 + x * (1439.1880387102688 + x * (3470.479419631746 + x * (-6410.367593817715 + x * (-7737.509237321214 + x * (14292.053769635157 + x * (9197.657283684333 + x * (-16989.112183419267 + x * (-5584.98933882643 + x * (10316.106318598866 + (1364.1893543029112 - 2519.811867831916 * x) * x))))))))))))));
      s[6] = x * (2.588888735299733 + x * (-6.956116545937505 + x * (-98.67248207571053 + x * (265.1242889803471 + x * (848.5616468008216 + x * (-2280.0105817895555 + x * (-3239.375800222256 + x * (8703.9181310458 + x * (6531.110329434621 + x * (-17548.51956612328 + x * (-7244.621794835539 + x * (19465.66217735906 + x * (4185.5800532503545 + x * (-11246.285815906213 + x * (-985.1708410875917 + 2647.0674829797767 * x)))))))))))))));
      s[7] = x * (-5.228815178420851 + x * (27.59094890600914 + x * (91.45014549693084 + x * (-482.5560295697712 + x * (-606.3180398790506 + x * (3199.3653415278623 + x * (2033.63406880956 + x * (-10730.900169814326 + x * (-3801.486398520493 + x * (20059.346794534114 + x * (4016.8881703139864 + x * (-21195.95978945221 + x * (-2244.858331557623 + x * (11845.469654932622 + (515.9192005151108 - 2722.356751064303 * x) * x))))))))))))));
      s[8] = 1. + x * x * (-45.33333333333333 + x * x * (602.9333333333332 + x * x * (-3617.5999999999995 + x * x * (11556.222222222219 + x * x * (-21011.313131313127 + x * x * (21819.440559440554 + x * x * (-12052.643356643355 + 2747.293706293706 * x * x)))))));
      s[9] = x * (5.228815178420851 + x * (27.59094890600914 + x * (-91.45014549693084 + x * (-482.5560295697712 + x * (606.3180398790506 + x * (3199.3653415278623 + x * (-2033.63406880956 + x * (-10730.900169814326 + x * (3801.486398520493 + x * (20059.346794534114 + x * (-4016.8881703139864 + x * (-21195.95978945221 + x * (2244.858331557623 + x * (11845.469654932622 + (-515.9192005151108 - 2722.356751064303 * x) * x))))))))))))));
      s[10] = x * (-2.588888735299733 + x * (-6.956116545937505 + x * (98.67248207571053 + x * (265.1242889803471 + x * (-848.5616468008216 + x * (-2280.0105817895555 + x * (3239.375800222256 + x * (8703.9181310458 + x * (-6531.110329434621 + x * (-17548.51956612328 + x * (7244.621794835539 + x * (19465.66217735906 + x * (-4185.5800532503545 + x * (-11246.285815906213 + x * (985.1708410875917 + 2647.0674829797767 * x)))))))))))))));
      s[11] = x * (1.69416804819576 + x * (3.129319797490081 + x * (-71.02207762511382 + x * (-131.18580167288403 + x * (779.1553910482646 + x * (1439.1880387102688 + x * (-3470.479419631746 + x * (-6410.367593817715 + x * (7737.509237321214 + x * (14292.053769635157 + x * (-9197.657283684333 + x * (-16989.112183419267 + x * (5584.98933882643 + x * (10316.106318598866 + (-1364.1893543029112 - 2519.811867831916 * x) * x))))))))))))));
      s[12] = x * (-1.2310964237727344 + x * (-1.7815409458724705 + x * (53.23160580203012 + x * (77.03237822772361 + x * (-630.7941824291896 + x * (-912.8331808258146 + x * (3132.637724967365 + x * (4533.294279672447 + x * (-7666.615223894245 + x * (-11094.491604289015 + x * (9811.921601736802 + x * (14199.001600228556 + x * (-6314.214232369024 + x * (-9137.40871856577 + x * (1615.0638026100323 + 2337.1867864977467 * x)))))))))))))));
      s[13] = x * (0.9336911556183038 + x * (1.1446554452344215 + x * (-40.92404600106903 + x * (-50.1706927545296 + x * (501.4469333768492 + x * (614.7471348872443 + x * (-2624.0739992206773 + x * (-3216.974450097415 + x * (6846.103772563891 + x * (8392.95725867273 + x * (-9328.760294855341 + x * (-11436.561441691672 + x * (6352.005698153438 + x * (7787.219432036429 + (-1706.731755172709 - 2092.3618964980205 * x) * x))))))))))))));
      s[14] = x * (-0.7075624137968644 + x * (-0.7767899360723758 + x * (31.22337211726262 + x * (34.27824988721852 + x * (-388.980949452897 + x * (-427.0386342845435 + x * (2090.857925821259 + x * (2295.4263296995855 + x * (-5656.738894820077 + x * (-6210.191156008634 + x * (8049.02255039206 + x * (8836.534545147808 + x * (-5737.519744176995 + x * (-6298.875559793044 + x * (1612.8433025331838 + 1770.6430152876828 * x)))))))))))))));
      s[15] = x * (0.49879890575153146 + x * (0.512570561049751 + x * (-22.085494614023805 + x * (-22.695267040161667 + x * (277.420611847895 + x * (285.08009344445946 + x * (-1511.5038709211174 + x * (-1553.2359398014353 + x * (4168.110783230448 + x * (4283.19079701868 + x * (-6078.97187041711 + x * (-6246.810059718711 + x * (4464.230875137546 + x * (4587.486656325423 + (-1297.6998331693878 - 1333.5288507893024 * x) * x))))))))))))));
      s[16] = x * (-0.1963806152343753 + x * (-0.1963806152343753 + x * (8.706207275390637 + x * (8.706207275390637 + x * (-109.69821166992205 + x * (-109.69821166992205 + x * (600.7283020019541 + x * (600.7283020019541 + x * (-1668.6897277832059 + x * (-1668.6897277832059 + x * (2457.5248718261764 + x * (2457.5248718261764 + x * (-1827.3902893066438 + x * (-1827.3902893066438 + x * (539.5152282714854 + 539.5152282714854 * x)))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(18);

      s[0] = 0.010910034179687491 + x * (-0.010910034179687491 + x * (-1.6583251953124987 + x * (1.6583251953124987 + x * (40.628967285156214 + x * (-40.628967285156214 + x * (-373.7864990234372 + x * (373.7864990234372 + x * (1668.6897277832018 + x * (-1668.6897277832018 + x * (-4004.8553466796843 + x * (4004.8553466796843 + x * (5279.1275024414035 + x * (-5279.1275024414035 + x * (-3596.7681884765598 + x * (3596.7681884765598 + (989.1112518310539 - 989.1112518310539 * x) * x)))))))))))))));
      s[1] = -0.02764047686844571 + x * (0.028317098144308016 + x * (4.199982678193974 + x * (-4.302795580150937 + x * (-102.7263630656057 + x * (105.24103903060305 + x * (942.1007130903333 + x * (-965.1627387390186 + x * (-4185.806478830546 + x * (4288.272356452662 + x * (9980.630652375865 + x * (-10224.950136372554 + x * (-13045.639534773614 + x * (13364.98848481055 + x * (8794.849774623228 + x * (-9010.142097684276 + x * (-2387.581105620983 + 2446.0275709840407 * x))))))))))))))));
      s[2] = 0.03895778796237647 + x * (-0.04231556230364813 + x * (-5.914578814804386 + x * (6.424356757098205 + x * (144.02231364795276 + x * (-156.43560646131036 + x * (-1309.8849823835983 + x * (1422.7840563277448 + x * (5747.9047416862595 + x * (-6243.317034508095 + x * (-13477.789528203877 + x * (14639.441106023654 + x * (17250.232901354644 + x * (-18737.031624964602 + x * (-11342.26425884488 + x * (12319.854771351707 + (2993.6544337703426 - 3251.677708963892 * x) * x)))))))))))))));
      s[3] = -0.050819459316706284 + x * (0.0608183969535408 + x * (7.702592608760826 + x * (-9.21810938466685 + x * (-185.9444139921248 + x * (222.52974221921576 + x * (1664.0536140057795 + x * (-1991.4630066775962 + x * (-7130.660090282434 + x * (8533.646790866242 + x * (16214.966533307492 + x * (-19405.327889564607 + x * (-20021.82873676724 + x * (23961.20588886741 + x * (12668.673565736468 + x * (-15161.287195011555 + x * (-3216.912245157384 + 3849.8529602886033 * x))))))))))))))));
      s[4] = 0.06572110723943334 + x * (-0.09081523346055195 + x * (-9.92983842041594 + x * (13.72132382204532 + x * (235.77450903571773 + x * (-325.7997009106741 + x * (-2046.204127331275 + x * (2827.501138325875 + x * (8396.582227650659 + x * (-11602.628246915561 + x * (-18144.11658796703 + x * (25072.03930494684 + x * (21280.680474942303 + x * (-29406.22954647528 + x * (-12833.295268589793 + x * (17733.40034639422 + (3120.4428895725946 - 4311.913803954011 * x) * x)))))))))))))));
      s[5] = -0.08744235758181297 + x * (0.14858392400981524 + x * (13.126203728784354 + x * (-22.304326087620254 + x * (-301.0265901077499 + x * (511.51081954366913 + x * (2452.3103407420913 + x * (-4167.0181751034215 + x * (-9289.467319480691 + x * (15784.86153004252 + x * (18650.674932774495 + x * (-31691.62570154111 + x * (-20558.70148540086 + x * (34933.785224045925 + x * (11778.794705879849 + x * (-20014.77986075796 + x * (-2745.6233457783396 + 4665.421905933992 * x))))))))))))))));
      s[6] = 0.12500960909297965 + x * (-0.28776538211375796 + x * (-18.46404979215492 + x * (42.503247409204974 + x * (386.6970602335539 + x * (-890.1557896850086 + x * (-2699.3743510196864 + x * (6213.814259762217 + x * (9099.283424617413 + x * (-20946.05999206715 + x * (-16792.045907576005 + x * (38654.384587918394 + x * (17397.639813613278 + x * (-40048.429118102955 + x * (-9512.67061276706 + x * (21897.65501761703 + (2138.809613081568 - 4923.424447469619 * x) * x)))))))))))))));
      s[7] = -0.2108872355192652 + x * (0.7917297460452679 + x * (29.293371825348498 + x * (-109.97552212672475 + x * (-404.5200135900909 + x * (1518.6814263144588 + x * (2308.9540470908037 + x * (-8668.460169398895 + x * (-6936.540790278123 + x * (26041.71686729631 + x * (11899.790374959914 + x * (-44675.14588239865 + x * (-11733.208543423425 + x * (44049.75103167004 + x * (6192.930540682235 + x * (-23249.99572485938 + x * (-1356.4881000311434 + 5092.636243756794 * x))))))))))))))));
      s[8] = 0.6361909908117533 + x * (-7.088550603806908 + x * (-18.355358618399922 + x * (204.51859629689582 + x * (187.094530553191 + x * (-2084.6397806255927 + x * (-938.1687551710137 + x * (10453.239344767853 + x * (2630.0145571342678 + x * (-29304.07935077387 + x * (-4327.255122991185 + x * (48215.028753813356 + x * (4151.6976080135355 + x * (-46258.93640612106 + x * (-2150.250258243501 + x * (23958.462138798233 + (464.5866083322933 - 5176.504745552016 * x) * x)))))))))))))));
      s[9] = 0.6361909908117533 + x * (7.088550603806908 + x * (-18.355358618399922 + x * (-204.51859629689582 + x * (187.094530553191 + x * (2084.6397806255927 + x * (-938.1687551710137 + x * (-10453.239344767853 + x * (2630.0145571342678 + x * (29304.07935077387 + x * (-4327.255122991185 + x * (-48215.028753813356 + x * (4151.6976080135355 + x * (46258.93640612106 + x * (-2150.250258243501 + x * (-23958.462138798233 + x * (464.5866083322933 + 5176.504745552016 * x))))))))))))))));
      s[10] = -0.2108872355192652 + x * (-0.7917297460452679 + x * (29.293371825348498 + x * (109.97552212672475 + x * (-404.5200135900909 + x * (-1518.6814263144588 + x * (2308.9540470908037 + x * (8668.460169398895 + x * (-6936.540790278123 + x * (-26041.71686729631 + x * (11899.790374959914 + x * (44675.14588239865 + x * (-11733.208543423425 + x * (-44049.75103167004 + x * (6192.930540682235 + x * (23249.99572485938 + (-1356.4881000311434 - 5092.636243756794 * x) * x)))))))))))))));
      s[11] = 0.12500960909297965 + x * (0.28776538211375796 + x * (-18.46404979215492 + x * (-42.503247409204974 + x * (386.6970602335539 + x * (890.1557896850086 + x * (-2699.3743510196864 + x * (-6213.814259762217 + x * (9099.283424617413 + x * (20946.05999206715 + x * (-16792.045907576005 + x * (-38654.384587918394 + x * (17397.639813613278 + x * (40048.429118102955 + x * (-9512.67061276706 + x * (-21897.65501761703 + x * (2138.809613081568 + 4923.424447469619 * x))))))))))))))));
      s[12] = -0.08744235758181297 + x * (-0.14858392400981524 + x * (13.126203728784354 + x * (22.304326087620254 + x * (-301.0265901077499 + x * (-511.51081954366913 + x * (2452.3103407420913 + x * (4167.0181751034215 + x * (-9289.467319480691 + x * (-15784.86153004252 + x * (18650.674932774495 + x * (31691.62570154111 + x * (-20558.70148540086 + x * (-34933.785224045925 + x * (11778.794705879849 + x * (20014.77986075796 + (-2745.6233457783396 - 4665.421905933992 * x) * x)))))))))))))));
      s[13] = 0.06572110723943334 + x * (0.09081523346055195 + x * (-9.92983842041594 + x * (-13.72132382204532 + x * (235.77450903571773 + x * (325.7997009106741 + x * (-2046.204127331275 + x * (-2827.501138325875 + x * (8396.582227650659 + x * (11602.628246915561 + x * (-18144.11658796703 + x * (-25072.03930494684 + x * (21280.680474942303 + x * (29406.22954647528 + x * (-12833.295268589793 + x * (-17733.40034639422 + x * (3120.4428895725946 + 4311.913803954011 * x))))))))))))))));
      s[14] = -0.050819459316706284 + x * (-0.0608183969535408 + x * (7.702592608760826 + x * (9.21810938466685 + x * (-185.9444139921248 + x * (-222.52974221921576 + x * (1664.0536140057795 + x * (1991.4630066775962 + x * (-7130.660090282434 + x * (-8533.646790866242 + x * (16214.966533307492 + x * (19405.327889564607 + x * (-20021.82873676724 + x * (-23961.20588886741 + x * (12668.673565736468 + x * (15161.287195011555 + (-3216.912245157384 - 3849.8529602886033 * x) * x)))))))))))))));
      s[15] = 0.03895778796237647 + x * (0.04231556230364813 + x * (-5.914578814804386 + x * (-6.424356757098205 + x * (144.02231364795276 + x * (156.43560646131036 + x * (-1309.8849823835983 + x * (-1422.7840563277448 + x * (5747.9047416862595 + x * (6243.317034508095 + x * (-13477.789528203877 + x * (-14639.441106023654 + x * (17250.232901354644 + x * (18737.031624964602 + x * (-11342.26425884488 + x * (-12319.854771351707 + x * (2993.6544337703426 + 3251.677708963892 * x))))))))))))))));
      s[16] = -0.02764047686844571 + x * (-0.028317098144308016 + x * (4.199982678193974 + x * (4.302795580150937 + x * (-102.7263630656057 + x * (-105.24103903060305 + x * (942.1007130903333 + x * (965.1627387390186 + x * (-4185.806478830546 + x * (-4288.272356452662 + x * (9980.630652375865 + x * (10224.950136372554 + x * (-13045.639534773614 + x * (-13364.98848481055 + x * (8794.849774623228 + x * (9010.142097684276 + (-2387.581105620983 - 2446.0275709840407 * x) * x)))))))))))))));
      s[17] = 0.010910034179687491 + x * (0.010910034179687491 + x * (-1.6583251953124987 + x * (-1.6583251953124987 + x * (40.628967285156214 + x * (40.628967285156214 + x * (-373.7864990234372 + x * (-373.7864990234372 + x * (1668.6897277832018 + x * (1668.6897277832018 + x * (-4004.8553466796843 + x * (-4004.8553466796843 + x * (5279.1275024414035 + x * (5279.1275024414035 + x * (-3596.7681884765598 + x * (-3596.7681884765598 + x * (989.1112518310539 + 989.1112518310539 * x))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(19);

      s[0] = x * (-0.18547058105468767 + x * (0.18547058105468767 + x * (10.38635253906251 + x * (-10.38635253906251 + x * (-167.22027587890645 + x * (167.22027587890645 + x * (1194.4305419921889 + x * (-1194.4305419921889 + x * (-4479.114532470709 + x * (4479.114532470709 + x * (9446.859741210948 + x * (-9446.859741210948 + x * (-11263.563537597669 + x * (11263.563537597669 + x * (7079.954223632821 + x * (-7079.954223632821 + x * (-1822.047042846682 + 1822.047042846682 * x)))))))))))))))));
      s[1] = x * (0.46888238808559246 + x * (-0.4791301354322642 + x * (-26.23669426652754 + x * (26.81011527974368 + x * (421.6057060268455 + x * (-430.82018894423237 + x * (-3002.1108796406197 + x * (3067.724079417353 + x * (11208.34095069824 + x * (-11453.306957434119 + x * (-23502.194116178995 + x * (24015.85074631686 + x * (27816.641096646752 + x * (-28424.592935391112 + x * (-17327.842836007716 + x * (17706.554768804446 + (4411.327890333939 - 4507.74049791351 * x) * x))))))))))))))));
      s[2] = x * (-0.6573338680009646 + x * (0.7076464491433018 + x * (36.706220501912 + x * (-39.51572840547898 + x * (-586.9226348985263 + x * (631.845913813714 + x * (4145.674687946247 + x * (-4462.986185619942 + x * (-15303.2581976461 + x * (16474.575327786846 + x * (31620.069179731465 + x * (-34040.281150810406 + x * (-36754.92069003511 + x * (39568.15612429217 + x * (22415.293490439195 + x * (-24130.968473072782 + x * (-5571.984722171082 + 5998.466525566741 * x)))))))))))))))));
      s[3] = x * (0.8494054000963955 + x * (-0.9964160481084681 + x * (-47.24723727463211 + x * (55.42454220786607 + x * (748.3734787845327 + x * (-877.8980498064236 + x * (-5206.154628608036 + x * (6107.20866654547 + x * (18819.098760110373 + x * (-22076.210032787763 + x * (-37880.173268632396 + x * (44436.27571205842 + x * (42721.0968065561 + x * (-50115.040999288525 + x * (-25219.689536716032 + x * (29584.58161420359 + (6063.846220379988 - 7113.345037084534 * x) * x))))))))))))))));
      s[4] = x * (-1.0816007858340868 + x * (1.4392669725996496 + x * (59.7360377720352 + x * (-79.48968544152278 + x * (-929.9653986497863 + x * (1237.488453658002 + x * (6293.9764033482315 + x * (-8375.282712720042 + x * (-21941.327953043874 + x * (29196.935756144754 + x * (42359.659059357466 + x * (-56367.24663407076 + x * (-45769.18707759396 + x * (60904.2450655361 + x * (25928.90298216149 + x * (-34503.13108748989 + x * (-6000.712452565767 + 7985.041577410772 * x)))))))))))))))));
      s[5] = x * (1.402529761895951 + x * (-2.230102742818355 + x * (-76.39820519234462 + x * (121.47752694782876 + x * (1149.906266593044 + x * (-1828.4168997929662 + x * (-7389.524787386772 + x * (11749.768129125821 + x * (24220.58035647349 + x * (-38512.11158086717 + x * (-44071.84395083747 + x * (70076.7589722753 + x * (45186.29296893444 + x * (-71848.79681383209 + x * (-24470.095997077828 + x * (38908.85575671667 + (5449.6808187315555 - 8665.304987830583 * x) * x))))))))))))))));
      s[6] = x * (-1.913756208003585 + x * (3.9197898694981625 + x * (101.0555197780637 + x * (-206.98373231988137 + x * (-1408.665143227646 + x * (2885.253270425216 + x * (8140.40495898623 + x * (-16673.32377990491 + x * (-24391.200894650705 + x * (49958.49616157965 + x * (41367.62502924391 + x * (-84729.91326517233 + x * (-40152.71636297299 + x * (82241.5154940779 + x * (20826.863363154054 + x * (-42657.955952224795 + x * (-4481.452714102908 + 9178.992013669653 * x)))))))))))))))));
      s[7] = x * (2.9115577108894164 + x * (-8.730181074973684 + x * (-139.7817155383485 + x * (419.12948627333395 + x * (1531.3658534241772 + x * (-4591.734913041004 + x * (-7607.371647658772 + x * (22810.37801184236 + x * (20668.60902581557 + x * (-61973.93879171462 + x * (-32786.78657044798 + x * (98309.7750582069 + x * (30339.101064909988 + x * (-90970.49492028804 + x * (-15189.418131890927 + x * (45544.81960599297 + (3181.3705636753944 - 9539.203356196904 * x) * x))))))))))))))));
      s[8] = x * (-5.867989857766719 + x * (34.68365612903696 + x * (129.47234049080149 + x * (-765.2661720028264 + x * (-1095.963735289416 + x * (6477.862137808785 + x * (4792.03434507107 + x * (-28324.055666693905 + x * (-12088.12452891317 + x * (71448.7183120944 + x * (18286.717945687615 + x * (-108086.45759969084 + x * (-16382.744890105016 + x * (96832.73216058256 + x * (8014.548430816018 + x * (-47371.22056133355 + x * (-1650.0719179001396 + 9753.003733106338 * x)))))))))))))))));
      s[9] = 1. + x * x * (-57. + x * x * (957.6000000000001 + x * x * (-7341.6 + x * x * (30590. + x * x * (-75084.54545454546 + x * x * (111664.1958041958 + x * x * (-98902.57342657342 + x * x * (47996.837104072394 - 9823.91402714932 * x * x))))))));
      s[10] = x * (5.867989857766719 + x * (34.68365612903696 + x * (-129.47234049080149 + x * (-765.2661720028264 + x * (1095.963735289416 + x * (6477.862137808785 + x * (-4792.03434507107 + x * (-28324.055666693905 + x * (12088.12452891317 + x * (71448.7183120944 + x * (-18286.717945687615 + x * (-108086.45759969084 + x * (16382.744890105016 + x * (96832.73216058256 + x * (-8014.548430816018 + x * (-47371.22056133355 + x * (1650.0719179001396 + 9753.003733106338 * x)))))))))))))))));
      s[11] = x * (-2.9115577108894164 + x * (-8.730181074973684 + x * (139.7817155383485 + x * (419.12948627333395 + x * (-1531.3658534241772 + x * (-4591.734913041004 + x * (7607.371647658772 + x * (22810.37801184236 + x * (-20668.60902581557 + x * (-61973.93879171462 + x * (32786.78657044798 + x * (98309.7750582069 + x * (-30339.101064909988 + x * (-90970.49492028804 + x * (15189.418131890927 + x * (45544.81960599297 + (-3181.3705636753944 - 9539.203356196904 * x) * x))))))))))))))));
      s[12] = x * (1.913756208003585 + x * (3.9197898694981625 + x * (-101.0555197780637 + x * (-206.98373231988137 + x * (1408.665143227646 + x * (2885.253270425216 + x * (-8140.40495898623 + x * (-16673.32377990491 + x * (24391.200894650705 + x * (49958.49616157965 + x * (-41367.62502924391 + x * (-84729.91326517233 + x * (40152.71636297299 + x * (82241.5154940779 + x * (-20826.863363154054 + x * (-42657.955952224795 + x * (4481.452714102908 + 9178.992013669653 * x)))))))))))))))));
      s[13] = x * (-1.402529761895951 + x * (-2.230102742818355 + x * (76.39820519234462 + x * (121.47752694782876 + x * (-1149.906266593044 + x * (-1828.4168997929662 + x * (7389.524787386772 + x * (11749.768129125821 + x * (-24220.58035647349 + x * (-38512.11158086717 + x * (44071.84395083747 + x * (70076.7589722753 + x * (-45186.29296893444 + x * (-71848.79681383209 + x * (24470.095997077828 + x * (38908.85575671667 + (-5449.6808187315555 - 8665.304987830583 * x) * x))))))))))))))));
      s[14] = x * (1.0816007858340868 + x * (1.4392669725996496 + x * (-59.7360377720352 + x * (-79.48968544152278 + x * (929.9653986497863 + x * (1237.488453658002 + x * (-6293.9764033482315 + x * (-8375.282712720042 + x * (21941.327953043874 + x * (29196.935756144754 + x * (-42359.659059357466 + x * (-56367.24663407076 + x * (45769.18707759396 + x * (60904.2450655361 + x * (-25928.90298216149 + x * (-34503.13108748989 + x * (6000.712452565767 + 7985.041577410772 * x)))))))))))))))));
      s[15] = x * (-0.8494054000963955 + x * (-0.9964160481084681 + x * (47.24723727463211 + x * (55.42454220786607 + x * (-748.3734787845327 + x * (-877.8980498064236 + x * (5206.154628608036 + x * (6107.20866654547 + x * (-18819.098760110373 + x * (-22076.210032787763 + x * (37880.173268632396 + x * (44436.27571205842 + x * (-42721.0968065561 + x * (-50115.040999288525 + x * (25219.689536716032 + x * (29584.58161420359 + (-6063.846220379988 - 7113.345037084534 * x) * x))))))))))))))));
      s[16] = x * (0.6573338680009646 + x * (0.7076464491433018 + x * (-36.706220501912 + x * (-39.51572840547898 + x * (586.9226348985263 + x * (631.845913813714 + x * (-4145.674687946247 + x * (-4462.986185619942 + x * (15303.2581976461 + x * (16474.575327786846 + x * (-31620.069179731465 + x * (-34040.281150810406 + x * (36754.92069003511 + x * (39568.15612429217 + x * (-22415.293490439195 + x * (-24130.968473072782 + x * (5571.984722171082 + 5998.466525566741 * x)))))))))))))))));
      s[17] = x * (-0.46888238808559246 + x * (-0.4791301354322642 + x * (26.23669426652754 + x * (26.81011527974368 + x * (-421.6057060268455 + x * (-430.82018894423237 + x * (3002.1108796406197 + x * (3067.724079417353 + x * (-11208.34095069824 + x * (-11453.306957434119 + x * (23502.194116178995 + x * (24015.85074631686 + x * (-27816.641096646752 + x * (-28424.592935391112 + x * (17327.842836007716 + x * (17706.554768804446 + (-4411.327890333939 - 4507.74049791351 * x) * x))))))))))))))));
      s[18] = x * (0.18547058105468767 + x * (0.18547058105468767 + x * (-10.38635253906251 + x * (-10.38635253906251 + x * (167.22027587890645 + x * (167.22027587890645 + x * (-1194.4305419921889 + x * (-1194.4305419921889 + x * (4479.114532470709 + x * (4479.114532470709 + x * (-9446.859741210948 + x * (-9446.859741210948 + x * (11263.563537597669 + x * (11263.563537597669 + x * (-7079.954223632821 + x * (-7079.954223632821 + x * (1822.047042846682 + 1822.047042846682 * x)))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(20);

      s[0] = -0.009273529052734373 + x * (0.009273529052734373 + x * (1.7526969909667967 + x * (-1.7526969909667967 + x * (-53.74937438964843 + x * (53.74937438964843 + x * (627.0760345458984 + x * (-627.0760345458984 + x * (-3628.0827713012695 + x * (3628.0827713012695 + x * (11690.488929748533 + x * (-11690.488929748533 + x * (-21963.948898315426 + x * (21963.948898315426 + x * (23894.84550476074 + x * (-23894.84550476074 + x * (-13938.659877777096 + x * (13938.659877777096 + (3370.787029266357 - 3370.787029266357 * x) * x)))))))))))))))));
      s[1] = 0.02340154050286035 + x * (-0.02386101525412459 + x * (-4.421963184035966 + x * (4.508785691889079 + x * (135.4609070037191 + x * (-138.1205979990172 + x * (-1577.2149871785814 + x * (1608.1826264173533 + x * (9098.038563668353 + x * (-9276.672914920699 + x * (-29197.254054053286 + x * (29770.524050635147 + x * (54571.161678537144 + x * (-55642.63263299769 + x * (-58988.48763804698 + x * (60146.69005132967 + x * (34144.36078598432 + x * (-34814.76415867249 + x * (-8181.666694271156 + 8342.308651531093 * x))))))))))))))))));
      s[2] = -0.032659181834541286 + x * (0.034894730214532106 + x * (6.167961244807293 + x * (-6.590163363602922 + x * (-188.4239377082999 + x * (201.3217142303613 + x * (2182.6041391950553 + x * (-2332.005222549148 + x * (-12494.03264945361 + x * (13349.259660054893 + x * (39685.368428599904 + x * (-42401.86517213023 + x * (-73218.68304782525 + x * (78230.56329338337 + x * (77918.34552811575 + x * (-83251.92161092858 + x * (-44290.096140904476 + x * (47321.79035722187 + (10398.782377917947 - 11110.587750649147 * x) * x)))))))))))))))));
      s[3] = 0.0418713484587029 + x * (-0.0483013175060241 + x * (-7.899837503106585 + x * (9.112975185403627 + x * (240.08761230211388 + x * (-276.95664023109094 + x * (-2754.5394620418724 + x * (3177.540013314368 + x * (15547.169642288987 + x * (-17934.66904828417 + x * (-48476.801125511134 + x * (55921.13578928754 + x * (87446.08082689543 + x * (-100874.72866662408 + x * (-90693.66042692162 + x * (104621.02247279712 + x * (50136.70641226356 + x * (-57835.94424988519 + x * (-11437.185513120814 + 13193.5356557576 * x))))))))))))))))));
      s[4] = -0.05264968857939141 + x * (0.06790281628853896 + x * (9.91586590638919 + x * (-12.788588862553821 + x * (-298.6148185016837 + x * (385.12644060903625 + x * (3368.628214283774 + x * (-4344.552626061219 + x * (-18555.097757000032 + x * (23930.690346051404 + x * (56106.270098106026 + x * (-72360.80314818988 + x * (-97745.83409417108 + x * (126063.75449796117 + x * (97773.83220680212 + x * (-126099.86393658671 + x * (-52164.35171918572 + x * (67276.87261164698 + (11505.30465344878 - 14838.50349938453 * x) * x)))))))))))))))));
      s[5] = 0.06690680076349209 + x * (-0.10079719696668206 + x * (-12.56043800168195 + x * (18.922694386758984 + x * (371.92956909312517 + x * (-560.3235785571915 + x * (-4067.8846133738907 + x * (6128.39594679467 + x * (21467.564536799353 + x * (-32341.56029459185 + x * (-61797.09144126349 + x * (93099.2593711334 + x * (102553.5996921875 + x * (-154500.21925807232 + x * (-98103.30542766911 + x * (147795.71115991913 + x * (50302.87819011502 + x * (-75782.86606234971 + x * (-10715.196974687598 + 16142.780818534084 * x))))))))))))))))));
      s[6] = -0.0882109591825403 + x * (0.1648824967827661 + x * (16.451886551117408 + x * (-30.75159998795209 + x * (-470.46219787348036 + x * (879.3803235578112 + x * (4832.372315577086 + x * (-9032.592096946306 + x * (-23592.02370950952 + x * (44097.82876674669 + x * (63285.20744122163 + x * (-118291.68517180395 + x * (-99016.2862928577 + x * (185079.63928086372 + x * (90266.67804477802 + x * (-168725.0131983032 + x * (-44498.9352482129 + x * (83176.68933535664 + (9177.085971284905 - 17153.660521980233 * x) * x)))))))))))))))));
      s[7] = 0.12548890892399125 + x * (-0.3198366016458618 + x * (-23.027717453144408 + x * (58.69129755790498 + x * (601.46319761429 + x * (-1532.9637239616661 + x * (-5305.79220865286 + x * (13523.000268354303 + x * (23114.189690002982 + x * (-58911.69142865186 + x * (-57140.463637972105 + x * (145635.2745684281 + x * (84225.95964485177 + x * (-214668.7299631204 + x * (-73427.44411108278 + x * (187146.29359200917 + x * (34976.74967119015 + x * (-89146.08348557208 + x * (-7021.760017407215 + 17896.528711558116 * x))))))))))))))))));
      s[8] = -0.21114988835684312 + x * (0.881437631776773 + x * (36.43894902456759 + x * (-152.11308508185851 + x * (-628.7414667592586 + x * (2624.6586904348433 + x * (4545.236686948072 + x * (-18973.927442659588 + x * (-17680.147047494855 + x * (73805.1393930747 + x * (40693.14870144013 + x * (-169872.0889698969 + x * (-57156.24101858707 + x * (238596.677065461 + x * (48150.10055555368 + x * (-201000.86689022987 + x * (-22363.871795869814 + x * (93357.18027848059 + (4404.287585632899 - 18385.540477214698 * x) * x)))))))))))))))));
      s[9] = 0.636274648357004 + x * (-7.899525043335517 + x * (-22.817403575879396 + x * (283.2843512420112 + x * (291.0505092191229 + x * (-3613.472251941731 + x * (-1850.486119302684 + x * (22974.294951909505 + x * (6722.421501999604 + x * (-83460.71487215257 + x * (-14848.873340316222 + x * (184352.85315867316 + x * (20304.191509284676 + x * (-252082.13108355747 + x * (-16790.90423628984 + x * (208463.70173214516 + x * (7695.219722396972 + x * (-95538.27276949235 + x * (-1500.438418064106 + 18628.356308217604 * x))))))))))))))))));
      s[10] = 0.636274648357004 + x * (7.899525043335517 + x * (-22.817403575879396 + x * (-283.2843512420112 + x * (291.0505092191229 + x * (3613.472251941731 + x * (-1850.486119302684 + x * (-22974.294951909505 + x * (6722.421501999604 + x * (83460.71487215257 + x * (-14848.873340316222 + x * (-184352.85315867316 + x * (20304.191509284676 + x * (252082.13108355747 + x * (-16790.90423628984 + x * (-208463.70173214516 + x * (7695.219722396972 + x * (95538.27276949235 + (-1500.438418064106 - 18628.356308217604 * x) * x)))))))))))))))));
      s[11] = -0.21114988835684312 + x * (-0.881437631776773 + x * (36.43894902456759 + x * (152.11308508185851 + x * (-628.7414667592586 + x * (-2624.6586904348433 + x * (4545.236686948072 + x * (18973.927442659588 + x * (-17680.147047494855 + x * (-73805.1393930747 + x * (40693.14870144013 + x * (169872.0889698969 + x * (-57156.24101858707 + x * (-238596.677065461 + x * (48150.10055555368 + x * (201000.86689022987 + x * (-22363.871795869814 + x * (-93357.18027848059 + x * (4404.287585632899 + 18385.540477214698 * x))))))))))))))))));
      s[12] = 0.12548890892399125 + x * (0.3198366016458618 + x * (-23.027717453144408 + x * (-58.69129755790498 + x * (601.46319761429 + x * (1532.9637239616661 + x * (-5305.79220865286 + x * (-13523.000268354303 + x * (23114.189690002982 + x * (58911.69142865186 + x * (-57140.463637972105 + x * (-145635.2745684281 + x * (84225.95964485177 + x * (214668.7299631204 + x * (-73427.44411108278 + x * (-187146.29359200917 + x * (34976.74967119015 + x * (89146.08348557208 + (-7021.760017407215 - 17896.528711558116 * x) * x)))))))))))))))));
      s[13] = -0.0882109591825403 + x * (-0.1648824967827661 + x * (16.451886551117408 + x * (30.75159998795209 + x * (-470.46219787348036 + x * (-879.3803235578112 + x * (4832.372315577086 + x * (9032.592096946306 + x * (-23592.02370950952 + x * (-44097.82876674669 + x * (63285.20744122163 + x * (118291.68517180395 + x * (-99016.2862928577 + x * (-185079.63928086372 + x * (90266.67804477802 + x * (168725.0131983032 + x * (-44498.9352482129 + x * (-83176.68933535664 + x * (9177.085971284905 + 17153.660521980233 * x))))))))))))))))));
      s[14] = 0.06690680076349209 + x * (0.10079719696668206 + x * (-12.56043800168195 + x * (-18.922694386758984 + x * (371.92956909312517 + x * (560.3235785571915 + x * (-4067.8846133738907 + x * (-6128.39594679467 + x * (21467.564536799353 + x * (32341.56029459185 + x * (-61797.09144126349 + x * (-93099.2593711334 + x * (102553.5996921875 + x * (154500.21925807232 + x * (-98103.30542766911 + x * (-147795.71115991913 + x * (50302.87819011502 + x * (75782.86606234971 + (-10715.196974687598 - 16142.780818534084 * x) * x)))))))))))))))));
      s[15] = -0.05264968857939141 + x * (-0.06790281628853896 + x * (9.91586590638919 + x * (12.788588862553821 + x * (-298.6148185016837 + x * (-385.12644060903625 + x * (3368.628214283774 + x * (4344.552626061219 + x * (-18555.097757000032 + x * (-23930.690346051404 + x * (56106.270098106026 + x * (72360.80314818988 + x * (-97745.83409417108 + x * (-126063.75449796117 + x * (97773.83220680212 + x * (126099.86393658671 + x * (-52164.35171918572 + x * (-67276.87261164698 + x * (11505.30465344878 + 14838.50349938453 * x))))))))))))))))));
      s[16] = 0.0418713484587029 + x * (0.0483013175060241 + x * (-7.899837503106585 + x * (-9.112975185403627 + x * (240.08761230211388 + x * (276.95664023109094 + x * (-2754.5394620418724 + x * (-3177.540013314368 + x * (15547.169642288987 + x * (17934.66904828417 + x * (-48476.801125511134 + x * (-55921.13578928754 + x * (87446.08082689543 + x * (100874.72866662408 + x * (-90693.66042692162 + x * (-104621.02247279712 + x * (50136.70641226356 + x * (57835.94424988519 + (-11437.185513120814 - 13193.5356557576 * x) * x)))))))))))))))));
      s[17] = -0.032659181834541286 + x * (-0.034894730214532106 + x * (6.167961244807293 + x * (6.590163363602922 + x * (-188.4239377082999 + x * (-201.3217142303613 + x * (2182.6041391950553 + x * (2332.005222549148 + x * (-12494.03264945361 + x * (-13349.259660054893 + x * (39685.368428599904 + x * (42401.86517213023 + x * (-73218.68304782525 + x * (-78230.56329338337 + x * (77918.34552811575 + x * (83251.92161092858 + x * (-44290.096140904476 + x * (-47321.79035722187 + x * (10398.782377917947 + 11110.587750649147 * x))))))))))))))))));
      s[18] = 0.02340154050286035 + x * (0.02386101525412459 + x * (-4.421963184035966 + x * (-4.508785691889079 + x * (135.4609070037191 + x * (138.1205979990172 + x * (-1577.2149871785814 + x * (-1608.1826264173533 + x * (9098.038563668353 + x * (9276.672914920699 + x * (-29197.254054053286 + x * (-29770.524050635147 + x * (54571.161678537144 + x * (55642.63263299769 + x * (-58988.48763804698 + x * (-60146.69005132967 + x * (34144.36078598432 + x * (34814.76415867249 + (-8181.666694271156 - 8342.308651531093 * x) * x)))))))))))))))));
      s[19] = -0.009273529052734373 + x * (-0.009273529052734373 + x * (1.7526969909667967 + x * (1.7526969909667967 + x * (-53.74937438964843 + x * (-53.74937438964843 + x * (627.0760345458984 + x * (627.0760345458984 + x * (-3628.0827713012695 + x * (-3628.0827713012695 + x * (11690.488929748533 + x * (11690.488929748533 + x * (-21963.948898315426 + x * (-21963.948898315426 + x * (23894.84550476074 + x * (23894.84550476074 + x * (-13938.659877777096 + x * (-13938.659877777096 + x * (3370.787029266357 + 3370.787029266357 * x))))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(21);

      s[0] = x * (0.17619705200195304 + x * (-0.17619705200195304 + x * (-12.157596588134759 + x * (12.157596588134759 + x * (243.15193176269517 + x * (-243.15193176269517 + x * (-2188.367385864257 + x * (2188.367385864257 + x * (10577.10903167724 + x * (-10577.10903167724 + x * (-29808.216361999497 + x * (29808.216361999497 + x * (50444.67384338376 + x * (-50444.67384338376 + x * (-50444.67384338375 + x * (50444.67384338375 + x * (27447.837238311753 + x * (-27447.837238311753 + x * (-6260.033054351803 + 6260.033054351803 * x)))))))))))))))))));
      s[1] = x * (-0.4439381104077079 + x * (0.4518121586999903 + x * (30.615841861006643 + x * (-31.15886939495963 + x * (-611.5547934727551 + x * (622.401827922577 + x * (5492.904669406809 + x * (-5590.3313052774965 + x * (-26473.830119639384 + x * (26943.39155614745 + x * (74331.7548688973 + x * (-75650.16347984145 + x * (-125209.59020370715 + x * (127430.40958552466 + x * (124505.61086197139 + x * (-126713.94389219247 + x * (-67292.99663331243 + x * (68486.56008912042 + (15227.529446105615 - 15497.61732416742 * x) * x))))))))))))))))));
      s[2] = x * (0.6171831785953372 + x * (-0.6552003278504067 + x * (-42.50726325037919 + x * (45.12561875237471 + x * (846.3931664930681 + x * (-898.5291553777151 + x * (-7563.251256172593 + x * (8029.131179397182 + x * (36191.21299072039 + x * (-38420.5134540312 + x * (-100674.61698232764 + x * (106875.95569788512 + x * (167650.60631430117 + x * (-177977.5211493093 + x * (-164454.7384052819 + x * (174584.7946875777 + x * (87503.11131609202 + x * (-92893.11376359545 + x * (-19456.82706375274 + 20655.325539029145 * x)))))))))))))))))));
      s[3] = x * (-0.7860469919465505 + x * (0.8939516438458414 + x * (54.00662052241192 + x * (-61.42038286414761 + x * (-1069.1302214174364 + x * (1215.89514203799 + x * (9464.641262188414 + x * (-10763.900506497755 + x * (-44707.58891852792 + x * (50844.82609255985 + x * (122341.70518472214 + x * (-139136.17071410714 + x * (-199786.59475441705 + x * (227212.31253209664 + x * (191682.77287641924 + x * (-217996.0379791846 + x * (-99571.15489934948 + x * (113239.79165860734 + (21592.128896851616 - 24556.189794291982 * x) * x))))))))))))))))));
      s[4] = x * (0.9781415492159006 + x * (-1.2288180683628225 + x * (-66.92617088857494 + x * (84.07790068844764 + x * (1311.701857017342 + x * (-1647.862667218324 + x * (-11428.179158197143 + x * (14356.974253202283 + x * (52829.99906760323 + x * (-66369.18496908953 + x * (-140817.20707087574 + x * (176905.6109760317 + x * (223273.7649628838 + x * (-280494.00089150784 + x * (-207699.2862923271 + x * (260928.12025689724 + x * (104614.67898544416 + x * (-131425.1581034878 + x * (-22019.524322209196 + 27662.652062552253 * x)))))))))))))))))));
      s[5] = x * (-1.223014459978085 + x * (1.7621391137723628 + x * (83.07209352015198 + x * (-119.69162266277581 + x * (-1599.694317014239 + x * (2304.865574639786 + x * (13556.711762664392 + x * (-19532.730669068995 + x * (-60464.321777098725 + x * (87117.9776509371 + x * (154800.58693155684 + x * (-223039.2019010986 + x * (-235690.79639960214 + x * (339587.1305555449 + x * (211007.89592071823 + x * (-304023.6063303521 + x * (-102623.34705649389 + x * (147861.38655934136 + (20931.11585620931 - 30157.89195639456 * x) * x))))))))))))))))));
      s[6] = x * (1.5705866773083 + x * (-2.7275086929772963 + x * (-105.20442741727243 + x * (182.69987544532262 + x * (1958.5002498164208 + x * (-3401.166286299725 + x * (-15767.570422312932 + x * (27382.24258192168 + x * (66236.51642096322 + x * (-115027.50974580413 + x * (-160228.21875344688 + x * (278255.167845479 + x * (232135.98621612735 + x * (-403131.47278344043 + x * (-199222.99730445095 + x * (345974.19221723004 + x * (93493.96073391511 + x * (-162363.2712074603 + x * (-18502.543299871377 + 32131.845011621575 * x)))))))))))))))))));
      s[7] = x * (-2.1315612623891824 + x * (4.79956205710909 + x * (138.4022820913728 + x * (-311.6355853636163 + x * (-2386.9333044348014 + x * (5374.574366196942 + x * (17313.80400904587 + x * (-38984.88786238206 + x * (-66650.702872888 + x * (150075.06011335953 + x * (150646.6960331151 + x * (-339205.90464238444 + x * (-207089.18633917766 + x * (466295.4890055782 + x * (170577.592709031 + x * (-384083.6086698384 + x * (-77484.70749025879 + x * (174469.60997011312 + (14937.166534738328 - 33633.49625733637 * x) * x))))))))))))))))));
      s[8] = x * (3.233287771627264 + x * (-10.706610510056723 + x * (-190.87660052793387 + x * (632.0629531554943 + x * (2592.0399962480565 + x * (-8583.202185046985 + x * (-16197.2173248927 + x * (53634.971426341916 + x * (56646.490566920074 + x * (-187577.46111673117 + x * (-119948.90983743138 + x * (397195.1615333478 + x * (157413.32563190622 + x * (-521253.68531157105 + x * (-125297.12583814556 + x * (414905.08087482385 + x * (55455.31921307172 + x * (-183633.05262692558 + x * (-10476.279094920126 + 34690.831063115744 * x)))))))))))))))))));
      s[9] = x * (-6.506656850126473 + x * (42.58686967782191 + x * (176.72967748294639 + x * (-1156.7174843442745 + x * (-1857.2875156700366 + x * (12156.175314908149 + x * (10228.201372424672 + x * (-66944.83648350103 + x * (-33245.09696337559 + x * (217593.25017705667 + x * (67186.64533109561 + x * (-439744.86048850045 + x * (-85418.24680267664 + x * (559072.9353773913 + x * (66470.51977638347 + x * (-435057.7306192049 + x * (-28931.310103428477 + x * (189358.9844006315 + (5396.351884614147 - 35319.78706411486 * x) * x))))))))))))))))));
      s[10] = 1. + x * x * (-70. + x * x * (1449.0000000000002 + x * x * (-13800. + x * x * (72450.00000000001 + x * x * (-229205.45454545456 + x * x * (455472.3776223777 + x * x * (-572593.8461538462 + x * x * (442076.13122171955 + x * x * (-191307.7994760658 + 35528.59133126936 * x * x)))))))));
      s[11] = x * (6.506656850126473 + x * (42.58686967782191 + x * (-176.72967748294639 + x * (-1156.7174843442745 + x * (1857.2875156700366 + x * (12156.175314908149 + x * (-10228.201372424672 + x * (-66944.83648350103 + x * (33245.09696337559 + x * (217593.25017705667 + x * (-67186.64533109561 + x * (-439744.86048850045 + x * (85418.24680267664 + x * (559072.9353773913 + x * (-66470.51977638347 + x * (-435057.7306192049 + x * (28931.310103428477 + x * (189358.9844006315 + (-5396.351884614147 - 35319.78706411486 * x) * x))))))))))))))))));
      s[12] = x * (-3.233287771627264 + x * (-10.706610510056723 + x * (190.87660052793387 + x * (632.0629531554943 + x * (-2592.0399962480565 + x * (-8583.202185046985 + x * (16197.2173248927 + x * (53634.971426341916 + x * (-56646.490566920074 + x * (-187577.46111673117 + x * (119948.90983743138 + x * (397195.1615333478 + x * (-157413.32563190622 + x * (-521253.68531157105 + x * (125297.12583814556 + x * (414905.08087482385 + x * (-55455.31921307172 + x * (-183633.05262692558 + x * (10476.279094920126 + 34690.831063115744 * x)))))))))))))))))));
      s[13] = x * (2.1315612623891824 + x * (4.79956205710909 + x * (-138.4022820913728 + x * (-311.6355853636163 + x * (2386.9333044348014 + x * (5374.574366196942 + x * (-17313.80400904587 + x * (-38984.88786238206 + x * (66650.702872888 + x * (150075.06011335953 + x * (-150646.6960331151 + x * (-339205.90464238444 + x * (207089.18633917766 + x * (466295.4890055782 + x * (-170577.592709031 + x * (-384083.6086698384 + x * (77484.70749025879 + x * (174469.60997011312 + (-14937.166534738328 - 33633.49625733637 * x) * x))))))))))))))))));
      s[14] = x * (-1.5705866773083 + x * (-2.7275086929772963 + x * (105.20442741727243 + x * (182.69987544532262 + x * (-1958.5002498164208 + x * (-3401.166286299725 + x * (15767.570422312932 + x * (27382.24258192168 + x * (-66236.51642096322 + x * (-115027.50974580413 + x * (160228.21875344688 + x * (278255.167845479 + x * (-232135.98621612735 + x * (-403131.47278344043 + x * (199222.99730445095 + x * (345974.19221723004 + x * (-93493.96073391511 + x * (-162363.2712074603 + x * (18502.543299871377 + 32131.845011621575 * x)))))))))))))))))));
      s[15] = x * (1.223014459978085 + x * (1.7621391137723628 + x * (-83.07209352015198 + x * (-119.69162266277581 + x * (1599.694317014239 + x * (2304.865574639786 + x * (-13556.711762664392 + x * (-19532.730669068995 + x * (60464.321777098725 + x * (87117.9776509371 + x * (-154800.58693155684 + x * (-223039.2019010986 + x * (235690.79639960214 + x * (339587.1305555449 + x * (-211007.89592071823 + x * (-304023.6063303521 + x * (102623.34705649389 + x * (147861.38655934136 + (-20931.11585620931 - 30157.89195639456 * x) * x))))))))))))))))));
      s[16] = x * (-0.9781415492159006 + x * (-1.2288180683628225 + x * (66.92617088857494 + x * (84.07790068844764 + x * (-1311.701857017342 + x * (-1647.862667218324 + x * (11428.179158197143 + x * (14356.974253202283 + x * (-52829.99906760323 + x * (-66369.18496908953 + x * (140817.20707087574 + x * (176905.6109760317 + x * (-223273.7649628838 + x * (-280494.00089150784 + x * (207699.2862923271 + x * (260928.12025689724 + x * (-104614.67898544416 + x * (-131425.1581034878 + x * (22019.524322209196 + 27662.652062552253 * x)))))))))))))))))));
      s[17] = x * (0.7860469919465505 + x * (0.8939516438458414 + x * (-54.00662052241192 + x * (-61.42038286414761 + x * (1069.1302214174364 + x * (1215.89514203799 + x * (-9464.641262188414 + x * (-10763.900506497755 + x * (44707.58891852792 + x * (50844.82609255985 + x * (-122341.70518472214 + x * (-139136.17071410714 + x * (199786.59475441705 + x * (227212.31253209664 + x * (-191682.77287641924 + x * (-217996.0379791846 + x * (99571.15489934948 + x * (113239.79165860734 + (-21592.128896851616 - 24556.189794291982 * x) * x))))))))))))))))));
      s[18] = x * (-0.6171831785953372 + x * (-0.6552003278504067 + x * (42.50726325037919 + x * (45.12561875237471 + x * (-846.3931664930681 + x * (-898.5291553777151 + x * (7563.251256172593 + x * (8029.131179397182 + x * (-36191.21299072039 + x * (-38420.5134540312 + x * (100674.61698232764 + x * (106875.95569788512 + x * (-167650.60631430117 + x * (-177977.5211493093 + x * (164454.7384052819 + x * (174584.7946875777 + x * (-87503.11131609202 + x * (-92893.11376359545 + x * (19456.82706375274 + 20655.325539029145 * x)))))))))))))))))));
      s[19] = x * (0.4439381104077079 + x * (0.4518121586999903 + x * (-30.615841861006643 + x * (-31.15886939495963 + x * (611.5547934727551 + x * (622.401827922577 + x * (-5492.904669406809 + x * (-5590.3313052774965 + x * (26473.830119639384 + x * (26943.39155614745 + x * (-74331.7548688973 + x * (-75650.16347984145 + x * (125209.59020370715 + x * (127430.40958552466 + x * (-124505.61086197139 + x * (-126713.94389219247 + x * (67292.99663331243 + x * (68486.56008912042 + (-15227.529446105615 - 15497.61732416742 * x) * x))))))))))))))))));
      s[20] = x * (-0.17619705200195304 + x * (-0.17619705200195304 + x * (12.157596588134759 + x * (12.157596588134759 + x * (-243.15193176269517 + x * (-243.15193176269517 + x * (2188.367385864257 + x * (2188.367385864257 + x * (-10577.10903167724 + x * (-10577.10903167724 + x * (29808.216361999497 + x * (29808.216361999497 + x * (-50444.67384338376 + x * (-50444.67384338376 + x * (50444.67384338375 + x * (50444.67384338375 + x * (-27447.837238311753 + x * (-27447.837238311753 + x * (6260.033054351803 + 6260.033054351803 * x)))))))))))))))))));
    }

    // 1st derivative

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(2);

      s[0] = -0.5;
      s[1] = 0.5;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(3);

      s[0] = -0.5 + x;
      s[1] = -2. * x;
      s[2] = 0.5 + x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(4);

      s[0] = 0.0625 + (1.125 - 1.6875 * x) * x;
      s[1] = -1.6875 + x * (-1.125 + 5.0625 * x);
      s[2] = 1.6875 + (-1.125 - 5.0625 * x) * x;
      s[3] = -0.0625 + x * (1.125 + 1.6875 * x);
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(5);

      s[0] = 0.16666666666666666 + x * (-0.3333333333333333 + x * (-2. + 2.6666666666666665 * x));
      s[1] = -1.3333333333333333 + x * (5.333333333333333 + (4. - 10.666666666666666 * x) * x);
      s[2] = x * (-10. + 16. * x * x);
      s[3] = 1.3333333333333333 + x * (5.333333333333333 + (-4. - 10.666666666666666 * x) * x);
      s[4] = -0.16666666666666666 + x * (-0.3333333333333333 + x * (2. + 2.6666666666666665 * x));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(6);

      s[0] = -0.01171875 + x * (-0.6510416666666666 + x * (0.9765625 + (3.2552083333333335 - 4.069010416666667 * x) * x));
      s[1] = 0.16276041666666666 + x * (5.078125 + x * (-12.6953125 + x * (-9.765625 + 20.345052083333332 * x)));
      s[2] = -2.9296875 + x * (-4.427083333333333 + x * (33.203125 + (6.510416666666667 - 40.690104166666664 * x) * x));
      s[3] = 2.9296875 + x * (-4.427083333333333 + x * (-33.203125 + x * (6.510416666666667 + 40.690104166666664 * x)));
      s[4] = -0.16276041666666666 + x * (5.078125 + x * (12.6953125 + (-9.765625 - 20.345052083333332 * x) * x));
      s[5] = 0.01171875 + x * (-0.6510416666666666 + x * (-0.9765625 + x * (3.2552083333333335 + 4.069010416666667 * x)));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(7);

      s[0] = -0.05 + x * (0.1 + x * (1.6875 + x * (-2.25 + x * (-5.0625 + 6.075 * x))));
      s[1] = 0.45 + x * (-1.35 + x * (-13.5 + x * (27. + (20.25 - 36.45 * x) * x)));
      s[2] = -2.25 + x * (13.5 + x * (21.9375 + x * (-87.75 + x * (-25.3125 + 91.125 * x))));
      s[3] = x * (-24.5 + x * x * (126. - 121.5 * x * x));
      s[4] = 2.25 + x * (13.5 + x * (-21.9375 + x * (-87.75 + x * (25.3125 + 91.125 * x))));
      s[5] = -0.45 + x * (-1.35 + x * (13.5 + x * (27. + (-20.25 - 36.45 * x) * x)));
      s[6] = 0.05 + x * (0.1 + x * (-1.6875 + x * (-2.25 + x * (5.0625 + 6.075 * x))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(8);

      s[0] = 0.00244140625 + x * (0.2754123263888889 + x * (-0.41311848958333336 + x * (-3.6473524305555554 + x * (4.559190538194445 + (7.659440104166666 - 8.936013454861111 * x) * x))));
      s[1] = -0.03349609375 + x * (-2.653103298611111 + x * (5.571516927083334 + x * (30.74197048611111 + x * (-53.79844835069444 + x * (-38.297200520833336 + 62.55209418402778 * x)))));
      s[2] = 0.2791341145833333 + x * (12.4318359375 + x * (-43.51142578125 + x * (-70.341796875 + x * (205.16357421875 + (68.9349609375 - 187.65628255208333 * x) * x))));
      s[3] = -4.18701171875 + x * (-10.054144965277779 + x * (105.56852213541667 + x * (43.24717881944444 + x * (-378.4128146701389 + x * (-38.297200520833336 + 312.7604709201389 * x)))));
      s[4] = 4.18701171875 + x * (-10.054144965277779 + x * (-105.56852213541667 + x * (43.24717881944444 + x * (378.4128146701389 + (-38.297200520833336 - 312.7604709201389 * x) * x))));
      s[5] = -0.2791341145833333 + x * (12.4318359375 + x * (43.51142578125 + x * (-70.341796875 + x * (-205.16357421875 + x * (68.9349609375 + 187.65628255208333 * x)))));
      s[6] = 0.03349609375 + x * (-2.653103298611111 + x * (-5.571516927083334 + x * (30.74197048611111 + x * (53.79844835069444 + (-38.297200520833336 - 62.55209418402778 * x) * x))));
      s[7] = -0.00244140625 + x * (0.2754123263888889 + x * (0.41311848958333336 + x * (-3.6473524305555554 + x * (-4.559190538194445 + x * (7.659440104166666 + 8.936013454861111 * x)))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(9);

      s[0] = 0.014285714285714285 + x * (-0.02857142857142857 + x * (-0.9333333333333333 + x * (1.2444444444444445 + x * (7.111111111111111 + x * (-8.533333333333333 + x * (-11.377777777777778 + 13.003174603174603 * x))))));
      s[1] = -0.1523809523809524 + x * (0.40634920634920635 + x * (9.6 + x * (-17.066666666666666 + x * (-64. + x * (102.4 + (68.26666666666667 - 104.02539682539683 * x) * x)))));
      s[2] = 0.8 + x * (-3.2 + x * (-45.06666666666667 + x * (120.17777777777778 + x * (184.88888888888889 + x * (-443.73333333333335 + x * (-159.2888888888889 + 364.0888888888889 * x))))));
      s[3] = -3.2 + x * (25.6 + x * (65.06666666666666 + x * (-347.02222222222224 + x * (-206.22222222222223 + x * (989.8666666666667 + (159.2888888888889 - 728.1777777777778 * x) * x)))));
      s[4] = x * (-45.55555555555556 + x * x * (485.3333333333333 + x * x * (-1280. + 910.2222222222222 * x * x)));
      s[5] = 3.2 + x * (25.6 + x * (-65.06666666666666 + x * (-347.02222222222224 + x * (206.22222222222223 + x * (989.8666666666667 + (-159.2888888888889 - 728.1777777777778 * x) * x)))));
      s[6] = -0.8 + x * (-3.2 + x * (45.06666666666667 + x * (120.17777777777778 + x * (-184.88888888888889 + x * (-443.73333333333335 + x * (159.2888888888889 + 364.0888888888889 * x))))));
      s[7] = 0.1523809523809524 + x * (0.40634920634920635 + x * (-9.6 + x * (-17.066666666666666 + x * (64. + x * (102.4 + (-68.26666666666667 - 104.02539682539683 * x) * x)))));
      s[8] = -0.014285714285714285 + x * (-0.02857142857142857 + x * (0.9333333333333333 + x * (1.2444444444444445 + x * (-7.111111111111111 + x * (-8.533333333333333 + x * (11.377777777777778 + 13.003174603174603 * x))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(10);

      s[0] = -0.0005340576171875 + x * (-0.10135672433035714 + x * (0.1520350864955357 + x * (2.5094970703125 + x * (-3.136871337890625 + x * (-12.9746337890625 + x * (15.13707275390625 + (16.68167201450893 - 18.766881016322543 * x) * x))))));
      s[1] = 0.007945469447544642 + x * (1.1647705078125 + x * (-2.2463431222098214 + x * (-27.5332763671875 + x * (44.249908447265625 + x * (125.4214599609375 + x * (-188.13218994140624 + x * (-116.7717041015625 + 168.90192914690292 * x)))))));
      s[2] = -0.06229248046875 + x * (-6.412876674107143 + x * (17.314767020089285 + x * (134.19580078125 + x * (-301.9405517578125 + x * (-432.48779296875 + x * (908.224365234375 + (333.63344029017856 - 675.6077165876117 * x) * x))))));
      s[3] = 0.40374755859375 + x * (23.38857421875 + x * (-105.248583984375 + x * (-262.48271484375 + x * (984.3101806640625 + x * (674.68095703125 + x * (-2361.383349609375 + x * (-467.08681640625 + 1576.4180053710938 * x)))))));
      s[4] = -5.450592041015625 + x * (-18.039111328125 + x * (243.5280029296875 + x * (153.310693359375 + x * (-1724.7453002929688 + x * (-354.639990234375 + x * (3723.7198974609373 + (233.543408203125 - 2364.6270080566405 * x) * x))))));
      s[5] = 5.450592041015625 + x * (-18.039111328125 + x * (-243.5280029296875 + x * (153.310693359375 + x * (1724.7453002929688 + x * (-354.639990234375 + x * (-3723.7198974609373 + x * (233.543408203125 + 2364.6270080566405 * x)))))));
      s[6] = -0.40374755859375 + x * (23.38857421875 + x * (105.248583984375 + x * (-262.48271484375 + x * (-984.3101806640625 + x * (674.68095703125 + x * (2361.383349609375 + (-467.08681640625 - 1576.4180053710938 * x) * x))))));
      s[7] = 0.06229248046875 + x * (-6.412876674107143 + x * (-17.314767020089285 + x * (134.19580078125 + x * (301.9405517578125 + x * (-432.48779296875 + x * (-908.224365234375 + x * (333.63344029017856 + 675.6077165876117 * x)))))));
      s[8] = -0.007945469447544642 + x * (1.1647705078125 + x * (2.2463431222098214 + x * (-27.5332763671875 + x * (-44.249908447265625 + x * (125.4214599609375 + x * (188.13218994140624 + (-116.7717041015625 - 168.90192914690292 * x) * x))))));
      s[9] = 0.0005340576171875 + x * (-0.10135672433035714 + x * (-0.1520350864955357 + x * (2.5094970703125 + x * (3.136871337890625 + x * (-12.9746337890625 + x * (-15.13707275390625 + x * (16.68167201450893 + 18.766881016322543 * x)))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(11);

      s[0] = -0.003968253968253968 + x * (0.007936507936507936 + x * (0.4236937830687831 + x * (-0.5649250440917107 + x * (-5.8774594907407405 + x * (7.052951388888889 + x * (22.605613425925927 + x * (-25.834986772486772 + x * (-24.220300099206348 + 26.91144455467372 * x))))))));
      s[1] = 0.0496031746031746 + x * (-0.12400793650793651 + x * (-5.212466931216931 + x * (8.687444885361552 + x * (68.72106481481481 + x * (-103.08159722222223 + x * (-235.09837962962962 + x * (335.85482804232805 + (193.76240079365078 - 269.1144455467372 * x) * x)))))));
      s[2] = -0.2976190476190476 + x * (0.9920634920634921 + x * (30.189732142857142 + x * (-67.08829365079364 + x * (-354.00390625 + x * (708.0078125 + x * (935.8723958333334 + x * (-1782.6140873015872 + x * (-653.9481026785714 + 1211.0150049603174 * x))))))));
      s[3] = 1.1904761904761905 + x * (-5.9523809523809526 + x * (-108.35813492063492 + x * (361.1937830687831 + x * (846.3541666666666 + x * (-2539.0625 + x * (-1844.6180555555557 + x * (5270.337301587301 + (1162.5744047619048 - 3229.3733465608466 * x) * x)))))));
      s[4] = -4.166666666666667 + x * (41.666666666666664 + x * (144.87847222222223 + x * (-965.8564814814815 + x * (-876.1935763888889 + x * (5257.161458333333 + x * (1708.984375 + x * (-9765.625 + x * (-1017.2526041666666 + 5651.403356481482 * x))))))));
      s[5] = x * (-73.18055555555556 + x * x * (1327.2569444444443 + x * x * (-6660.15625 + x * x * (11935.763888888889 - 6781.684027777777 * x * x))));
      s[6] = 4.166666666666667 + x * (41.666666666666664 + x * (-144.87847222222223 + x * (-965.8564814814815 + x * (876.1935763888889 + x * (5257.161458333333 + x * (-1708.984375 + x * (-9765.625 + x * (1017.2526041666666 + 5651.403356481482 * x))))))));
      s[7] = -1.1904761904761905 + x * (-5.9523809523809526 + x * (108.35813492063492 + x * (361.1937830687831 + x * (-846.3541666666666 + x * (-2539.0625 + x * (1844.6180555555557 + x * (5270.337301587301 + (-1162.5744047619048 - 3229.3733465608466 * x) * x)))))));
      s[8] = 0.2976190476190476 + x * (0.9920634920634921 + x * (-30.189732142857142 + x * (-67.08829365079364 + x * (354.00390625 + x * (708.0078125 + x * (-935.8723958333334 + x * (-1782.6140873015872 + x * (653.9481026785714 + 1211.0150049603174 * x))))))));
      s[9] = -0.0496031746031746 + x * (-0.12400793650793651 + x * (5.212466931216931 + x * (8.687444885361552 + x * (-68.72106481481481 + x * (-103.08159722222223 + x * (235.09837962962962 + x * (335.85482804232805 + (-193.76240079365078 - 269.1144455467372 * x) * x)))))));
      s[10] = 0.003968253968253968 + x * (0.007936507936507936 + x * (-0.4236937830687831 + x * (-0.5649250440917107 + x * (5.8774594907407405 + x * (7.052951388888889 + x * (-22.605613425925927 + x * (-25.834986772486772 + x * (24.220300099206348 + 26.91144455467372 * x))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(12);

      s[0] = 0.0001201629638671875 + x * (0.03442612663147941 + x * (-0.051639189947219125 + x * (-1.3617789509014688 + x * (1.702223688626836 + x * (12.55480445014106 + x * (-14.647271858497902 + x * (-38.07346712950046 + x * (42.83265052068801 + (34.90067820204208 - 38.39074602224629 * x) * x))))))));
      s[1] = -0.0019745296902126735 + x * (-0.46124456738668773 + x * (0.8456150402089275 + x * (17.856002420092384 + x * (-27.280003697363366 + x * (-156.24424102783203 + x * (222.79271405820492 + x * (425.7305869935051 + x * (-585.3795571160695 + x * (-314.10610381837876 + 422.2982062447092 * x)))))))));
      s[2] = 0.016320092337472097 + x * (2.9448802524142796 + x * (-6.941503452119373 + x * (-109.10330874596113 + x * (214.31007075099507 + x * (857.5111651950413 + x * (-1572.1038028575756 + x * (-1914.057029328523 + x * (3383.779391134353 + (1221.5237370714729 - 2111.491031223546 * x) * x))))))));
      s[3] = -0.09596214294433594 + x * (-12.161688850039528 + x * (40.13357320513044 + x * (401.5939790433046 + x * (-1104.3834423690876 + x * (-2383.3103663126626 + x * (6117.163273535834 + x * (4516.897691272554 + x * (-11179.32178589957 + x * (-2617.5508651531563 + 6334.473093670638 * x)))))))));
      s[4] = 0.5331230163574219 + x * (38.03683881002759 + x * (-209.20261345515175 + x * (-708.2954245915489 + x * (3246.3540293779324 + x * (3378.9844512939453 + x * (-14454.544597201877 + x * (-5752.554760839069 + x * (23729.28838846116 + (3141.0610381837873 - 12668.946187341277 * x) * x))))))));
      s[5] = -6.717350006103516 + x * (-28.393211771647135 + x * (468.48799423217775 + x * (399.3105308250145 + x * (-5490.519798843949 + x * (-1709.4958135986328 + x * (21938.529607849123 + x * (2762.056979031033 + x * (-34180.45511550903 + x * (-1465.8284844857676 + 17736.52466227779 * x)))))))));
      s[6] = 6.717350006103516 + x * (-28.393211771647135 + x * (-468.48799423217775 + x * (399.3105308250145 + x * (5490.519798843949 + x * (-1709.4958135986328 + x * (-21938.529607849123 + x * (2762.056979031033 + x * (34180.45511550903 + (-1465.8284844857676 - 17736.52466227779 * x) * x))))))));
      s[7] = -0.5331230163574219 + x * (38.03683881002759 + x * (209.20261345515175 + x * (-708.2954245915489 + x * (-3246.3540293779324 + x * (3378.9844512939453 + x * (14454.544597201877 + x * (-5752.554760839069 + x * (-23729.28838846116 + x * (3141.0610381837873 + 12668.946187341277 * x)))))))));
      s[8] = 0.09596214294433594 + x * (-12.161688850039528 + x * (-40.13357320513044 + x * (401.5939790433046 + x * (1104.3834423690876 + x * (-2383.3103663126626 + x * (-6117.163273535834 + x * (4516.897691272554 + x * (11179.32178589957 + (-2617.5508651531563 - 6334.473093670638 * x) * x))))))));
      s[9] = -0.016320092337472097 + x * (2.9448802524142796 + x * (6.941503452119373 + x * (-109.10330874596113 + x * (-214.31007075099507 + x * (857.5111651950413 + x * (1572.1038028575756 + x * (-1914.057029328523 + x * (-3383.779391134353 + x * (1221.5237370714729 + 2111.491031223546 * x)))))))));
      s[10] = 0.0019745296902126735 + x * (-0.46124456738668773 + x * (-0.8456150402089275 + x * (17.856002420092384 + x * (27.280003697363366 + x * (-156.24424102783203 + x * (-222.79271405820492 + x * (425.7305869935051 + x * (585.3795571160695 + (-314.10610381837876 - 422.2982062447092 * x) * x))))))));
      s[11] = -0.0001201629638671875 + x * (0.03442612663147941 + x * (0.051639189947219125 + x * (-1.3617789509014688 + x * (-1.702223688626836 + x * (12.55480445014106 + x * (14.647271858497902 + x * (-38.07346712950046 + x * (-42.83265052068801 + x * (34.90067820204208 + 38.39074602224629 * x)))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(13);

      s[0] = 0.0010822510822510823 + x * (-0.0021645021645021645 + x * (-0.17107142857142857 + x * (0.2280952380952381 + x * (3.7232142857142856 + x * (-4.4678571428571425 + x * (-25.11 + x * (28.697142857142858 + x * (62.48571428571429 + x * (-69.42857142857143 + x * (-49.988571428571426 + 54.532987012987014 * x))))))))));
      s[1] = -0.015584415584415584 + x * (0.0374025974025974 + x * (2.442857142857143 + x * (-3.9085714285714284 + x * (-51.857142857142854 + x * (74.67428571428572 + x * (332.1 + x * (-455.45142857142855 + x * (-749.8285714285714 + x * (999.7714285714286 + (499.8857142857143 - 654.3958441558442 * x) * x)))))))));
      s[2] = 0.10714285714285714 + x * (-0.32142857142857145 + x * (-16.534285714285716 + x * (33.06857142857143 + x * (334.82142857142856 + x * (-602.6785714285714 + x * (-1947.24 + x * (3338.1257142857144 + x * (3749.1428571428573 + x * (-6248.571428571428 + x * (-2199.497142857143 + 3599.177142857143 * x))))))))));
      s[3] = -0.47619047619047616 + x * (1.9047619047619047 + x * (70.98571428571428 + x * (-189.2952380952381 + x * (-1290.4285714285713 + x * (3097.0285714285715 + x * (6115.5 + x * (-13978.285714285714 + x * (-10247.657142857142 + x * (22772.571428571428 + (5498.742857142857 - 11997.257142857143 * x) * x)))))))));
      s[4] = 1.6071428571428572 + x * (-9.642857142857142 + x * (-215.46964285714284 + x * (861.8785714285714 + x * (2720.3303571428573 + x * (-9793.189285714287 + x * (-10752.75 + x * (36866.57142857143 + x * (16308.771428571428 + x * (-54362.57142857143 + x * (-8248.114285714286 + 26993.82857142857 * x))))))))));
      s[5] = -5.142857142857143 + x * (61.714285714285715 + x * (272.93142857142857 + x * (-2183.4514285714286 + x * (-2671.714285714286 + x * (19236.342857142856 + x * (9438.12 + x * (-64718.537142857145 + x * (-13496.914285714285 + x * (89979.42857142857 + (6598.4914285714285 - 43190.125714285714 * x) * x)))))))));
      s[6] = x * (-107.38 + x * x * (2962.96 + x * x * (-24015.42 + x * x * (77837.76 + x * x * (-106142.4 + 50388.48 * x * x)))));
      s[7] = 5.142857142857143 + x * (61.714285714285715 + x * (-272.93142857142857 + x * (-2183.4514285714286 + x * (2671.714285714286 + x * (19236.342857142856 + x * (-9438.12 + x * (-64718.537142857145 + x * (13496.914285714285 + x * (89979.42857142857 + (-6598.4914285714285 - 43190.125714285714 * x) * x)))))))));
      s[8] = -1.6071428571428572 + x * (-9.642857142857142 + x * (215.46964285714284 + x * (861.8785714285714 + x * (-2720.3303571428573 + x * (-9793.189285714287 + x * (10752.75 + x * (36866.57142857143 + x * (-16308.771428571428 + x * (-54362.57142857143 + x * (8248.114285714286 + 26993.82857142857 * x))))))))));
      s[9] = 0.47619047619047616 + x * (1.9047619047619047 + x * (-70.98571428571428 + x * (-189.2952380952381 + x * (1290.4285714285713 + x * (3097.0285714285715 + x * (-6115.5 + x * (-13978.285714285714 + x * (10247.657142857142 + x * (22772.571428571428 + (-5498.742857142857 - 11997.257142857143 * x) * x)))))))));
      s[10] = -0.10714285714285714 + x * (-0.32142857142857145 + x * (16.534285714285716 + x * (33.06857142857143 + x * (-334.82142857142856 + x * (-602.6785714285714 + x * (1947.24 + x * (3338.1257142857144 + x * (-3749.1428571428573 + x * (-6248.571428571428 + x * (2199.497142857143 + 3599.177142857143 * x))))))))));
      s[11] = 0.015584415584415584 + x * (0.0374025974025974 + x * (-2.442857142857143 + x * (-3.9085714285714284 + x * (51.857142857142854 + x * (74.67428571428572 + x * (-332.1 + x * (-455.45142857142855 + x * (749.8285714285714 + x * (999.7714285714286 + (-499.8857142857143 - 654.3958441558442 * x) * x)))))))));
      s[12] = -0.0010822510822510823 + x * (-0.0021645021645021645 + x * (0.17107142857142857 + x * (0.2280952380952381 + x * (-3.7232142857142856 + x * (-4.4678571428571425 + x * (25.11 + x * (28.697142857142858 + x * (-62.48571428571429 + x * (-69.42857142857143 + x * (49.988571428571426 + 54.532987012987014 * x))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(14);

      s[0] = -0.00002753734588623047 + x * (-0.011095891065354413 + x * (0.01664383659803162 + x * (0.6395607598005919 + x * (-0.7994509497507399 + x * (-9.114505842030574 + x * (10.633590149035669 + x * (47.80155148184909 + x * (-53.77674541708023 + x * (-100.47838557751861 + x * (110.52622413527047 + (71.24830977314956 - 77.18566892091202 * x) * x))))))))));
      s[1] = 0.0004999962720003995 + x * (0.17013757362567558 + x * (-0.3016075168818794 + x * (-9.691665087312478 + x * (14.317232515347978 + x * (134.46648297028986 + x * (-185.4007568226724 + x * (-670.7035139605945 + x * (891.7308083339722 + x * (1290.76079934197 + x * (-1677.9890391445608 + x * (-783.7314075046452 + 1003.4136959718563 * x)))))))))));
      s[2] = -0.004481448067559136 + x * (-1.2433957364411237 + x * (2.6940240956224346 + x * (69.36896220676482 + x * (-125.24951509554761 + x * (-917.8876004427955 + x * (1546.8105859313775 + x * (4201.377694766332 + x * (-6827.23875399529 + x * (-7095.319843089392 + x * (11273.674861797588 + (3847.408727750076 - 6020.482175831138 * x) * x))))))))));
      s[3] = 0.02716306277683803 + x * (5.821864436114276 + x * (-16.218050929175483 + x * (-311.326152589743 + x * (722.7214256547607 + x * (3740.015548266187 + x * (-8103.367021243405 + x * (-14645.275796943006 + x * (30598.16550432735 + x * (21966.120908562145 + x * (-44873.646998919816 + x * (-10972.239705065032 + 22075.10131138084 * x)))))))))));
      s[4] = -0.13309900760650634 + x * (-20.037530502945028 + x * (78.1463689614856 + x * (959.2905630504714 + x * (-3117.694329914032 + x * (-9000.075229707008 + x * (27300.228196777924 + x * (30334.227948111413 + x * (-88727.61674822588 + x * (-41543.9478830125 + x * (118815.69094541576 + (19593.28518761613 - 55187.753278452095 * x) * x))))))))));
      s[5] = 0.6654950380325317 + x * (56.42131236454797 + x * (-366.73853036956183 + x * (-1571.6601953267295 + x * (8513.159391353118 + x * (11913.41578208015 + x * (-60228.93534273854 + x * (-36088.08588204944 + x * (175929.41867499103 + x * (46536.95073555689 + x * (-221826.13183948785 + x * (-21160.74800262542 + 99337.95590121378 * x)))))))))));
      s[6] = -7.985940456390381 + x * (-41.121292243836415 + x * (801.8651987548102 + x * (863.3789269867482 + x * (-14029.907563534658 + x * (-5860.8204773247935 + x * (88889.11057275937 + x * (16820.657998593448 + x * (-246002.12322942915 + x * (-21054.086331781593 + x * (301073.4345444768 + (9404.776890055742 - 132450.60786828503 * x) * x))))))))));
      s[7] = 7.985940456390381 + x * (-41.121292243836415 + x * (-801.8651987548102 + x * (863.3789269867482 + x * (14029.907563534658 + x * (-5860.8204773247935 + x * (-88889.11057275937 + x * (16820.657998593448 + x * (246002.12322942915 + x * (-21054.086331781593 + x * (-301073.4345444768 + x * (9404.776890055742 + 132450.60786828503 * x)))))))))));
      s[8] = -0.6654950380325317 + x * (56.42131236454797 + x * (366.73853036956183 + x * (-1571.6601953267295 + x * (-8513.159391353118 + x * (11913.41578208015 + x * (60228.93534273854 + x * (-36088.08588204944 + x * (-175929.41867499103 + x * (46536.95073555689 + x * (221826.13183948785 + (-21160.74800262542 - 99337.95590121378 * x) * x))))))))));
      s[9] = 0.13309900760650634 + x * (-20.037530502945028 + x * (-78.1463689614856 + x * (959.2905630504714 + x * (3117.694329914032 + x * (-9000.075229707008 + x * (-27300.228196777924 + x * (30334.227948111413 + x * (88727.61674822588 + x * (-41543.9478830125 + x * (-118815.69094541576 + x * (19593.28518761613 + 55187.753278452095 * x)))))))))));
      s[10] = -0.02716306277683803 + x * (5.821864436114276 + x * (16.218050929175483 + x * (-311.326152589743 + x * (-722.7214256547607 + x * (3740.015548266187 + x * (8103.367021243405 + x * (-14645.275796943006 + x * (-30598.16550432735 + x * (21966.120908562145 + x * (44873.646998919816 + (-10972.239705065032 - 22075.10131138084 * x) * x))))))))));
      s[11] = 0.004481448067559136 + x * (-1.2433957364411237 + x * (-2.6940240956224346 + x * (69.36896220676482 + x * (125.24951509554761 + x * (-917.8876004427955 + x * (-1546.8105859313775 + x * (4201.377694766332 + x * (6827.23875399529 + x * (-7095.319843089392 + x * (-11273.674861797588 + x * (3847.408727750076 + 6020.482175831138 * x)))))))))));
      s[12] = -0.0004999962720003995 + x * (0.17013757362567558 + x * (0.3016075168818794 + x * (-9.691665087312478 + x * (-14.317232515347978 + x * (134.46648297028986 + x * (185.4007568226724 + x * (-670.7035139605945 + x * (-891.7308083339722 + x * (1290.76079934197 + x * (1677.9890391445608 + (-783.7314075046452 - 1003.4136959718563 * x) * x))))))))));
      s[13] = 0.00002753734588623047 + x * (-0.011095891065354413 + x * (-0.01664383659803162 + x * (0.6395607598005919 + x * (0.7994509497507399 + x * (-9.114505842030574 + x * (-10.633590149035669 + x * (47.80155148184909 + x * (53.77674541708023 + x * (-100.47838557751861 + x * (-110.52622413527047 + x * (71.24830977314956 + 77.18566892091202 * x)))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(15);

      s[0] = -0.0002913752913752914 + x * (0.0005827505827505828 + x * (0.0638794191919192 + x * (-0.08517255892255893 + x * (-1.9992894804526748 + x * (2.39914737654321 + x * (20.58592729230967 + x * (-23.52677404835391 + x * (-87.57293185763889 + x * (97.30325761959877 + x * (158.92865411201132 + x * (-173.37671357673963 + x * (-101.1364162530981 + 108.91614058025951 * x))))))))))));
      s[1] = 0.004759129759129759 + x * (-0.011104636104636105 + x * (-1.0382081228956228 + x * (1.6149904133931912 + x * (32.0388069058642 + x * (-44.85432966820988 + x * (-320.90217206790123 + x * (427.86956275720166 + x * (1301.0835590277777 + x * (-1686.589798739712 + x * (-2179.5929706790125 + x * (2774.027417227834 + (1213.6369950371773 - 1524.825968123633 * x) * x)))))))))));
      s[2] = -0.037121212121212124 + x * (0.10393939393939394 + x * (8.031328914141413 + x * (-14.991813973063973 + x * (-242.03753536522635 + x * (406.6230594135802 + x * (2315.08941173161 + x * (-3704.1430587705763 + x * (-8694.741091579861 + x * (13525.152809124229 + x * (13054.8537306295 + x * (-19938.322061325056 + x * (-6573.867056451377 + 9911.368792803614 * x))))))))))));
      s[3] = 0.1856060606060606 + x * (-0.6496212121212122 + x * (-39.542752525252524 + x * (92.26642255892256 + x * (1139.5332497427983 + x * (-2393.0198244598764 + x * (-10010.453235596708 + x * (20020.906471193415 + x * (33227.672430555554 + x * (-64609.36305941358 + x * (-45044.92139403292 + x * (85994.84993406285 + (21036.374580644406 - 39645.47517121446 * x) * x)))))))))));
      s[4] = -0.6805555555555556 + x * (3.175925925925926 + x * (140.1269560185185 + x * (-435.95052983539097 + x * (-3646.8198013117285 + x * (10211.095443672839 + x * (26822.536564187885 + x * (-71526.7641711677 + x * (-78602.9615516493 + x * (203785.45587464634 + x * (98149.79596088927 + x * (-249835.8442640818 + x * (-43387.52257257909 + 109025.05672083977 * x))))))))))));
      s[5] = 2.0416666666666665 + x * (-14.291666666666666 + x * (-378.69684027777777 + x * (1767.2519212962964 + x * (7023.29938432356 + x * (-29497.85741415895 + x * (-43408.63804140947 + x * (173634.55216563787 + x * (115396.10335069445 + x * (-448762.6241415895 + x * (-135861.2951723251 + x * (518743.1270216049 + (57850.03009677212 - 218050.11344167954 * x) * x)))))))))));
      s[6] = -6.125 + x * (85.75 + x * (460.80927083333336 + x * (-4300.886527777778 + x * (-6632.322501929012 + x * (55711.5090162037 + x * (36597.343815345295 + x * (-292778.75052276236 + x * (-91613.79714192708 + x * (712551.7555483218 + x * (104143.67663025655 + x * (-795278.9851765046 + x * (-43387.52257257909 + 327075.17016251927 * x))))))))))));
      s[7] = x * (-148.1561111111111 + x * x * (5781.561419753087 + x * x * (-68791.79019675926 + x * x * (347899.712654321 + x * x * (-829802.1809799382 + x * x * (915429.0476851852 - 373800.19447145064 * x * x))))));
      s[8] = 6.125 + x * (85.75 + x * (-460.80927083333336 + x * (-4300.886527777778 + x * (6632.322501929012 + x * (55711.5090162037 + x * (-36597.343815345295 + x * (-292778.75052276236 + x * (91613.79714192708 + x * (712551.7555483218 + x * (-104143.67663025655 + x * (-795278.9851765046 + x * (43387.52257257909 + 327075.17016251927 * x))))))))))));
      s[9] = -2.0416666666666665 + x * (-14.291666666666666 + x * (378.69684027777777 + x * (1767.2519212962964 + x * (-7023.29938432356 + x * (-29497.85741415895 + x * (43408.63804140947 + x * (173634.55216563787 + x * (-115396.10335069445 + x * (-448762.6241415895 + x * (135861.2951723251 + x * (518743.1270216049 + (-57850.03009677212 - 218050.11344167954 * x) * x)))))))))));
      s[10] = 0.6805555555555556 + x * (3.175925925925926 + x * (-140.1269560185185 + x * (-435.95052983539097 + x * (3646.8198013117285 + x * (10211.095443672839 + x * (-26822.536564187885 + x * (-71526.7641711677 + x * (78602.9615516493 + x * (203785.45587464634 + x * (-98149.79596088927 + x * (-249835.8442640818 + x * (43387.52257257909 + 109025.05672083977 * x))))))))))));
      s[11] = -0.1856060606060606 + x * (-0.6496212121212122 + x * (39.542752525252524 + x * (92.26642255892256 + x * (-1139.5332497427983 + x * (-2393.0198244598764 + x * (10010.453235596708 + x * (20020.906471193415 + x * (-33227.672430555554 + x * (-64609.36305941358 + x * (45044.92139403292 + x * (85994.84993406285 + (-21036.374580644406 - 39645.47517121446 * x) * x)))))))))));
      s[12] = 0.037121212121212124 + x * (0.10393939393939394 + x * (-8.031328914141413 + x * (-14.991813973063973 + x * (242.03753536522635 + x * (406.6230594135802 + x * (-2315.08941173161 + x * (-3704.1430587705763 + x * (8694.741091579861 + x * (13525.152809124229 + x * (-13054.8537306295 + x * (-19938.322061325056 + x * (6573.867056451377 + 9911.368792803614 * x))))))))))));
      s[13] = -0.004759129759129759 + x * (-0.011104636104636105 + x * (1.0382081228956228 + x * (1.6149904133931912 + x * (-32.0388069058642 + x * (-44.85432966820988 + x * (320.90217206790123 + x * (427.86956275720166 + x * (-1301.0835590277777 + x * (-1686.589798739712 + x * (2179.5929706790125 + x * (2774.027417227834 + (-1213.6369950371773 - 1524.825968123633 * x) * x)))))))))));
      s[14] = 0.0002913752913752914 + x * (0.0005827505827505828 + x * (-0.0638794191919192 + x * (-0.08517255892255893 + x * (1.9992894804526748 + x * (2.39914737654321 + x * (-20.58592729230967 + x * (-23.52677404835391 + x * (87.57293185763889 + x * (97.30325761959877 + x * (-158.92865411201132 + x * (-173.37671357673963 + x * (101.1364162530981 + 108.91614058025951 * x))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(16);

      s[0] = 6.3925981521606445e-6 + x * (0.0034463836474636633 + x * (-0.005169575471195495 + x * (-0.2722968206261144 + x * (0.34037102578264294 + x * (5.518716893025807 + x * (-6.4385030418634415 + x * (-43.727875668175365 + x * (49.19386012669729 + x * (155.58907762169838 + x * (-171.14798538386822 + x * (-247.98731380081796 + x * (268.65292328421947 + (143.06960411585652 - 153.28886155270342 * x) * x))))))))))));
      s[1] = -0.0001276628329203679 + x * (-0.059575623450783495 + x * (0.1031116559725099 + x * (4.673494166368014 + x * (-6.740616586107712 + x * (-93.25233687247548 + x * (125.531991943717 + x * (718.6469298844435 + x * (-932.8589955230757 + x * (-2442.9505823978357 + x * (3100.6680468895606 + x * (3620.6147814919423 + x * (-4525.768476864928 + x * (-1859.9048535061347 + 2299.332923290551 * x)))))))))))));
      s[2] = 0.001248141581361944 + x * (0.4918860619539743 + x * (-1.006130581269493 + x * (-38.145544486386434 + x * (65.02081446543143 + x * (742.2641531697342 + x * (-1180.874789133668 + x * (-5474.285621728216 + x * (8398.051806060332 + x * (17379.50203408088 + x * (-26069.25305112132 + x * (-23459.599885557378 + x * (34656.22710366431 + (11016.359516920951 - 16095.330463033859 * x) * x))))))))))));
      s[3] = -0.008079533775647482 + x * (-2.59627126060523 + x * (6.490678151513075 + x * (197.29504161453866 + x * (-411.0313366969555 + x * (-3672.7019372795307 + x * (7141.364878043532 + x * (25137.741916946 + x * (-47133.26609427376 + x * (-72154.93990640555 + x * (132284.05649507683 + x * (89126.64058001398 + x * (-160923.10104724744 + x * (-39058.00192362883 + 69746.43200648006 * x)))))))))))));
      s[4] = 0.040067891989435465 + x * (9.946349330923773 + x * (-31.97040856368356 + x * (-725.2855202013797 + x * (1942.729071967981 + x * (12341.360170394182 + x * (-30853.400425985456 + x * (-73867.6842302084 + x * (178073.88162639525 + x * (190992.66501143575 + x * (-450196.99609838426 + x * (-219071.9930116426 + x * (508559.98377702746 + (91135.3378218006 - 209239.29601944017 * x) * x))))))))))));
      s[5] = -0.17277275025844574 + x * (-30.1270156119551 + x * (135.57157025379794 + x * (1972.9327165654727 + x * (-7398.497687120523 + x * (-26763.21190116661 + x * (93671.24165408313 + x * (139076.71639961857 + x * (-469383.91784871265 + x * (-329519.48066641175 + x * (1.0874142861991588e6 + x * (357349.7191869787 + x * (-1.1613865873576808e6 + x * (-143212.67371997237 + 460326.4512427683 * x)))))))))))));
      s[6] = 0.7998738437891006 + x * (78.5669618774028 + x * (-589.2522140805211 + x * (-3058.371343853928 + x * (19114.820899087048 + x * (33638.30675770129 + x * (-196223.4560865909 + x * (-157154.38367000647 + x * (883993.4081437865 + x * (350404.78854041017 + x * (-1.9272263369722557e6 + x * (-366078.8726327675 + x * (1.9829272267608237e6 + (143212.67371997237 - 767210.7520712806 * x) * x))))))))))));
      s[7] = -9.255683049559593 + x * (-56.225781157916906 + x * (1265.0800760531304 + x * (1647.1734530159406 + x * (-30884.502244048886 + x * (-16198.28362283962 + x * (283469.96339969337 + x * (71606.97615116226 + x * (-1.2083677225508632e6 + x * (-154815.1735083333 + x * (2.5544503628874994e6 + x * (158761.47829528365 + x * (-2.5798740222983593e6 + x * (-61376.86016570245 + 986413.8240916465 * x)))))))))))));
      s[8] = 9.255683049559593 + x * (-56.225781157916906 + x * (-1265.0800760531304 + x * (1647.1734530159406 + x * (30884.502244048886 + x * (-16198.28362283962 + x * (-283469.96339969337 + x * (71606.97615116226 + x * (1.2083677225508632e6 + x * (-154815.1735083333 + x * (-2.5544503628874994e6 + x * (158761.47829528365 + x * (2.5798740222983593e6 + (-61376.86016570245 - 986413.8240916465 * x) * x))))))))))));
      s[9] = -0.7998738437891006 + x * (78.5669618774028 + x * (589.2522140805211 + x * (-3058.371343853928 + x * (-19114.820899087048 + x * (33638.30675770129 + x * (196223.4560865909 + x * (-157154.38367000647 + x * (-883993.4081437865 + x * (350404.78854041017 + x * (1.9272263369722557e6 + x * (-366078.8726327675 + x * (-1.9829272267608237e6 + x * (143212.67371997237 + 767210.7520712806 * x)))))))))))));
      s[10] = 0.17277275025844574 + x * (-30.1270156119551 + x * (-135.57157025379794 + x * (1972.9327165654727 + x * (7398.497687120523 + x * (-26763.21190116661 + x * (-93671.24165408313 + x * (139076.71639961857 + x * (469383.91784871265 + x * (-329519.48066641175 + x * (-1.0874142861991588e6 + x * (357349.7191869787 + x * (1.1613865873576808e6 + (-143212.67371997237 - 460326.4512427683 * x) * x))))))))))));
      s[11] = -0.040067891989435465 + x * (9.946349330923773 + x * (31.97040856368356 + x * (-725.2855202013797 + x * (-1942.729071967981 + x * (12341.360170394182 + x * (30853.400425985456 + x * (-73867.6842302084 + x * (-178073.88162639525 + x * (190992.66501143575 + x * (450196.99609838426 + x * (-219071.9930116426 + x * (-508559.98377702746 + x * (91135.3378218006 + 209239.29601944017 * x)))))))))))));
      s[12] = 0.008079533775647482 + x * (-2.59627126060523 + x * (-6.490678151513075 + x * (197.29504161453866 + x * (411.0313366969555 + x * (-3672.7019372795307 + x * (-7141.364878043532 + x * (25137.741916946 + x * (47133.26609427376 + x * (-72154.93990640555 + x * (-132284.05649507683 + x * (89126.64058001398 + x * (160923.10104724744 + (-39058.00192362883 - 69746.43200648006 * x) * x))))))))))));
      s[13] = -0.001248141581361944 + x * (0.4918860619539743 + x * (1.006130581269493 + x * (-38.145544486386434 + x * (-65.02081446543143 + x * (742.2641531697342 + x * (1180.874789133668 + x * (-5474.285621728216 + x * (-8398.051806060332 + x * (17379.50203408088 + x * (26069.25305112132 + x * (-23459.599885557378 + x * (-34656.22710366431 + x * (11016.359516920951 + 16095.330463033859 * x)))))))))))));
      s[14] = 0.0001276628329203679 + x * (-0.059575623450783495 + x * (-0.1031116559725099 + x * (4.673494166368014 + x * (6.740616586107712 + x * (-93.25233687247548 + x * (-125.531991943717 + x * (718.6469298844435 + x * (932.8589955230757 + x * (-2442.9505823978357 + x * (-3100.6680468895606 + x * (3620.6147814919423 + x * (4525.768476864928 + (-1859.9048535061347 - 2299.332923290551 * x) * x))))))))))));
      s[15] = -6.3925981521606445e-6 + x * (0.0034463836474636633 + x * (0.005169575471195495 + x * (-0.2722968206261144 + x * (-0.34037102578264294 + x * (5.518716893025807 + x * (6.4385030418634415 + x * (-43.727875668175365 + x * (-49.19386012669729 + x * (155.58907762169838 + x * (171.14798538386822 + x * (-247.98731380081796 + x * (-268.65292328421947 + x * (143.06960411585652 + 153.28886155270342 * x)))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(17);

      s[0] = 0.0000777000777000777 + x * (-0.0001554001554001554 + x * (-0.02255361569647284 + x * (0.030071487595297118 + x * (0.957953432027506 + x * (-1.1495441184330073 + x * (-13.894935528120714 + x * (15.879926317852243 + x * (88.50414714033762 + x * (-98.3379412670418 + x * (-269.59273211836177 + x * (294.1011623109401 + x * (382.5706176402473 + x * (-411.9991266894971 + x * (-201.79549062342713 + 215.2485233316556 * x))))))))))))));
      s[1] = -0.0014208014208014208 + x * (0.003247546104688962 + x * (0.4111041551041551 + x * (-0.6264444268253792 + x * (-17.30929043521636 + x * (23.73845545401101 + x * (246.9511550068587 + x * (-322.5484473558971 + x * (-1530.3291710758378 + x * (1943.2751378740797 + x * (4464.718661179698 + x * (-5566.402486665598 + x * (-5929.844573423833 + x * (7298.270244213948 + (2825.1368687279796 - 3443.9763733064897 * x) * x)))))))))))));
      s[2] = 0.012432012432012432 + x * (-0.033152033152033154 + x * (-3.5795704824276253 + x * (6.363680857649111 + x * (148.68071188071187 + x * (-237.889139009139 + x * (-2067.7214814814815 + x * (3150.8136860670193 + x * (12292.829750566894 + x * (-18211.59963046947 + x * (-33731.968677248675 + x * (49064.681712361715 + x * (41317.62670514671 + x * (-59327.87424328757 + x * (-18161.59415610844 + 25829.822799798672 * x))))))))))))));
      s[3] = -0.06961926961926962 + x * (0.22278166278166278 + x * (19.882221482221482 + x * (-42.41540582873916 + x * (-807.1755295459 + x * (1549.7770167281278 + x * (10758.601920438958 + x * (-19672.87208308838 + x * (-59895.51181657848 + x * (106480.90989613952 + x * (151070.56147364294 + x * (-263686.7982085404 + x * (-171200.35139401065 + x * (294991.3747096799 + (70628.42171819949 - 120539.17306572714 * x) * x)))))))))))));
      s[4] = 0.2828282828282828 + x * (-1.1313131313131313 + x * (-79.54970658970659 + x * (212.13255090588424 + x * (3093.4443838740135 + x * (-7424.266521297633 + x * (-38136.00746227709 + x * (87168.01705663335 + x * (191055.35548500883 + x * (-424567.4566333529 + x * (-441014.25715069566 + x * (962212.9246924269 + x * (467501.2947563822 + x * (-1.0069258656291309e6 + x * (-183633.8964673187 + 391752.3124636132 * x))))))))))))));
      s[5] = -0.9050505050505051 + x * (4.826936026936027 + x * (246.11192303992303 + x * (-875.0646152530597 + x * (-8679.200384800384 + x * (27773.44123136123 + x * (91063.48562962963 + x * (-277526.81334744266 + x * (-406406.4203174603 + x * (1.2041671713109936e6 + x * (867976.8150687831 + x * (-2.525023462018278e6 + x * (-872834.8641462241 + x * (2.5066026867789e6 + (330541.01364117366 - 940205.5499126717 * x) * x)))))))))))));
      s[6] = 2.488888888888889 + x * (-19.91111111111111 + x * (-610.437417989418 + x * (3255.666229276896 + x * (15610.895551636293 + x * (-74932.2986478542 + x * (-138357.74454869685 + x * (632492.5465083284 + x * (560997.40670194 + x * (-2.493321807564178e6 + x * (-1.1299354700654517e6 + x * (4.930627505740153e6 + x * (1.0941519664511073e6 + x * (-4.713270009327847e6 + x * (-403994.57222810114 + 1.723710174839898e6 * x))))))))))))));
      s[7] = -7.111111111111111 + x * (113.77777777777777 + x * (720.1069085411942 + x * (-7681.140357772739 + x * (-14300.672702331962 + x * (137286.45794238683 + x * (113064.88274348422 + x * (-1.03373607079757e6 + x * (-431272.12279163516 + x * (3.8335299803700903e6 + x * (837940.2394513031 + x * (-7.312932998847737e6 + x * (-793260.1756770527 + x * (6.834241513525377e6 + (288567.5515915008 - 2.4624431069141403e6 * x) * x)))))))))))));
      s[8] = x * (-195.51002267573696 + x * x * (10250.108581506676 + x * x * (-168075.62158730158 + x * x * (1.2168620949962207e6 + x * x * (-4.419844269891661e6 + x * x * (8.3300208965079365e6 + x * x * (-7.726396193862434e6 + 2.770248495278408e6 * x * x)))))));
      s[9] = 7.111111111111111 + x * (113.77777777777777 + x * (-720.1069085411942 + x * (-7681.140357772739 + x * (14300.672702331962 + x * (137286.45794238683 + x * (-113064.88274348422 + x * (-1.03373607079757e6 + x * (431272.12279163516 + x * (3.8335299803700903e6 + x * (-837940.2394513031 + x * (-7.312932998847737e6 + x * (793260.1756770527 + x * (6.834241513525377e6 + (-288567.5515915008 - 2.4624431069141403e6 * x) * x)))))))))))));
      s[10] = -2.488888888888889 + x * (-19.91111111111111 + x * (610.437417989418 + x * (3255.666229276896 + x * (-15610.895551636293 + x * (-74932.2986478542 + x * (138357.74454869685 + x * (632492.5465083284 + x * (-560997.40670194 + x * (-2.493321807564178e6 + x * (1.1299354700654517e6 + x * (4.930627505740153e6 + x * (-1.0941519664511073e6 + x * (-4.713270009327847e6 + x * (403994.57222810114 + 1.723710174839898e6 * x))))))))))))));
      s[11] = 0.9050505050505051 + x * (4.826936026936027 + x * (-246.11192303992303 + x * (-875.0646152530597 + x * (8679.200384800384 + x * (27773.44123136123 + x * (-91063.48562962963 + x * (-277526.81334744266 + x * (406406.4203174603 + x * (1.2041671713109936e6 + x * (-867976.8150687831 + x * (-2.525023462018278e6 + x * (872834.8641462241 + x * (2.5066026867789e6 + (-330541.01364117366 - 940205.5499126717 * x) * x)))))))))))));
      s[12] = -0.2828282828282828 + x * (-1.1313131313131313 + x * (79.54970658970659 + x * (212.13255090588424 + x * (-3093.4443838740135 + x * (-7424.266521297633 + x * (38136.00746227709 + x * (87168.01705663335 + x * (-191055.35548500883 + x * (-424567.4566333529 + x * (441014.25715069566 + x * (962212.9246924269 + x * (-467501.2947563822 + x * (-1.0069258656291309e6 + x * (183633.8964673187 + 391752.3124636132 * x))))))))))))));
      s[13] = 0.06961926961926962 + x * (0.22278166278166278 + x * (-19.882221482221482 + x * (-42.41540582873916 + x * (807.1755295459 + x * (1549.7770167281278 + x * (-10758.601920438958 + x * (-19672.87208308838 + x * (59895.51181657848 + x * (106480.90989613952 + x * (-151070.56147364294 + x * (-263686.7982085404 + x * (171200.35139401065 + x * (294991.3747096799 + (-70628.42171819949 - 120539.17306572714 * x) * x)))))))))))));
      s[14] = -0.012432012432012432 + x * (-0.033152033152033154 + x * (3.5795704824276253 + x * (6.363680857649111 + x * (-148.68071188071187 + x * (-237.889139009139 + x * (2067.7214814814815 + x * (3150.8136860670193 + x * (-12292.829750566894 + x * (-18211.59963046947 + x * (33731.968677248675 + x * (49064.681712361715 + x * (-41317.62670514671 + x * (-59327.87424328757 + x * (18161.59415610844 + 25829.822799798672 * x))))))))))))));
      s[15] = 0.0014208014208014208 + x * (0.003247546104688962 + x * (-0.4111041551041551 + x * (-0.6264444268253792 + x * (17.30929043521636 + x * (23.73845545401101 + x * (-246.9511550068587 + x * (-322.5484473558971 + x * (1530.3291710758378 + x * (1943.2751378740797 + x * (-4464.718661179698 + x * (-5566.402486665598 + x * (5929.844573423833 + x * (7298.270244213948 + (-2825.1368687279796 - 3443.9763733064897 * x) * x)))))))))))));
      s[16] = -0.0000777000777000777 + x * (-0.0001554001554001554 + x * (0.02255361569647284 + x * (0.030071487595297118 + x * (-0.957953432027506 + x * (-1.1495441184330073 + x * (13.894935528120714 + x * (15.879926317852243 + x * (-88.50414714033762 + x * (-98.3379412670418 + x * (269.59273211836177 + x * (294.1011623109401 + x * (-382.5706176402473 + x * (-411.9991266894971 + x * (201.79549062342713 + 215.2485233316556 * x))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(18);

      s[0] = -1.498265191912651e-6 + x * (-0.0010413539540093204 + x * (0.0015620309310139806 + x * (0.10795459987385797 + x * (-0.13494324984232248 + x * (-2.943771290975128 + x * (3.4343998394709825 + x * (32.58936393657614 + x * (-36.66303442864816 + x * (-172.2747730509057 + x * (189.5022503559963 + x * (457.4957726402483 + x * (-495.620420360269 + x * (-584.5105141159671 + x * (626.2612651242505 + (283.9051068563269 - 301.64917603484736 * x) * x))))))))))))));
      s[1] = 0.000032715452834963796 + x * (0.02004699763954869 + x * (-0.03407989598723277 + x * (-2.0685536204390043 + x * (2.9304509622885897 + x * (55.85113483376281 + x * (-73.84761161353083 + x * (-607.8603856486691 + x * (775.0219917020529 + x * (3128.0675230729626 + x * (-3899.6575120976263 + x * (-7976.016563575932 + x * (9792.775891946005 + x * (9592.849025785577 + x * (-11648.45953131106 + x * (-4258.576602844903 + 5128.035992592404 * x)))))))))))))));
      s[2] = -0.0003484486100765375 + x * (-0.18482238978264234 + x * (0.3625362261121061 + x * (18.93759752306341 + x * (-30.95568825885365 + x * (-503.7607489704939 + x * (768.5580657370356 + x * (5345.329982858974 + x * (-7863.802763244452 + x * (-26457.233879333628 + x * (38057.713349502985 + x * (63837.82797458005 + x * (-90436.9229639884 + x * (-71516.5805506595 + x * (100201.80241988008 + (29526.131113058 - 41024.28794073923 * x) * x))))))))))))));
      s[3] = 0.0024333807893774724 + x * (1.0899960593405391 + x * (-2.5268090466530677 + x * (-110.43244905160826 + x * (213.33541294060686 + x * (2868.171496499709 + x * (-5171.400122476748 + x * (-29239.405327859477 + x * (50836.69335411932 + x * (136560.36664613814 + x * (-232152.6232984348 + x * (-306642.80549948005 + x * (513394.39405594766 + x * (320724.35739257303 + x * (-531069.5528253644 + x * (-124918.24701678383 + 205121.43970369617 * x)))))))))))))));
      s[4] = -0.012722676102485921 + x * (-4.646872179006905 + x * (13.166137840519566 + x * (461.519668348476 + x * (-1089.6992169339017 + x * (-11491.876341527393 + x * (25324.69045632888 + x * (109483.30622375132 + x * (-232652.02572547155 + x * (-469322.9038920702 + x * (975148.7003090793 + x * (976665.3161723241 + x * (-1.9985466192044779e6 + x * (-961760.4765206961 + x * (1.9464200120061706e6 + (357720.43463897187 - 717925.0389629366 * x) * x))))))))))))));
      s[5] = 0.05468154259558235 + x * (15.428903015424506 + x * (-56.20528955618928 + x * (-1471.6425808783813 + x * (4467.486406237944 + x * (33652.97573866587 + x * (-95350.09792621995 + x * (-284093.11809882545 + x * (776182.9833771479 + x * (1.1066744723208454e6 + x * (-2.956401804628544e6 + x * (-2.1494357776944004e6 + x * (5.655063177029315e6 + x * (2.0149796570148317e6 + x * (-5.243059311620225e6 + x * (-723390.212269921 + 1.8666051013036352e6 * x)))))))))))))));
      s[6] = -0.2143516469746828 + x * (-42.487006223060696 + x * (216.68373173760955 + x * (3647.8942678917533 + x * (-15503.550638539951 + x * (-67428.53453792304 + x * (267466.5203337614 + x * (497168.726977862 + x * (-1.9016703806903223e6 + x * (-1.7790940698511568e6 + x * (6.653811821243326e6 + x * (3.2699533549044537e6 + x * (-1.2044328190564739e7 + x * (-2.953634776742238e6 + x * (1.0759669543846723e7 + (1.03341458895703e6 - 3.7332102026072703e6 * x) * x))))))))))))));
      s[7] = 0.9356619510799646 + x * (104.48882447046847 + x * (-888.1550079989821 + x * (-5416.1936783231085 + x * (38364.70522145535 + x * (81385.0598690623 + x * (-538045.6735788007 + x * (-539594.5106038471 + x * (3.439915005099525e6 + x * (1.8162768275068246e6 + x * (-1.1321458891459206e7 + x * (-3.2139922492791037e6 + x * (1.97303413080745e7 + x * (2.8320565898061167e6 + x * (-1.719462929525142e7 + x * (-974362.326730914 + 5.866473175525711e6 * x)))))))))))))));
      s[8] = -10.526196949649602 + x * (-73.70802839706882 + x * (1879.554724125255 + x * (2871.87777351037 + x * (-61027.40268709537 + x * (-38534.94283934975 + x * (764276.3663137701 + x * (241504.94186777182 + x * (-4.618782013221135e6 + x * (-787593.2516012694 + x * (1.4727993804943737e7 + x * (1.367132854212562e6 + x * (-2.5178030065081347e7 + x * (-1.1898571089115976e6 + x * (2.167239734088981e7 + (405984.3028045475 - 7.333091469407138e6 * x) * x))))))))))))));
      s[9] = 10.526196949649602 + x * (-73.70802839706882 + x * (-1879.554724125255 + x * (2871.87777351037 + x * (61027.40268709537 + x * (-38534.94283934975 + x * (-764276.3663137701 + x * (241504.94186777182 + x * (4.618782013221135e6 + x * (-787593.2516012694 + x * (-1.4727993804943737e7 + x * (1.367132854212562e6 + x * (2.5178030065081347e7 + x * (-1.1898571089115976e6 + x * (-2.167239734088981e7 + x * (405984.3028045475 + 7.333091469407138e6 * x)))))))))))))));
      s[10] = -0.9356619510799646 + x * (104.48882447046847 + x * (888.1550079989821 + x * (-5416.1936783231085 + x * (-38364.70522145535 + x * (81385.0598690623 + x * (538045.6735788007 + x * (-539594.5106038471 + x * (-3.439915005099525e6 + x * (1.8162768275068246e6 + x * (1.1321458891459206e7 + x * (-3.2139922492791037e6 + x * (-1.97303413080745e7 + x * (2.8320565898061167e6 + x * (1.719462929525142e7 + (-974362.326730914 - 5.866473175525711e6 * x) * x))))))))))))));
      s[11] = 0.2143516469746828 + x * (-42.487006223060696 + x * (-216.68373173760955 + x * (3647.8942678917533 + x * (15503.550638539951 + x * (-67428.53453792304 + x * (-267466.5203337614 + x * (497168.726977862 + x * (1.9016703806903223e6 + x * (-1.7790940698511568e6 + x * (-6.653811821243326e6 + x * (3.2699533549044537e6 + x * (1.2044328190564739e7 + x * (-2.953634776742238e6 + x * (-1.0759669543846723e7 + x * (1.03341458895703e6 + 3.7332102026072703e6 * x)))))))))))))));
      s[12] = -0.05468154259558235 + x * (15.428903015424506 + x * (56.20528955618928 + x * (-1471.6425808783813 + x * (-4467.486406237944 + x * (33652.97573866587 + x * (95350.09792621995 + x * (-284093.11809882545 + x * (-776182.9833771479 + x * (1.1066744723208454e6 + x * (2.956401804628544e6 + x * (-2.1494357776944004e6 + x * (-5.655063177029315e6 + x * (2.0149796570148317e6 + x * (5.243059311620225e6 + (-723390.212269921 - 1.8666051013036352e6 * x) * x))))))))))))));
      s[13] = 0.012722676102485921 + x * (-4.646872179006905 + x * (-13.166137840519566 + x * (461.519668348476 + x * (1089.6992169339017 + x * (-11491.876341527393 + x * (-25324.69045632888 + x * (109483.30622375132 + x * (232652.02572547155 + x * (-469322.9038920702 + x * (-975148.7003090793 + x * (976665.3161723241 + x * (1.9985466192044779e6 + x * (-961760.4765206961 + x * (-1.9464200120061706e6 + x * (357720.43463897187 + 717925.0389629366 * x)))))))))))))));
      s[14] = -0.0024333807893774724 + x * (1.0899960593405391 + x * (2.5268090466530677 + x * (-110.43244905160826 + x * (-213.33541294060686 + x * (2868.171496499709 + x * (5171.400122476748 + x * (-29239.405327859477 + x * (-50836.69335411932 + x * (136560.36664613814 + x * (232152.6232984348 + x * (-306642.80549948005 + x * (-513394.39405594766 + x * (320724.35739257303 + x * (531069.5528253644 + (-124918.24701678383 - 205121.43970369617 * x) * x))))))))))))));
      s[15] = 0.0003484486100765375 + x * (-0.18482238978264234 + x * (-0.3625362261121061 + x * (18.93759752306341 + x * (30.95568825885365 + x * (-503.7607489704939 + x * (-768.5580657370356 + x * (5345.329982858974 + x * (7863.802763244452 + x * (-26457.233879333628 + x * (-38057.713349502985 + x * (63837.82797458005 + x * (90436.9229639884 + x * (-71516.5805506595 + x * (-100201.80241988008 + x * (29526.131113058 + 41024.28794073923 * x)))))))))))))));
      s[16] = -0.000032715452834963796 + x * (0.02004699763954869 + x * (0.03407989598723277 + x * (-2.0685536204390043 + x * (-2.9304509622885897 + x * (55.85113483376281 + x * (73.84761161353083 + x * (-607.8603856486691 + x * (-775.0219917020529 + x * (3128.0675230729626 + x * (3899.6575120976263 + x * (-7976.016563575932 + x * (-9792.775891946005 + x * (9592.849025785577 + x * (11648.45953131106 + (-4258.576602844903 - 5128.035992592404 * x) * x))))))))))))));
      s[17] = 1.498265191912651e-6 + x * (-0.0010413539540093204 + x * (-0.0015620309310139806 + x * (0.10795459987385797 + x * (0.13494324984232248 + x * (-2.943771290975128 + x * (-3.4343998394709825 + x * (32.58936393657614 + x * (36.66303442864816 + x * (-172.2747730509057 + x * (-189.5022503559963 + x * (457.4957726402483 + x * (495.620420360269 + x * (-584.5105141159671 + x * (-626.2612651242505 + x * (283.9051068563269 + 301.64917603484736 * x)))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(19);

      s[0] = -0.000020567667626491154 + x * (0.00004113533525298231 + x * (0.007633968709861567 + x * (-0.01017862494648209 + x * (-0.42211774971680105 + x * (0.5065412996601613 + x * (8.176203568892046 + x * (-9.344232650162338 + x * (-72.24355530283403 + x * (80.27061700314891 + x * (324.7206612424267 + x * (-354.24072135537455 + x * (-762.8225309107396 + x * (821.5011871346427 + x * (885.6467989073566 + x * (-944.6899188345137 + x * (-398.54105950831047 + 421.9846512440934 * x))))))))))))))));
      s[1] = 0.0004164952694364459 + x * (-0.0009371143562320033 + x * (-0.15425597170686456 + x * (0.23138395756029684 + x * (8.480147185403881 + x * (-11.44819870029524 + x * (-162.50939968039773 + x * (208.94065673193992 + x * (1411.3647762675382 + x * (-1764.2059703344228 + x * (-6180.416495615434 + x * (7585.056608255305 + x * (13974.024334364854 + x * (-16930.06794355742 + x * (-15351.211181060848 + x * (18421.453417273016 + (6376.6569521329675 - 7595.723722393682 * x) * x)))))))))))))));
      s[2] = -0.004045954045954046 + x * (0.010403881832453261 + x * (1.493783934815185 + x * (-2.560772459683174 + x * (-81.42391562539024 + x * (125.62546982203065 + x * (1536.1890684481534 + x * (-2257.2574066993275 + x * (-13014.289830479212 + x * (18591.842614970305 + x * (54952.430316755024 + x * (-77076.13602869536 + x * (-118193.27069516982 + x * (163652.22096254284 + x * (121924.04264957942 + x * (-167210.11563370892 + x * (-47426.38608148895 + 64563.651640346296 * x))))))))))))))));
      s[3] = 0.025174825174825177 + x * (-0.07552447552447553 + x * (-9.249572106464964 + x * (18.499144212929927 + x * (497.5595264222385 + x * (-895.6071475600293 + x * (-9163.701636008524 + x * (15709.202804586039 + x * (74783.84031720345 + x * (-124639.73386200574 + x * (-299878.88722146046 + x * (490710.90636238985 + x * (606012.7515130885 + x * (-978943.6755211429 + x * (-588069.4744744848 + x * (940911.1591591757 + (216806.3363725209 - 344339.47541518026 * x) * x)))))))))))))));
      s[4] = -0.11328671328671329 + x * (0.40783216783216786 + x * (41.286612940630796 + x * (-99.08787105751391 + x * (-2172.156688317263 + x * (4691.858446765288 + x * (38436.66091086648 + x * (-79069.70244521103 + x * (-295702.89277318836 + x * (591405.7855463767 + x * (1.1039215610401388e6 + x * (-2.167700519860636e6 + x * (-2.0883648708556336e6 + x * (4.0482149804278435e6 + x * (1.9189013976326059e6 + x * (-3.6842906834546034e6 + x * (-677519.8011641278 + 1.291273032806926e6 * x))))))))))))))));
      s[5] = 0.3965034965034965 + x * (-1.7842657342657342 + x * (-142.33526242507492 + x * (427.00578727522475 + x * (7181.911616976773 + x * (-19391.161365837288 + x * (-118111.67418643465 + x * (303715.73362226057 + x * (826586.1900552455 + x * (-2.0664654751381138e6 + x * (-2.8476655065100444e6 + x * (6.98972442507011e6 + x * (5.0663798099351665e6 + x * (-1.227622800099675e7 + x * (-4.447127792913473e6 + x * (1.0673106702992335e7 + (1.5176443546076464e6 - 3.6155644918593927e6 * x) * x)))))))))))))));
      s[6] = -1.1454545454545455 + x * (6.872727272727273 + x * (397.6600762987013 + x * (-1590.6403051948053 + x * (-18252.265548396914 + x * (65708.1559742289 + x * (258282.59765305396 + x * (-885540.3348104708 + x * (-1.6201383322870396e6 + x * (5.400461107623465e6 + x * (5.180295733109096e6 + x * (-1.6953695126538858e7 + x * (-8.756008671763431e6 + x * (2.8288643401081853e7 + x * (7.414635000452389e6 + x * (-2.3726832001447648e7 + x * (-2.466172076237425e6 + 7.833723065695351e6 * x))))))))))))))));
      s[7] = 2.9454545454545453 + x * (-26.509090909090908 + x * (-923.1453910018553 + x * (5538.872346011131 + x * (31116.557406800788 + x * (-168029.40999672425 + x * (-373374.2523931108 + x * (1.9202104408788555e6 + x * (2.130229688894053e6 + x * (-1.0651148444470264e7 + x * (-6.424345626843272e6 + x * (3.1537696713594243e7 + x * (1.0453631520408787e7 + x * (-5.065990659890412e7 + x * (-8.627380683756197e6 + x * (4.141142728202974e7 + (2.8184823728427715e6 - 1.3429239541192029e7 * x) * x)))))))))))))));
      s[8] = -8.1 + x * (145.8 + x * (1062.424825255102 + x * (-12749.097903061225 + x * (-27822.613061623088 + x * (300484.22106552933 + x * (297619.47972070315 + x * (-3.0612289342700895e6 + x * (-1.5961184165843083e6 + x * (1.5961184165843083e7 + x * (4.63998543232396e6 + x * (-4.5556220608271606e7 + x * (-7.376582317098842e6 + x * (7.1496105534958e7 + x * (5.994647966204261e6 + x * (-5.75486204755609e7 + x * (-1.9377066313294056e6 + 1.846520436913904e7 * x))))))))))))))));
      s[9] = x * (-249.4423724489796 + x * x * (16913.576737882653 + x * x * (-365365.4815776467 + x * x * (3.5765225104053733e6 + x * x * (-1.825541062560836e7 + x * x * (5.14586590595723e7 + x * x * (-8.013085859050363e7 + x * x * (6.416806273683434e7 - 2.0516893743487824e7 * x * x))))))));
      s[10] = 8.1 + x * (145.8 + x * (-1062.424825255102 + x * (-12749.097903061225 + x * (27822.613061623088 + x * (300484.22106552933 + x * (-297619.47972070315 + x * (-3.0612289342700895e6 + x * (1.5961184165843083e6 + x * (1.5961184165843083e7 + x * (-4.63998543232396e6 + x * (-4.5556220608271606e7 + x * (7.376582317098842e6 + x * (7.1496105534958e7 + x * (-5.994647966204261e6 + x * (-5.75486204755609e7 + x * (1.9377066313294056e6 + 1.846520436913904e7 * x))))))))))))))));
      s[11] = -2.9454545454545453 + x * (-26.509090909090908 + x * (923.1453910018553 + x * (5538.872346011131 + x * (-31116.557406800788 + x * (-168029.40999672425 + x * (373374.2523931108 + x * (1.9202104408788555e6 + x * (-2.130229688894053e6 + x * (-1.0651148444470264e7 + x * (6.424345626843272e6 + x * (3.1537696713594243e7 + x * (-1.0453631520408787e7 + x * (-5.065990659890412e7 + x * (8.627380683756197e6 + x * (4.141142728202974e7 + (-2.8184823728427715e6 - 1.3429239541192029e7 * x) * x)))))))))))))));
      s[12] = 1.1454545454545455 + x * (6.872727272727273 + x * (-397.6600762987013 + x * (-1590.6403051948053 + x * (18252.265548396914 + x * (65708.1559742289 + x * (-258282.59765305396 + x * (-885540.3348104708 + x * (1.6201383322870396e6 + x * (5.400461107623465e6 + x * (-5.180295733109096e6 + x * (-1.6953695126538858e7 + x * (8.756008671763431e6 + x * (2.8288643401081853e7 + x * (-7.414635000452389e6 + x * (-2.3726832001447648e7 + x * (2.466172076237425e6 + 7.833723065695351e6 * x))))))))))))))));
      s[13] = -0.3965034965034965 + x * (-1.7842657342657342 + x * (142.33526242507492 + x * (427.00578727522475 + x * (-7181.911616976773 + x * (-19391.161365837288 + x * (118111.67418643465 + x * (303715.73362226057 + x * (-826586.1900552455 + x * (-2.0664654751381138e6 + x * (2.8476655065100444e6 + x * (6.98972442507011e6 + x * (-5.0663798099351665e6 + x * (-1.227622800099675e7 + x * (4.447127792913473e6 + x * (1.0673106702992335e7 + (-1.5176443546076464e6 - 3.6155644918593927e6 * x) * x)))))))))))))));
      s[14] = 0.11328671328671329 + x * (0.40783216783216786 + x * (-41.286612940630796 + x * (-99.08787105751391 + x * (2172.156688317263 + x * (4691.858446765288 + x * (-38436.66091086648 + x * (-79069.70244521103 + x * (295702.89277318836 + x * (591405.7855463767 + x * (-1.1039215610401388e6 + x * (-2.167700519860636e6 + x * (2.0883648708556336e6 + x * (4.0482149804278435e6 + x * (-1.9189013976326059e6 + x * (-3.6842906834546034e6 + x * (677519.8011641278 + 1.291273032806926e6 * x))))))))))))))));
      s[15] = -0.025174825174825177 + x * (-0.07552447552447553 + x * (9.249572106464964 + x * (18.499144212929927 + x * (-497.5595264222385 + x * (-895.6071475600293 + x * (9163.701636008524 + x * (15709.202804586039 + x * (-74783.84031720345 + x * (-124639.73386200574 + x * (299878.88722146046 + x * (490710.90636238985 + x * (-606012.7515130885 + x * (-978943.6755211429 + x * (588069.4744744848 + x * (940911.1591591757 + (-216806.3363725209 - 344339.47541518026 * x) * x)))))))))))))));
      s[16] = 0.004045954045954046 + x * (0.010403881832453261 + x * (-1.493783934815185 + x * (-2.560772459683174 + x * (81.42391562539024 + x * (125.62546982203065 + x * (-1536.1890684481534 + x * (-2257.2574066993275 + x * (13014.289830479212 + x * (18591.842614970305 + x * (-54952.430316755024 + x * (-77076.13602869536 + x * (118193.27069516982 + x * (163652.22096254284 + x * (-121924.04264957942 + x * (-167210.11563370892 + x * (47426.38608148895 + 64563.651640346296 * x))))))))))))))));
      s[17] = -0.0004164952694364459 + x * (-0.0009371143562320033 + x * (0.15425597170686456 + x * (0.23138395756029684 + x * (-8.480147185403881 + x * (-11.44819870029524 + x * (162.50939968039773 + x * (208.94065673193992 + x * (-1411.3647762675382 + x * (-1764.2059703344228 + x * (6180.416495615434 + x * (7585.056608255305 + x * (-13974.024334364854 + x * (-16930.06794355742 + x * (15351.211181060848 + x * (18421.453417273016 + (-6376.6569521329675 - 7595.723722393682 * x) * x)))))))))))))));
      s[18] = 0.000020567667626491154 + x * (0.00004113533525298231 + x * (-0.007633968709861567 + x * (-0.01017862494648209 + x * (0.42211774971680105 + x * (0.5065412996601613 + x * (-8.176203568892046 + x * (-9.344232650162338 + x * (72.24355530283403 + x * (80.27061700314891 + x * (-324.7206612424267 + x * (-354.24072135537455 + x * (762.8225309107396 + x * (821.5011871346427 + x * (-885.6467989073566 + x * (-944.6899188345137 + x * (398.54105950831047 + 421.9846512440934 * x))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(20);

      s[0] = 3.5375705920159817e-7 + x * (0.00030801513469438366 + x * (-0.00046202270204157546 + x * (-0.040539193035037266 + x * (0.05067399129379658 + x * (1.4292376581177861 + x * (-1.6674439344707503 + x * (-20.99026584463974 + x * (23.61404907521971 + x * (152.95589740589205 + x * (-168.25148714648125 + x * (-595.7830239894862 + x * (645.4316093219434 + x * (1252.9190536666626 + x * (-1342.41327178571 + x * (-1332.264442926849 + x * (1415.530970609777 + (558.3755385796352 - 589.3964018340594 * x) * x))))))))))))))));
      s[1] = -8.39591580990921e-6 + x * (-0.006537048907096441 + x * (0.010959170226602857 + x * (0.8576119588523837 + x * (-1.1981343542790657 + x * (-30.03466496067239 + x * (39.16284744871989 + x * (436.1783786550482 + x * (-548.4301672795091 + x * (-3124.1744839881026 + x * (3840.8968656089028 + x * (11866.28526856672 + x * (-14367.51206537245 + x * (-24073.31340715691 + x * (28827.2870631921 + x * (24331.35587871666 + x * (-28893.485105976033 + x * (-9492.384155853799 + 11198.531634847128 * x)))))))))))))))));
      s[2] = 0.00009705678676255047 + x * (0.06662344853971784 + x * (-0.1265845522254639 + x * (-8.700434123980116 + x * (13.77568736296852 + x * (301.8050157736839 + x * (-446.0007455322218 + x * (-4313.616243128645 + x * (6146.9031464583195 + x * (30162.16483461109 + x * (-42025.94966955812 + x * (-110730.67848829094 + x * (151947.09770337702 + x * (214665.21160122287 + x * (-291331.3586016596 + x * (-205098.60502952806 + x * (276028.5392689065 + (75380.69770825075 - 100786.78471362416 * x) * x))))))))))))))));
      s[3] = -0.0007322331545695376 + x * (-0.4350821405706597 + x * (0.953833923558754 + x * (56.42654027135635 + x * (-103.08694857267025 + x * (-1929.4509785078294 + x * (3289.961283865914 + x * (26930.580860795002 + x * (-44280.0896845764 + x * (-181871.83572160764 + x * (292393.9512755076 + x * (637516.7165650725 + x * (-1.0094014678946983e6 + x * (-1.1700544001829496e6 + x * (1.832228044242531e6 + x * (1.0583088019523649e6 + x * (-1.643431456877951e6 + x * (-370202.98207829817 + 571125.1133772036 * x)))))))))))))))));
      s[4] = 0.004090823243710805 + x * (2.0527381332643513 + x * (-5.318457890730365 + x * (-263.28190895145286 + x * (568.4495761451823 + x * (8797.484568738591 + x * (-17728.264358215645 + x * (-118290.02222689713 + x * (229859.02046362963 + x * (758542.1554535434 + x * (-1.4412300953617324e6 + x * (-2.5018378817852023e6 + x * (4.681469369704129e6 + x * (4.333490098058284e6 + x * (-8.019770636016955e6 + x * (-3.73005996347035e6 + x * (6.845507773868881e6 + (1.2529947085727016e6 - 2.2845004535088143e6 * x) * x))))))))))))))));
      s[5] = -0.01833294861070398 + x * (-7.5011178000333185 + x * (23.75353970010551 + x * (943.4166062249013 + x * (-2489.571599760157 + x * (-30270.745478019155 + x * (74555.72497363978 + x * (382168.4680280369 + x * (-907650.1115665876 + x * (-2.2697918597076503e6 + x * (5.27096109643221e6 + x * (6.991812185140503e6 + x * (-1.5990533423423186e7 + x * (-1.1464939474019924e7 + x * (2.5932601191235542e7 + x * (9.458516591330973e6 + x * (-2.1215978187499337e7 + x * (-3.075532466496631e6 + 6.8535013605264425e6 * x)))))))))))))))));
      s[6] = 0.07071280178414392 + x * (22.351701253769235 + x * (-91.00335510463188 + x * (-2701.489789414388 + x * (9165.768928370244 + x * (79878.76179697158 + x * (-252949.41235707662 + x * (-901487.4403910886 + x * (2.7527562911942173e6 + x * (4.894579613000504e6 + x * (-1.4613816273101507e7 + x * (-1.4120906594834391e7 + x * (4.1522189630048744e7 + x * (2.2085902340136964e7 + x * (-6.422940986672484e7 + x * (-1.7605243540647447e7 + x * (5.077226485383148e7 + (5.581521883642034e6 - 1.59915031745617e7 * x) * x))))))))))))))));
      s[7] = -0.25739459849428387 + x * (-57.15628499928251 + x * (325.79082449591033 + x * (6229.498178301713 + x * (-29590.11634693314 + x * (-150374.818997795 + x * (666661.6975568911 + x * (1.4887652740660193e6 + x * (-6.364471546632232e6 + x * (-7.438798683416699e6 + x * (3.10941784966818e7 + x * (2.0322259881033596e7 + x * (-8.365996984358831e7 + x * (-3.0629649143580575e7 + x * (1.2470642865600663e8 + x * (2.3791438183425255e7 + x * (-9.605793166557947e7 + x * (-7.404059641565963e6 + 2.9698505895614587e7 * x)))))))))))))))));
      s[8] = 1.0724774937261827 + x * (134.19649494906602 + x * (-1274.8667020161274 + x * (-8934.888183455183 + x * (70734.53145235353 + x * (175681.9348116384 + x * (-1.2980942961082172e6 + x * (-1.5642243296661042e6 + x * (1.114509834887099e7 + x * (7.349059838345375e6 + x * (-5.119845020713944e7 + x * (-1.9319661782504685e7 + x * (1.325543461188516e8 + x * (2.839135106349526e7 + x * (-1.9265559650228927e8 + x * (-2.1674820579520527e7 + x * (1.458534801496902e8 + (6.663653677409367e6 - 4.454775884342188e7 * x) * x))))))))))))))));
      s[9] = -11.79725243098801 + x * (-93.56884381098044 + x * (2666.7120486129425 + x * (4678.201918381215 + x * (-111107.29556155387 + x * (-82056.36531149774 + x * (1.8189160977381996e6 + x * (690035.8974595568 + x * (-1.4749517308198027e7 + x * (-3.138910174201495e6 + x * (6.560322264081124e7 + x * (8.090277652628822e6 + x * (-1.6652488168327656e8 + x * (-1.1737945301154794e7 + x * (2.3895102934493688e8 + x * (8.883960020523468e6 + x * (-1.7934494291431752e8 + x * (-2.7148218685741867e6 + 5.444726080862674e7 * x)))))))))))))))));
      s[10] = 11.79725243098801 + x * (-93.56884381098044 + x * (-2666.7120486129425 + x * (4678.201918381215 + x * (111107.29556155387 + x * (-82056.36531149774 + x * (-1.8189160977381996e6 + x * (690035.8974595568 + x * (1.4749517308198027e7 + x * (-3.138910174201495e6 + x * (-6.560322264081124e7 + x * (8.090277652628822e6 + x * (1.6652488168327656e8 + x * (-1.1737945301154794e7 + x * (-2.3895102934493688e8 + x * (8.883960020523468e6 + x * (1.7934494291431752e8 + (-2.7148218685741867e6 - 5.444726080862674e7 * x) * x))))))))))))))));
      s[11] = -1.0724774937261827 + x * (134.19649494906602 + x * (1274.8667020161274 + x * (-8934.888183455183 + x * (-70734.53145235353 + x * (175681.9348116384 + x * (1.2980942961082172e6 + x * (-1.5642243296661042e6 + x * (-1.114509834887099e7 + x * (7.349059838345375e6 + x * (5.119845020713944e7 + x * (-1.9319661782504685e7 + x * (-1.325543461188516e8 + x * (2.839135106349526e7 + x * (1.9265559650228927e8 + x * (-2.1674820579520527e7 + x * (-1.458534801496902e8 + x * (6.663653677409367e6 + 4.454775884342188e7 * x)))))))))))))))));
      s[12] = 0.25739459849428387 + x * (-57.15628499928251 + x * (-325.79082449591033 + x * (6229.498178301713 + x * (29590.11634693314 + x * (-150374.818997795 + x * (-666661.6975568911 + x * (1.4887652740660193e6 + x * (6.364471546632232e6 + x * (-7.438798683416699e6 + x * (-3.10941784966818e7 + x * (2.0322259881033596e7 + x * (8.365996984358831e7 + x * (-3.0629649143580575e7 + x * (-1.2470642865600663e8 + x * (2.3791438183425255e7 + x * (9.605793166557947e7 + (-7.404059641565963e6 - 2.9698505895614587e7 * x) * x))))))))))))))));
      s[13] = -0.07071280178414392 + x * (22.351701253769235 + x * (91.00335510463188 + x * (-2701.489789414388 + x * (-9165.768928370244 + x * (79878.76179697158 + x * (252949.41235707662 + x * (-901487.4403910886 + x * (-2.7527562911942173e6 + x * (4.894579613000504e6 + x * (1.4613816273101507e7 + x * (-1.4120906594834391e7 + x * (-4.1522189630048744e7 + x * (2.2085902340136964e7 + x * (6.422940986672484e7 + x * (-1.7605243540647447e7 + x * (-5.077226485383148e7 + x * (5.581521883642034e6 + 1.59915031745617e7 * x)))))))))))))))));
      s[14] = 0.01833294861070398 + x * (-7.5011178000333185 + x * (-23.75353970010551 + x * (943.4166062249013 + x * (2489.571599760157 + x * (-30270.745478019155 + x * (-74555.72497363978 + x * (382168.4680280369 + x * (907650.1115665876 + x * (-2.2697918597076503e6 + x * (-5.27096109643221e6 + x * (6.991812185140503e6 + x * (1.5990533423423186e7 + x * (-1.1464939474019924e7 + x * (-2.5932601191235542e7 + x * (9.458516591330973e6 + x * (2.1215978187499337e7 + (-3.075532466496631e6 - 6.8535013605264425e6 * x) * x))))))))))))))));
      s[15] = -0.004090823243710805 + x * (2.0527381332643513 + x * (5.318457890730365 + x * (-263.28190895145286 + x * (-568.4495761451823 + x * (8797.484568738591 + x * (17728.264358215645 + x * (-118290.02222689713 + x * (-229859.02046362963 + x * (758542.1554535434 + x * (1.4412300953617324e6 + x * (-2.5018378817852023e6 + x * (-4.681469369704129e6 + x * (4.333490098058284e6 + x * (8.019770636016955e6 + x * (-3.73005996347035e6 + x * (-6.845507773868881e6 + x * (1.2529947085727016e6 + 2.2845004535088143e6 * x)))))))))))))))));
      s[16] = 0.0007322331545695376 + x * (-0.4350821405706597 + x * (-0.953833923558754 + x * (56.42654027135635 + x * (103.08694857267025 + x * (-1929.4509785078294 + x * (-3289.961283865914 + x * (26930.580860795002 + x * (44280.0896845764 + x * (-181871.83572160764 + x * (-292393.9512755076 + x * (637516.7165650725 + x * (1.0094014678946983e6 + x * (-1.1700544001829496e6 + x * (-1.832228044242531e6 + x * (1.0583088019523649e6 + x * (1.643431456877951e6 + (-370202.98207829817 - 571125.1133772036 * x) * x))))))))))))))));
      s[17] = -0.00009705678676255047 + x * (0.06662344853971784 + x * (0.1265845522254639 + x * (-8.700434123980116 + x * (-13.77568736296852 + x * (301.8050157736839 + x * (446.0007455322218 + x * (-4313.616243128645 + x * (-6146.9031464583195 + x * (30162.16483461109 + x * (42025.94966955812 + x * (-110730.67848829094 + x * (-151947.09770337702 + x * (214665.21160122287 + x * (291331.3586016596 + x * (-205098.60502952806 + x * (-276028.5392689065 + x * (75380.69770825075 + 100786.78471362416 * x)))))))))))))))));
      s[18] = 8.39591580990921e-6 + x * (-0.006537048907096441 + x * (-0.010959170226602857 + x * (0.8576119588523837 + x * (1.1981343542790657 + x * (-30.03466496067239 + x * (-39.16284744871989 + x * (436.1783786550482 + x * (548.4301672795091 + x * (-3124.1744839881026 + x * (-3840.8968656089028 + x * (11866.28526856672 + x * (14367.51206537245 + x * (-24073.31340715691 + x * (-28827.2870631921 + x * (24331.35587871666 + x * (28893.485105976033 + (-9492.384155853799 - 11198.531634847128 * x) * x))))))))))))))));
      s[19] = -3.5375705920159817e-7 + x * (0.00030801513469438366 + x * (0.00046202270204157546 + x * (-0.040539193035037266 + x * (-0.05067399129379658 + x * (1.4292376581177861 + x * (1.6674439344707503 + x * (-20.99026584463974 + x * (-23.61404907521971 + x * (152.95589740589205 + x * (168.25148714648125 + x * (-595.7830239894862 + x * (-645.4316093219434 + x * (1252.9190536666626 + x * (1342.41327178571 + x * (-1332.264442926849 + x * (-1415.530970609777 + x * (558.3755385796352 + 589.3964018340594 * x)))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(21);

      s[0] = 5.412544112234515e-6 + x * (-0.00001082508822446903 + x * (-0.002500218230260247 + x * (0.0033336243070136626 + x * (0.17441220886574724 + x * (-0.20929465063889668 + x * (-4.341308976564892 + x * (4.96149597321702 + x * (50.591185767587056 + x * (-56.21242863065228 + x * (-311.71711332852755 + x * (340.0550327220301 + x * (1068.3459470478135 + x * (-1150.52640451303 + x * (-2031.2778662646388 + x * (2166.696390682281 + x * (1991.4488884947439 + x * (-2108.5929407591407 + x * (-780.9603484293114 + 822.063524662433 * x))))))))))))))))));
      s[1] = -0.00012027875804965589 + x * (0.0002672861289992353 + x * (0.05547576450937795 + x * (-0.08218631779167104 + x * (-3.8542798752785523 + x * (5.139039833704737 + x * (95.23797211875916 + x * (-120.93710745239258 + x * (-1097.1145876279804 + x * (1354.4624538617043 + x * (6645.67444133003 + x * (-8055.362959187915 + x * (-22231.260863866682 + x * (26601.50872599432 + x * (40864.531191912145 + x * (-48432.03696819217 + x * (-38235.81865909908 + x * (44983.31606952833 + (14057.286271727604 - 16441.27049324866 * x) * x)))))))))))))))));
      s[2] = 0.0012854792266556972 + x * (-0.0032136980666392432 + x * (-0.5916325834918272 + x * (0.986054305819712 + x * (40.87185946891635 + x * (-61.30778920337452 + x * (-999.6457487937683 + x * (1428.065355419669 + x * (11332.839419086939 + x * (-15740.05474873186 + x * (-67075.7361157769 + x * (91466.91288515032 + x * (217364.04401932034 + x * (-292605.44387216197 + x * (-383314.0820574683 + x * (511085.4427432911 + x * (340936.04971030017 + x * (-451238.8893224561 + x * (-118705.97296125532 + 156192.06968586225 * x))))))))))))))))));
      s[3] = -0.008814714697067638 + x * (0.025184899134478966 + x * (4.0442604780840075 + x * (-7.703353291588586 + x * (-277.0730587570865 + x * (474.9823864407198 + x * (6676.154287313624 + x * (-10899.84373438959 + x * (-73963.92308501684 + x * (117403.05251589973 + x * (423863.62418552814 + x * (-660566.6870423815 + x * (-1.3175263344051924e6 + x * (2.0269635913926037e6 + x * (2.213136978761979e6 + x * (-3.3723992057325393e6 + x * (-1.873555114295855e6 + x * (2.833948912380285e6 + (623206.3580465905 - 937152.4181151736 * x) * x)))))))))))))))));
      s[4] = 0.043706293706293704 + x * (-0.1456876456876457 + x * (-19.956161976251263 + x * (44.34702661389169 + x * (1349.637718160887 + x * (-2699.275436321774 + x * (-31779.20888080755 + x * (60531.82643963343 + x * (340098.7404806462 + x * (-629812.4823715669 + x * (-1.861766369758423e6 + x * (3.3850297631971324e6 + x * (5.489807316082531e6 + x * (-9.853500310917363e6 + x * (-8.761140411066007e6 + x * (1.5575360730784012e7 + x * (7.089159753263589e6 + x * (-1.251028191752398e7 + x * (-2.270251732884008e6 + 3.982897776989488e6 * x))))))))))))))))));
      s[5] = -0.16783216783216784 + x * (0.6713286713286714 + x * (76.01627737342024 + x * (-202.71007299578727 + x * (-5030.609868159471 + x * (12073.463683582731 + x * (114015.33676514386 + x * (-260606.48403461455 + x * (-1.1554437247331592e6 + x * (2.567652721629243e6 + x * (5.934226748183842e6 + x * (-1.294740381421929e7 + x * (-1.6497691521115242e7 + x * (3.553348943009437e7 + x * (2.506644681743888e7 + x * (-5.3475086543869615e7 + x * (-1.950026751614053e7 + x * (4.129468415182701e7 + (6.054004621024021e6 - 1.274527288636636e7 * x) * x)))))))))))))))));
      s[6] = 0.5244755244755245 + x * (-2.6223776223776225 + x * (-234.01065700172842 + x * (780.0355233390948 + x * (14866.717272843265 + x * (-44600.1518185298 + x * (-314249.82394648675 + x * (897856.639847105 + x * (2.9179291810895232e6 + x * (-8.105358836359787e6 + x * (-1.3907334249286134e7 + x * (3.7929093407144e7 + x * (3.649537135124657e7 + x * (-9.825676902258693e7 + x * (-5.309234599909203e7 + x * (1.4157958933091208e8 + x * (3.997554840808809e7 + x * (-1.0581762813905671e8 + x * (-1.2108009242048042e7 + 3.1863182215915903e7 * x))))))))))))))))));
      s[7] = -1.3986013986013985 + x * (9.324009324009324 + x * (603.6321482750054 + x * (-2682.809547888913 + x * (-34966.502305870694 + x * (139866.00922348278 + x * (640966.2310212079 + x * (-2.44177611817603e6 + x * (-5.358408838598571e6 + x * (1.9845958661476187e7 + x * (2.3757007705988776e7 + x * (-8.638911893086827e7 + x * (-5.929262429345101e7 + x * (2.1284531797649083e8 + x * (8.32518038619229e7 + x * (-2.9600641373128146e8 + x * (-6.110083821724033e7 + x * (2.156500172373188e8 + (1.8162013863072064e7 - 6.372636443183181e7 * x) * x)))))))))))))))));
      s[8] = 3.409090909090909 + x * (-34.09090909090909 + x * (-1329.3079068748712 + x * (8862.05271249914 + x * (57090.30438818695 + x * (-342541.8263291217 + x * (-890007.7469585813 + x * (5.0857585540490355e6 + x * (6.773089507760964e6 + x * (-3.7628275043116465e7 + x * (-2.832544908315049e7 + x * (1.5450244954445723e8 + x * (6.804172727222358e7 + x * (-3.663785314658193e8 + x * (-9.307864823117799e7 + x * (4.964194572329493e8 + x * (6.707279514405837e7 + x * (-3.550912684097208e8 + x * (-1.967551501832807e7 + 1.0355534220172668e8 * x))))))))))))))))));
      s[9] = -9.090909090909092 + x * (181.8181818181818 + x * (1499.366539545111 + x * (-19991.553860601478 + x * (-50047.26698596573 + x * (600567.2038315887 + x * (695165.0234184635 + x * (-7.94474312478244e6 + x * (-4.969590177628992e6 + x * (5.5217668640322134e7 + x * (2.0021543143899363e7 + x * (-2.1841683429708397e8 + x * (-4.696428348301327e7 + x * (5.0576920674014294e8 + x * (6.323296305521835e7 + x * (-6.744849392556623e8 + x * (-4.506728492619145e7 + x * (4.7718301686555654e8 + (1.3117010012218714e7 - 1.3807378960230225e8 * x) * x)))))))))))))))));
      s[10] = x * (-309.95354623330815 + x * x * (26394.868741426613 + x * x * (-726168.0549942028 + x * x * (9.225132921295518e6 + x * x * (-6.274158981874429e7 + x * x * (2.450271988189137e8 + x * x * (-5.62838044954493e8 + x * x * (7.465992226794696e8 + x * x * (-5.26268249069175e8 + 1.5188116856253245e8 * x * x)))))))));
      s[11] = 9.090909090909092 + x * (181.8181818181818 + x * (-1499.366539545111 + x * (-19991.553860601478 + x * (50047.26698596573 + x * (600567.2038315887 + x * (-695165.0234184635 + x * (-7.94474312478244e6 + x * (4.969590177628992e6 + x * (5.5217668640322134e7 + x * (-2.0021543143899363e7 + x * (-2.1841683429708397e8 + x * (4.696428348301327e7 + x * (5.0576920674014294e8 + x * (-6.323296305521835e7 + x * (-6.744849392556623e8 + x * (4.506728492619145e7 + x * (4.7718301686555654e8 + (-1.3117010012218714e7 - 1.3807378960230225e8 * x) * x)))))))))))))))));
      s[12] = -3.409090909090909 + x * (-34.09090909090909 + x * (1329.3079068748712 + x * (8862.05271249914 + x * (-57090.30438818695 + x * (-342541.8263291217 + x * (890007.7469585813 + x * (5.0857585540490355e6 + x * (-6.773089507760964e6 + x * (-3.7628275043116465e7 + x * (2.832544908315049e7 + x * (1.5450244954445723e8 + x * (-6.804172727222358e7 + x * (-3.663785314658193e8 + x * (9.307864823117799e7 + x * (4.964194572329493e8 + x * (-6.707279514405837e7 + x * (-3.550912684097208e8 + x * (1.967551501832807e7 + 1.0355534220172668e8 * x))))))))))))))))));
      s[13] = 1.3986013986013985 + x * (9.324009324009324 + x * (-603.6321482750054 + x * (-2682.809547888913 + x * (34966.502305870694 + x * (139866.00922348278 + x * (-640966.2310212079 + x * (-2.44177611817603e6 + x * (5.358408838598571e6 + x * (1.9845958661476187e7 + x * (-2.3757007705988776e7 + x * (-8.638911893086827e7 + x * (5.929262429345101e7 + x * (2.1284531797649083e8 + x * (-8.32518038619229e7 + x * (-2.9600641373128146e8 + x * (6.110083821724033e7 + x * (2.156500172373188e8 + (-1.8162013863072064e7 - 6.372636443183181e7 * x) * x)))))))))))))))));
      s[14] = -0.5244755244755245 + x * (-2.6223776223776225 + x * (234.01065700172842 + x * (780.0355233390948 + x * (-14866.717272843265 + x * (-44600.1518185298 + x * (314249.82394648675 + x * (897856.639847105 + x * (-2.9179291810895232e6 + x * (-8.105358836359787e6 + x * (1.3907334249286134e7 + x * (3.7929093407144e7 + x * (-3.649537135124657e7 + x * (-9.825676902258693e7 + x * (5.309234599909203e7 + x * (1.4157958933091208e8 + x * (-3.997554840808809e7 + x * (-1.0581762813905671e8 + x * (1.2108009242048042e7 + 3.1863182215915903e7 * x))))))))))))))))));
      s[15] = 0.16783216783216784 + x * (0.6713286713286714 + x * (-76.01627737342024 + x * (-202.71007299578727 + x * (5030.609868159471 + x * (12073.463683582731 + x * (-114015.33676514386 + x * (-260606.48403461455 + x * (1.1554437247331592e6 + x * (2.567652721629243e6 + x * (-5.934226748183842e6 + x * (-1.294740381421929e7 + x * (1.6497691521115242e7 + x * (3.553348943009437e7 + x * (-2.506644681743888e7 + x * (-5.3475086543869615e7 + x * (1.950026751614053e7 + x * (4.129468415182701e7 + (-6.054004621024021e6 - 1.274527288636636e7 * x) * x)))))))))))))))));
      s[16] = -0.043706293706293704 + x * (-0.1456876456876457 + x * (19.956161976251263 + x * (44.34702661389169 + x * (-1349.637718160887 + x * (-2699.275436321774 + x * (31779.20888080755 + x * (60531.82643963343 + x * (-340098.7404806462 + x * (-629812.4823715669 + x * (1.861766369758423e6 + x * (3.3850297631971324e6 + x * (-5.489807316082531e6 + x * (-9.853500310917363e6 + x * (8.761140411066007e6 + x * (1.5575360730784012e7 + x * (-7.089159753263589e6 + x * (-1.251028191752398e7 + x * (2.270251732884008e6 + 3.982897776989488e6 * x))))))))))))))))));
      s[17] = 0.008814714697067638 + x * (0.025184899134478966 + x * (-4.0442604780840075 + x * (-7.703353291588586 + x * (277.0730587570865 + x * (474.9823864407198 + x * (-6676.154287313624 + x * (-10899.84373438959 + x * (73963.92308501684 + x * (117403.05251589973 + x * (-423863.62418552814 + x * (-660566.6870423815 + x * (1.3175263344051924e6 + x * (2.0269635913926037e6 + x * (-2.213136978761979e6 + x * (-3.3723992057325393e6 + x * (1.873555114295855e6 + x * (2.833948912380285e6 + (-623206.3580465905 - 937152.4181151736 * x) * x)))))))))))))))));
      s[18] = -0.0012854792266556972 + x * (-0.0032136980666392432 + x * (0.5916325834918272 + x * (0.986054305819712 + x * (-40.87185946891635 + x * (-61.30778920337452 + x * (999.6457487937683 + x * (1428.065355419669 + x * (-11332.839419086939 + x * (-15740.05474873186 + x * (67075.7361157769 + x * (91466.91288515032 + x * (-217364.04401932034 + x * (-292605.44387216197 + x * (383314.0820574683 + x * (511085.4427432911 + x * (-340936.04971030017 + x * (-451238.8893224561 + x * (118705.97296125532 + 156192.06968586225 * x))))))))))))))))));
      s[19] = 0.00012027875804965589 + x * (0.0002672861289992353 + x * (-0.05547576450937795 + x * (-0.08218631779167104 + x * (3.8542798752785523 + x * (5.139039833704737 + x * (-95.23797211875916 + x * (-120.93710745239258 + x * (1097.1145876279804 + x * (1354.4624538617043 + x * (-6645.67444133003 + x * (-8055.362959187915 + x * (22231.260863866682 + x * (26601.50872599432 + x * (-40864.531191912145 + x * (-48432.03696819217 + x * (38235.81865909908 + x * (44983.31606952833 + (-14057.286271727604 - 16441.27049324866 * x) * x)))))))))))))))));
      s[20] = -5.412544112234515e-6 + x * (-0.00001082508822446903 + x * (0.002500218230260247 + x * (0.0033336243070136626 + x * (-0.17441220886574724 + x * (-0.20929465063889668 + x * (4.341308976564892 + x * (4.96149597321702 + x * (-50.591185767587056 + x * (-56.21242863065228 + x * (311.71711332852755 + x * (340.0550327220301 + x * (-1068.3459470478135 + x * (-1150.52640451303 + x * (2031.2778662646388 + x * (2166.696390682281 + x * (-1991.4488884947439 + x * (-2108.5929407591407 + x * (780.9603484293114 + 822.063524662433 * x))))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(2);

      s[0] = -0.5;
      s[1] = 0.5;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(3);

      s[0] = -0.5 + x;
      s[1] = -2. * x;
      s[2] = 0.5 + x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(4);

      s[0] = 0.125 + (1.25 - 1.875 * x) * x;
      s[1] = -1.3975424859373686 + x * (-1.25 + 4.192627457812106 * x);
      s[2] = 1.3975424859373686 + (-1.25 - 4.192627457812106 * x) * x;
      s[3] = -0.125 + x * (1.25 + 1.875 * x);
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(5);

      s[0] = 0.37500000000000006 + x * (-0.7500000000000001 + x * (-2.6250000000000004 + 3.5000000000000004 * x));
      s[1] = -1.3365845776954535 + x * (4.083333333333334 + (4.00975373308636 - 8.166666666666668 * x) * x);
      s[2] = x * (-6.666666666666667 + 9.333333333333334 * x * x);
      s[3] = 1.3365845776954535 + x * (4.083333333333334 + (-4.00975373308636 - 8.166666666666668 * x) * x);
      s[4] = -0.37500000000000006 + x * (-0.7500000000000001 + x * (2.6250000000000004 + 3.5000000000000004 * x));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(6);

      s[0] = -0.06250000000000001 + x * (-1.7500000000000002 + x * (2.6250000000000004 + (5.250000000000001 - 6.562500000000001 * x) * x));
      s[1] = 0.25442427006989676 + x * (5.1743458804799625 + x * (-10.145042558302 + x * (-9.570097191544555 + 15.636282913487186 * x)));
      s[2] = -2.2162650542747366 + x * (-3.4243458804799602 + x * (18.008244264509557 + (4.3200971915445505 - 18.93241516947558 * x) * x));
      s[3] = 2.2162650542747366 + x * (-3.4243458804799602 + x * (-18.008244264509557 + x * (4.3200971915445505 + 18.93241516947558 * x)));
      s[4] = -0.25442427006989676 + x * (5.1743458804799625 + x * (10.145042558302 + (-9.570097191544555 - 15.636282913487186 * x) * x));
      s[5] = 0.06250000000000001 + x * (-1.7500000000000002 + x * (-2.6250000000000004 + x * (5.250000000000001 + 6.562500000000001 * x)));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(7);

      s[0] = -0.3124999999999999 + x * (0.6249999999999998 + x * (5.624999999999997 + x * (-7.499999999999997 + x * (-10.312499999999996 + 12.374999999999995 * x))));
      s[1] = 0.9075444712688205 + x * (-2.1862643928627907 + x * (-15.10841920302596 + x * (24.26400761007342 + (20.642976315365832 - 29.83721823652175 * x) * x)));
      s[2] = -2.0069692405887536 + x * (8.561264392862793 + x * (14.756080752884097 + x * (-41.96400761007342 + x * (-14.558621718529725 + 37.262218236521754 * x))));
      s[3] = x * (-14.000000000000002 + x * x * (50.400000000000006 - 39.60000000000001 * x * x));
      s[4] = 2.0069692405887536 + x * (8.561264392862793 + x * (-14.756080752884097 + x * (-41.96400761007342 + x * (14.558621718529725 + 37.262218236521754 * x))));
      s[5] = -0.9075444712688205 + x * (-2.1862643928627907 + x * (15.10841920302596 + x * (24.26400761007342 + (-20.642976315365832 - 29.83721823652175 * x) * x)));
      s[6] = 0.3124999999999999 + x * (0.6249999999999998 + x * (-5.624999999999997 + x * (-7.499999999999997 + x * (10.312499999999996 + 12.374999999999995 * x))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(8);

      s[0] = 0.03906249999999999 + x * (2.109375 + x * (-3.1640625 + x * (-15.468749999999996 + x * (19.335937499999993 + (20.109374999999996 - 23.46093749999999 * x) * x))));
      s[1] = -0.12485374636569209 + x * (-5.808594146968975 + x * (9.994826136377549 + x * (39.568207525887324 + x * (-56.73738842007012 + x * (-42.57956898831692 + 56.98505902777706 * x)))));
      s[2] = 0.34481881174242957 + x * (10.260125098974642 + x * (-26.010111423636502 + x * (-44.21977854806826 + x * (93.41677579210099 + (36.773468645995806 - 72.50695780265322 * x) * x))));
      s[3] = -3.0303592933934 + x * (-6.560905952005669 + x * (47.02052414067784 + x * (20.12032102218093 + x * (-120.16481250992908 + x * (-14.30327465767888 + 79.72869623940618 * x)))));
      s[4] = 3.0303592933934 + x * (-6.560905952005669 + x * (-47.02052414067784 + x * (20.12032102218093 + x * (120.16481250992908 + (-14.30327465767888 - 79.72869623940618 * x) * x))));
      s[5] = -0.34481881174242957 + x * (10.260125098974642 + x * (26.010111423636502 + x * (-44.21977854806826 + x * (-93.41677579210099 + x * (36.773468645995806 + 72.50695780265322 * x)))));
      s[6] = 0.12485374636569209 + x * (-5.808594146968975 + x * (-9.994826136377549 + x * (39.568207525887324 + x * (56.73738842007012 + (-42.57956898831692 - 56.98505902777706 * x) * x))));
      s[7] = -0.03906249999999999 + x * (2.109375 + x * (3.1640625 + x * (-15.468749999999996 + x * (-19.335937499999993 + x * (20.109374999999996 + 23.46093749999999 * x)))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(9);

      s[0] = 0.2734375 + x * (-0.5468750000000001 + x * (-9.023437500000002 + x * (12.031250000000002 + x * (39.10156250000001 + x * (-46.921875 + x * (-39.10156249999999 + 44.6875 * x))))));
      s[1] = -0.7417823979162542 + x * (1.6488486942025704 + x * (23.955346026730595 + x * (-35.49894697447809 + x * (-97.55556062730835 + x * (130.10906638205012 + (85.87445426794076 - 109.07625600392092 * x) * x)))));
      s[2] = 1.2694130863581494 + x * (-3.749080939074228 + x * (-37.394477504412244 + x * (73.62716116345317 + x * (115.43738803237429 + x * (-204.55946883467925 + x * (-83.24445400620246 + 140.48795987562954 * x))))));
      s[3] = -2.6593102175739185 + x * (14.647107244871659 + x * (35.22951041866047 + x * (-129.35946418897512 + x * (-81.23482091991364 + x * (268.4579917383435 + (50.14172983402211 - 157.8134895859944 * x) * x)))));
      s[4] = x * (-24. + x * x * (158.4 + x * x * (-294.1714285714286 + 163.42857142857142 * x * x)));
      s[5] = 2.6593102175739185 + x * (14.647107244871659 + x * (-35.22951041866047 + x * (-129.35946418897512 + x * (81.23482091991364 + x * (268.4579917383435 + (-50.14172983402211 - 157.8134895859944 * x) * x)))));
      s[6] = -1.2694130863581494 + x * (-3.749080939074228 + x * (37.394477504412244 + x * (73.62716116345317 + x * (-115.43738803237429 + x * (-204.55946883467925 + x * (83.24445400620246 + 140.48795987562954 * x))))));
      s[7] = 0.7417823979162542 + x * (1.6488486942025704 + x * (-23.955346026730595 + x * (-35.49894697447809 + x * (97.55556062730835 + x * (130.10906638205012 + (-85.87445426794076 - 109.07625600392092 * x) * x)))));
      s[8] = -0.2734375 + x * (-0.5468750000000001 + x * (9.023437500000002 + x * (12.031250000000002 + x * (-39.10156250000001 + x * (-46.921875 + x * (39.10156249999999 + 44.6875 * x))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(10);

      s[0] = -0.02734375000000001 + x * (-2.406250000000001 + x * (3.6093750000000018 + x * (31.281250000000007 + x * (-39.1015625 + x * (-93.84375000000003 + x * (109.484375 + (75.96875000000003 - 85.46484375000003 * x) * x))))));
      s[1] = 0.07920519507855234 + x * (6.382595148343517 + x * (-10.411679914670593 + x * (-81.04101893607978 + x * (110.16589249230996 + x * (231.1709504647956 + x * (-293.30015980237874 + x * (-171.09362177365392 + 209.32379196234805 * x)))))));
      s[2] = -0.15937702714651655 + x * (-10.165458780910196 + x * (20.63985867879569 + x * (118.17087208349452 + x * (-199.94425504382593 + x * (-281.371907362079 + x * (444.34060375007806 + (178.540685447258 - 271.88058567756786 * x) * x))))));
      s[3] = 0.4339783761858413 + x * (16.8507241810746 + x * (-52.887145317767896 + x * (-126.23341961919263 + x * (330.16015294153294 + x * (238.7579159402219 + x * (-582.8339827011298 + x * (-131.62067265694947 + 309.82533303146715 * x)))))));
      s[4] = -3.842918861837783 + x * (-10.661610548507916 + x * (96.7601444767235 + x * (57.82231647177784 + x * (-437.30851531393415 + x * (-94.71320904293836 + x * (668.559055814401 + (48.204858983345396 - 328.11476501277866 * x) * x))))));
      s[5] = 3.842918861837783 + x * (-10.661610548507916 + x * (-96.7601444767235 + x * (57.82231647177784 + x * (437.30851531393415 + x * (-94.71320904293836 + x * (-668.559055814401 + x * (48.204858983345396 + 328.11476501277866 * x)))))));
      s[6] = -0.4339783761858413 + x * (16.8507241810746 + x * (52.887145317767896 + x * (-126.23341961919263 + x * (-330.16015294153294 + x * (238.7579159402219 + x * (582.8339827011298 + (-131.62067265694947 - 309.82533303146715 * x) * x))))));
      s[7] = 0.15937702714651655 + x * (-10.165458780910196 + x * (-20.63985867879569 + x * (118.17087208349452 + x * (199.94425504382593 + x * (-281.371907362079 + x * (-444.34060375007806 + x * (178.540685447258 + 271.88058567756786 * x)))))));
      s[8] = -0.07920519507855234 + x * (6.382595148343517 + x * (10.411679914670593 + x * (-81.04101893607978 + x * (-110.16589249230996 + x * (231.1709504647956 + x * (293.30015980237874 + (-171.09362177365392 - 209.32379196234805 * x) * x))))));
      s[9] = 0.02734375000000001 + x * (-2.406250000000001 + x * (-3.6093750000000018 + x * (31.281250000000007 + x * (39.1015625 + x * (-93.84375000000003 + x * (-109.484375 + x * (75.96875000000003 + 85.46484375000003 * x)))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(11);

      s[0] = -0.24609375000000006 + x * (0.4921875000000001 + x * (12.796875000000002 + x * (-17.062500000000004 + x * (-95.97656250000001 + x * (115.171875 + x * (217.54687500000006 + x * (-248.62500000000009 + x * (-147.62109375000003 + 164.02343750000006 * x))))))));
      s[1] = 0.6469399638321012 + x * (-1.3853082934775747 + x * (-33.35690223148232 + x * (47.61863118619122 + x * (244.64538223485803 + x * (-314.31906753458486 + x * (-532.5063568594594 + x * (651.582185787214 + (338.5375892450899 - 402.73265617446646 * x) * x)))))));
      s[2] = -1.0065054085767788 + x * (2.566033428025968 + x * (50.45132044414976 + x * (-85.74868625945238 + x * (-343.135180564565 + x * (524.8832263537113 + x * (658.7078783656655 + x * (-959.6237895633852 + x * (-371.56221696632537 + 526.265908206547 * x))))))));
      s[3] = 1.6081279037255147 + x * (-5.690118175279273 + x * (-73.34681563636617 + x * (173.01776713343713 + x * (383.91766244470193 + x * (-815.0608656785806 + x * (-617.3070634626204 + x * (1248.1417086288384 + (308.19601354133147 - 605.8361866122764 * x) * x)))))));
      s[4] = -3.305176853378321 + x * (22.350538874064206 + x * (68.42923717197239 + x * (-308.49187872684263 + x * (-271.6494049330932 + x * (1102.1819747165966 + x * (378.6646108978543 + x * (-1463.2211365986982 + x * (-173.42669068175715 + 651.533465334164 * x))))))));
      s[5] = x * (-36.666666666666664 + x * x * (381.3333333333333 + x * x * (-1225.7142857142858 + x * x * (1543.4920634920636 - 666.5079365079365 * x * x))));
      s[6] = 3.305176853378321 + x * (22.350538874064206 + x * (-68.42923717197239 + x * (-308.49187872684263 + x * (271.6494049330932 + x * (1102.1819747165966 + x * (-378.6646108978543 + x * (-1463.2211365986982 + x * (173.42669068175715 + 651.533465334164 * x))))))));
      s[7] = -1.6081279037255147 + x * (-5.690118175279273 + x * (73.34681563636617 + x * (173.01776713343713 + x * (-383.91766244470193 + x * (-815.0608656785806 + x * (617.3070634626204 + x * (1248.1417086288384 + (-308.19601354133147 - 605.8361866122764 * x) * x)))))));
      s[8] = 1.0065054085767788 + x * (2.566033428025968 + x * (-50.45132044414976 + x * (-85.74868625945238 + x * (343.135180564565 + x * (524.8832263537113 + x * (-658.7078783656655 + x * (-959.6237895633852 + x * (371.56221696632537 + 526.265908206547 * x))))))));
      s[9] = -0.6469399638321012 + x * (-1.3853082934775747 + x * (33.35690223148232 + x * (47.61863118619122 + x * (-244.64538223485803 + x * (-314.31906753458486 + x * (532.5063568594594 + x * (651.582185787214 + (-338.5375892450899 - 402.73265617446646 * x) * x)))))));
      s[10] = 0.24609375000000006 + x * (0.4921875000000001 + x * (-12.796875000000002 + x * (-17.062500000000004 + x * (95.97656250000001 + x * (115.171875 + x * (-217.54687500000006 + x * (-248.62500000000009 + x * (147.62109375000003 + 164.02343750000006 * x))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(12);

      s[0] = 0.020507812499999993 + x * (2.666015624999999 + x * (-3.9990234374999982 + x * (-53.32031249999997 + x * (66.65039062499996 + x * (271.93359374999983 + x * (-317.2558593749998 + x * (-492.07031249999966 + x * (553.5791015624995 + (287.04101562499983 - 315.74511718749983 * x) * x))))))));
      s[1] = -0.056502579963255195 + x * (-6.92778563508287 + x * (10.997657377995232 + x * (137.1746144871645 + x * (-181.46724539809975 + x * (-685.7003111032861 + x * (846.633836858822 + x * (1200.9537748747232 + x * (-1429.8592838955783 + x * (-667.1898672639503 + 776.7059151858796 * x)))))))));
      s[2] = 0.09865545322619368 + x * (10.428246488508563 + x * (-19.092840890179044 + x * (-200.09084751036772 + x * (305.2848433743809 + x * (939.8292592322487 + x * (-1338.3316777775665 + x * (-1501.4699383674028 + x * (2061.75554055702 + (759.3494743001718 - 1019.5355840961124 * x) * x))))))));
      s[3] = -0.191752887060472 + x * (-15.412996630821947 + x * (36.53083598659315 + x * (270.11509274030436 + x * (-533.5070128774194 + x * (-1070.8804144524177 + x * (1974.0994782985995 + x * (1492.559397190727 + x * (-2653.172052376314 + x * (-680.3348627259865 + 1182.4878302230961 * x)))))))));
      s[4] = 0.5231974657907181 + x * (24.973373446327656 + x * (-93.7600979763426 + x * (-284.93544480610933 + x * (891.4686435725314 + x * (909.4704127603684 + x * (-2655.7362799571524 + x * (-1114.598737111069 + x * (3138.489290016475 + (467.026480663371 - 1285.830648030495 * x) * x))))))));
      s[5] = -4.654771388963057 + x * (-15.726853293931402 + x * (172.75557139412865 + x * (131.05689758900817 + x * (-1199.689516447824 + x * (-364.65254018691303 + x * (3115.480236542183 + x * (414.6258159130213 + x * (-3415.921087522192 + x * (-165.8922405986063 + 1336.3423314556956 * x)))))))));
      s[6] = 4.654771388963057 + x * (-15.726853293931402 + x * (-172.75557139412865 + x * (131.05689758900817 + x * (1199.689516447824 + x * (-364.65254018691303 + x * (-3115.480236542183 + x * (414.6258159130213 + x * (3415.921087522192 + (-165.8922405986063 - 1336.3423314556956 * x) * x))))))));
      s[7] = -0.5231974657907181 + x * (24.973373446327656 + x * (93.7600979763426 + x * (-284.93544480610933 + x * (-891.4686435725314 + x * (909.4704127603684 + x * (2655.7362799571524 + x * (-1114.598737111069 + x * (-3138.489290016475 + x * (467.026480663371 + 1285.830648030495 * x)))))))));
      s[8] = 0.191752887060472 + x * (-15.412996630821947 + x * (-36.53083598659315 + x * (270.11509274030436 + x * (533.5070128774194 + x * (-1070.8804144524177 + x * (-1974.0994782985995 + x * (1492.559397190727 + x * (2653.172052376314 + (-680.3348627259865 - 1182.4878302230961 * x) * x))))))));
      s[9] = -0.09865545322619368 + x * (10.428246488508563 + x * (19.092840890179044 + x * (-200.09084751036772 + x * (-305.2848433743809 + x * (939.8292592322487 + x * (1338.3316777775665 + x * (-1501.4699383674028 + x * (-2061.75554055702 + x * (759.3494743001718 + 1019.5355840961124 * x)))))))));
      s[10] = 0.056502579963255195 + x * (-6.92778563508287 + x * (-10.997657377995232 + x * (137.1746144871645 + x * (181.46724539809975 + x * (-685.7003111032861 + x * (-846.633836858822 + x * (1200.9537748747232 + x * (1429.8592838955783 + (-667.1898672639503 - 776.7059151858796 * x) * x))))))));
      s[11] = -0.020507812499999993 + x * (2.666015624999999 + x * (3.9990234374999982 + x * (-53.32031249999997 + x * (-66.65039062499996 + x * (271.93359374999983 + x * (317.2558593749998 + x * (-492.07031249999966 + x * (-553.5791015624995 + x * (287.04101562499983 + 315.74511718749983 * x)))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(13);

      s[0] = 0.22558593750000006 + x * (-0.4511718750000001 + x * (-16.9189453125 + x * (22.558593750000004 + x * (191.74804687500003 + x * (-230.09765625000003 + x * (-728.6425781249999 + x * (832.734375 + x * (1092.9638671875 + x * (-1214.404296875 + x * (-558.6259765624999 + 609.4101562499999 * x))))))))));
      s[1] = -0.5829344906221525 + x * (1.2229696203714218 + x * (43.54458996153054 + x * (-60.903024852353205 + x * (-488.5037962063127 + x * (614.9150326227714 + x * (1824.0335121906296 + x * (-2186.707433643393 + x * (-2664.6300069864674 + x * (3105.705892151637 + (1311.8887667645743 - 1501.2447285275866 * x) * x)))))))));
      s[2] = 0.8648651295090922 + x * (-2.043758771527479 + x * (-63.837282454632366 + x * (100.5690571593803 + x * (694.7095812843272 + x * (-984.9989913825746 + x * (-2464.9100558685213 + x * (3328.467146955719 + x * (3357.5974248732045 + x * (-4407.957157588328 + x * (-1534.1046577458828 + 1977.401232588589 * x))))))))));
      s[3] = -1.2442500548652053 + x * (3.626554834214089 + x * (89.12389765764848 + x * (-173.17671295547936 + x * (-897.675239173301 + x * (1569.8460926477837 + x * (2830.512253650378 + x * (-4714.260429584075 + x * (-3466.5954566977234 + x * (5613.286878484706 + (1450.7868275057388 - 2306.4749852399495 * x) * x)))))))));
      s[4] = 1.938479199753327 + x * (-8.028327919993533 + x * (-126.26402622854381 + x * (348.6200272152886 + x * (987.6229941993364 + x * (-2454.17993438375 + x * (-2639.0002135980258 + x * (6245.472989752247 + x * (2892.5332764456516 + x * (-6655.333402526759 + x * (-1119.4438755995889 + 2528.8603530453374 * x))))))))));
      s[5] = -3.9479239708828486 + x * (31.673734111935506 + x * (117.35206047576808 + x * (-627.6679403168364 + x * (-701.9091428048396 + x * (3378.801171031483 + x * (1636.9825084845647 + x * (-7504.754267528118 + x * (-1654.8607060469003 + x * (7375.9748136264725 + (607.542834290628 - 2658.679300843663 * x) * x)))))))));
      s[6] = x * (-52. + x * x * (780. + x * x * (-3788.571428571428 + x * x * (7998.095238095237 + x * x * (-7634.545454545454 + 2701.4545454545446 * x * x)))));
      s[7] = 3.9479239708828486 + x * (31.673734111935506 + x * (-117.35206047576808 + x * (-627.6679403168364 + x * (701.9091428048396 + x * (3378.801171031483 + x * (-1636.9825084845647 + x * (-7504.754267528118 + x * (1654.8607060469003 + x * (7375.9748136264725 + (-607.542834290628 - 2658.679300843663 * x) * x)))))))));
      s[8] = -1.938479199753327 + x * (-8.028327919993533 + x * (126.26402622854381 + x * (348.6200272152886 + x * (-987.6229941993364 + x * (-2454.17993438375 + x * (2639.0002135980258 + x * (6245.472989752247 + x * (-2892.5332764456516 + x * (-6655.333402526759 + x * (1119.4438755995889 + 2528.8603530453374 * x))))))))));
      s[9] = 1.2442500548652053 + x * (3.626554834214089 + x * (-89.12389765764848 + x * (-173.17671295547936 + x * (897.675239173301 + x * (1569.8460926477837 + x * (-2830.512253650378 + x * (-4714.260429584075 + x * (3466.5954566977234 + x * (5613.286878484706 + (-1450.7868275057388 - 2306.4749852399495 * x) * x)))))))));
      s[10] = -0.8648651295090922 + x * (-2.043758771527479 + x * (63.837282454632366 + x * (100.5690571593803 + x * (-694.7095812843272 + x * (-984.9989913825746 + x * (2464.9100558685213 + x * (3328.467146955719 + x * (-3357.5974248732045 + x * (-4407.957157588328 + x * (1534.1046577458828 + 1977.401232588589 * x))))))))));
      s[11] = 0.5829344906221525 + x * (1.2229696203714218 + x * (-43.54458996153054 + x * (-60.903024852353205 + x * (488.5037962063127 + x * (614.9150326227714 + x * (-1824.0335121906296 + x * (-2186.707433643393 + x * (2664.6300069864674 + x * (3105.705892151637 + (-1311.8887667645743 - 1501.2447285275866 * x) * x)))))))));
      s[12] = -0.22558593750000006 + x * (-0.4511718750000001 + x * (16.9189453125 + x * (22.558593750000004 + x * (-191.74804687500003 + x * (-230.09765625000003 + x * (728.6425781249999 + x * (832.734375 + x * (-1092.9638671875 + x * (-1214.404296875 + x * (558.6259765624999 + 609.4101562499999 * x))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(14);

      s[0] = -0.016113281250000003 + x * (-2.9003906250000013 + x * (4.350585937500002 + x * (82.17773437500001 + x * (-102.72216796875004 + x * (-624.5507812500003 + x * (728.6425781250002 + x * (1873.652343750001 + x * (-2107.8588867187514 + x * (-2394.111328125001 + x * (2633.522460937501 + (1088.2324218750002 - 1178.9184570312505 * x) * x))))))))));
      s[1] = 0.04312512707585759 + x * (7.444462293628238 + x * (-11.632759420022396 + x * (-209.87166807711554 + x * (273.2888921909867 + x * (1579.6154282580296 + x * (-1919.8014234264638 + x * (-4667.461469910816 + x * (5470.051520191906 + x * (5836.40796061487 + x * (-6688.003306399669 + x * (-2576.2832060683613 + 2907.4607568511824 * x)))))))))));
      s[2] = -0.06969293589827096 + x * (-10.846668169772908 + x * (18.748539406406515 + x * (301.4124314620466 + x * (-434.1611912829216 + x * (-2206.497937203 + x * (2966.402935374586 + x * (6251.527437779141 + x * (-8104.355642873492 + x * (-7400.152271861014 + x * (9380.223108876864 + (3076.0044033643985 - 3839.979323528488 * x) * x))))))))));
      s[3] = 0.11574329682964127 + x * (15.036223984526135 + x * (-30.944310133414273 + x * (-404.0076130810858 + x * (692.8677089134419 + x * (2774.4957987907055 + x * (-4441.008666433498 + x * (-7205.935663637574 + x * (11122.275855618956 + x * (7841.260362282218 + x * (-11833.938804969277 + x * (-3026.7827016722367 + 4498.773300929925 * x)))))))))));
      s[4] = -0.2237658131830478 + x * (-21.612248821454106 + x * (58.87405270992204 + x * (530.1906908612136 + x * (-1203.5796204406315 + x * (-3095.4318503395043 + x * (6558.443038260715 + x * (7082.960603617142 + x * (-14471.050630755239 + x * (-7015.872832094554 + x * (14015.451989555593 + (2523.0930428266406 - 4963.957867631424 * x) * x))))))))));
      s[5] = 0.6125800096199178 + x * (34.63537859581579 + x * (-151.58864238022417 + x * (-556.5641215406255 + x * (2029.928236251422 + x * (2636.079629709562 + x * (-8973.477535657328 + x * (-5339.299101201093 + x * (17526.380571543763 + x * (4888.873683141516 + x * (-15691.229216781147 + x * (-1665.4595837876368 + 5264.433807363294 * x)))))))))));
      s[6] = -5.466238122747797 + x * (-21.756757257743118 + x * (280.5347855215821 + x * (256.66254600056624 + x * (-2757.870096812743 + x * (-1063.7102879657898 + x * (10667.715973863553 + x * (2004.5558496031936 + x * (-19385.27552633084 + x * (-1756.4055739580294 + x * (16608.055470038777 + (581.195623462193 - 5412.34829394409 * x) * x))))))))));
      s[7] = 5.466238122747797 + x * (-21.756757257743118 + x * (-280.5347855215821 + x * (256.66254600056624 + x * (2757.870096812743 + x * (-1063.7102879657898 + x * (-10667.715973863553 + x * (2004.5558496031936 + x * (19385.27552633084 + x * (-1756.4055739580294 + x * (-16608.055470038777 + x * (581.195623462193 + 5412.34829394409 * x)))))))))));
      s[8] = -0.6125800096199178 + x * (34.63537859581579 + x * (151.58864238022417 + x * (-556.5641215406255 + x * (-2029.928236251422 + x * (2636.079629709562 + x * (8973.477535657328 + x * (-5339.299101201093 + x * (-17526.380571543763 + x * (4888.873683141516 + x * (15691.229216781147 + (-1665.4595837876368 - 5264.433807363294 * x) * x))))))))));
      s[9] = 0.2237658131830478 + x * (-21.612248821454106 + x * (-58.87405270992204 + x * (530.1906908612136 + x * (1203.5796204406315 + x * (-3095.4318503395043 + x * (-6558.443038260715 + x * (7082.960603617142 + x * (14471.050630755239 + x * (-7015.872832094554 + x * (-14015.451989555593 + x * (2523.0930428266406 + 4963.957867631424 * x)))))))))));
      s[10] = -0.11574329682964127 + x * (15.036223984526135 + x * (30.944310133414273 + x * (-404.0076130810858 + x * (-692.8677089134419 + x * (2774.4957987907055 + x * (4441.008666433498 + x * (-7205.935663637574 + x * (-11122.275855618956 + x * (7841.260362282218 + x * (11833.938804969277 + (-3026.7827016722367 - 4498.773300929925 * x) * x))))))))));
      s[11] = 0.06969293589827096 + x * (-10.846668169772908 + x * (-18.748539406406515 + x * (301.4124314620466 + x * (434.1611912829216 + x * (-2206.497937203 + x * (-2966.402935374586 + x * (6251.527437779141 + x * (8104.355642873492 + x * (-7400.152271861014 + x * (-9380.223108876864 + x * (3076.0044033643985 + 3839.979323528488 * x)))))))))));
      s[12] = -0.04312512707585759 + x * (7.444462293628238 + x * (11.632759420022396 + x * (-209.87166807711554 + x * (-273.2888921909867 + x * (1579.6154282580296 + x * (1919.8014234264638 + x * (-4667.461469910816 + x * (-5470.051520191906 + x * (5836.40796061487 + x * (6688.003306399669 + (-2576.2832060683613 - 2907.4607568511824 * x) * x))))))))));
      s[13] = 0.016113281250000003 + x * (-2.9003906250000013 + x * (-4.350585937500002 + x * (82.17773437500001 + x * (102.72216796875004 + x * (-624.5507812500003 + x * (-728.6425781250002 + x * (1873.652343750001 + x * (2107.8588867187514 + x * (-2394.111328125001 + x * (-2633.522460937501 + x * (1088.2324218750002 + 1178.9184570312505 * x)))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(15);

      s[0] = -0.20947265624999997 + x * (0.4189453125 + x * (21.3662109375 + x * (-28.488281250000004 + x * (-338.29833984375 + x * (405.95800781250006 + x * (1894.470703125 + x * (-2165.109375 + x * (-4668.517089843749 + x * (5187.241210937499 + x * (5187.241210937499 + x * (-5658.80859375 + x * (-2122.0532226562495 + 2285.2880859375005 * x))))))))))));
      s[1] = 0.5356855072902406 + x * (-1.1099461651819988 + x * (-54.522112920740376 + x * (75.31360512889778 + x * (858.6670027422081 + x * (-1067.5003903127604 + x * (-4765.665786156911 + x * (5642.577745866995 + x * (11591.315286892144 + x * (-13342.961471287514 + x * (-12651.535166926215 + x * (14298.60965852103 + (5056.089863120308 - 5641.070014471018 * x) * x)))))))))));
      s[2] = -0.7732388425498722 + x * (1.7472704312484553 + x * (78.2288776796519 + x * (-117.84802428243422 + x * (-1213.7947518125543 + x * (1645.6708298198391 + x * (6572.231975580995 + x * (-8486.357063543135 + x * (-15437.653303704003 + x * (19380.065641581787 + x * (16124.755246776487 + x * (-19874.589256677962 + x * (-6136.34339076274 + 7466.392351500433 * x))))))))))));
      s[3] = 1.053799509049798 + x * (-2.7603728441274433 + x * (-105.22595894428363 + x * (183.75594033630284 + x * (1580.1951859255714 + x * (-2483.543316650229 + x * (-8118.321351952103 + x * (12151.725315261541 + x * (17834.77939407292 + x * (-25954.04127720727 + x * (-17408.8443689384 + x * (24873.578028478827 + (6223.3955751628755 - 8777.924655927114 * x) * x)))))))))));
      s[4] = -1.4717254517469394 + x * (4.855151077036711 + x * (142.518491016081 + x * (-313.4410721026029 + x * (-1980.7630966641177 + x * (3920.664987090392 + x * (9092.973812679771 + x * (-17141.30330012896 + x * (-18105.13281696564 + x * (33182.19855923472 + x * (16327.581265375178 + x * (-29380.309537745918 + x * (-5479.7889030817105 + 9734.069977942925 * x))))))))))));
      s[5] = 2.264813641904642 + x * (-10.768467648255442 + x * (-199.40495652440768 + x * (632.0713791500781 + x * (2164.381020943029 + x * (-6174.565510720571 + x * (-8478.164121756761 + x * (23034.840324802233 + x * (15204.28130933123 + x * (-40161.953275379215 + x * (-12750.589675903 + x * (33068.178297283426 + (4059.555892399245 - 10393.328358176479 * x) * x)))))))))));
      s[6] = -4.588914964624965 + x * (42.61741983677969 + x * (184.99392762877488 + x * (-1145.363546980241 + x * (-1543.067691116259 + x * (8598.315392960827 + x * (5296.844509589278 + x * (-28109.706980592004 + x * (-8789.12470987869 + x * (45347.17788484726 + x * (7009.857083925216 + x * (-35509.5257289765 + x * (-2155.97960301185 + 10781.432753053887 * x))))))))))));
      s[7] = x * (-70. + x * x * (1428. + x * x * (-9690. + x * x * (30146.666666666668 + x * x * (-47275.454545454544 + x * x * (36365.73426573427 - 10909.72027972028 * x * x))))));
      s[8] = 4.588914964624965 + x * (42.61741983677969 + x * (-184.99392762877488 + x * (-1145.363546980241 + x * (1543.067691116259 + x * (8598.315392960827 + x * (-5296.844509589278 + x * (-28109.706980592004 + x * (8789.12470987869 + x * (45347.17788484726 + x * (-7009.857083925216 + x * (-35509.5257289765 + x * (2155.97960301185 + 10781.432753053887 * x))))))))))));
      s[9] = -2.264813641904642 + x * (-10.768467648255442 + x * (199.40495652440768 + x * (632.0713791500781 + x * (-2164.381020943029 + x * (-6174.565510720571 + x * (8478.164121756761 + x * (23034.840324802233 + x * (-15204.28130933123 + x * (-40161.953275379215 + x * (12750.589675903 + x * (33068.178297283426 + (-4059.555892399245 - 10393.328358176479 * x) * x)))))))))));
      s[10] = 1.4717254517469394 + x * (4.855151077036711 + x * (-142.518491016081 + x * (-313.4410721026029 + x * (1980.7630966641177 + x * (3920.664987090392 + x * (-9092.973812679771 + x * (-17141.30330012896 + x * (18105.13281696564 + x * (33182.19855923472 + x * (-16327.581265375178 + x * (-29380.309537745918 + x * (5479.7889030817105 + 9734.069977942925 * x))))))))))));
      s[11] = -1.053799509049798 + x * (-2.7603728441274433 + x * (105.22595894428363 + x * (183.75594033630284 + x * (-1580.1951859255714 + x * (-2483.543316650229 + x * (8118.321351952103 + x * (12151.725315261541 + x * (-17834.77939407292 + x * (-25954.04127720727 + x * (17408.8443689384 + x * (24873.578028478827 + (-6223.3955751628755 - 8777.924655927114 * x) * x)))))))))));
      s[12] = 0.7732388425498722 + x * (1.7472704312484553 + x * (-78.2288776796519 + x * (-117.84802428243422 + x * (1213.7947518125543 + x * (1645.6708298198391 + x * (-6572.231975580995 + x * (-8486.357063543135 + x * (15437.653303704003 + x * (19380.065641581787 + x * (-16124.755246776487 + x * (-19874.589256677962 + x * (6136.34339076274 + 7466.392351500433 * x))))))))))));
      s[13] = -0.5356855072902406 + x * (-1.1099461651819988 + x * (54.522112920740376 + x * (75.31360512889778 + x * (-858.6670027422081 + x * (-1067.5003903127604 + x * (4765.665786156911 + x * (5642.577745866995 + x * (-11591.315286892144 + x * (-13342.961471287514 + x * (12651.535166926215 + x * (14298.60965852103 + (-5056.089863120308 - 5641.070014471018 * x) * x)))))))))));
      s[14] = 0.20947265624999997 + x * (0.4189453125 + x * (-21.3662109375 + x * (-28.488281250000004 + x * (338.29833984375 + x * (405.95800781250006 + x * (-1894.470703125 + x * (-2165.109375 + x * (4668.517089843749 + x * (5187.241210937499 + x * (-5187.241210937499 + x * (-5658.80859375 + x * (2122.0532226562495 + 2285.2880859375005 * x))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(16);

      s[0] = 0.013092041015625026 + x * (3.115905761718757 + x * (-4.673858642578136 + x * (-118.40441894531278 + x * (148.00552368164102 + x * (1243.2463989257842 + x * (-1450.4541320800815 + x * (-5446.603271484388 + x * (6127.428680419937 + x * (11347.090148925807 + x * (-12481.799163818388 + x * (-11140.779418945338 + x * (12069.17770385745 + (4142.084655761727 - 4437.947845458994 * x) * x))))))))))));
      s[1] = -0.03440237394195174 + x * (-7.934341866464172 + x * (12.275067072888369 + x * (300.66335098324436 + x * (-387.62538655725467 + x * (-3140.2492628005702 + x * (3778.6147697703195 + x * (13646.037741423068 + x * (-15833.641092192529 + x * (-28110.42250069986 + x * (31892.00063855246 + x * (27192.476729830232 + x * (-30383.134603742936 + x * (-9920.530763015466 + 10962.75825520401 * x)))))))))))));
      s[2] = 0.05303203820658086 + x * (11.3267911346292 + x * (-18.894769383080057 + x * (-425.9577420255462 + x * (592.1339656018472 + x * (4385.0997391745 + x * (-5689.44246296591 + x * (-18645.455974014316 + x * (23327.54174266668 + x * (37303.96815789996 + x * (-45634.27562984376 + x * (-34812.46678761418 + x * (41941.15138793151 + (12198.869896873195 - 14535.37588738418 * x) * x))))))))))));
      s[3] = -0.08059277838611026 + x * (-15.115720712603526 + x * (28.627959204322615 + x * (559.4683031216757 + x * (-882.9899713021063 + x * (-5589.508796868184 + x * (8233.61783374356 + x * (22755.793888680855 + x * (-32323.23245579422 + x * (-43169.87388156813 + x * (59957.530442130985 + x * (38118.70636952359 + x * (-52139.94052584427 + x * (-12667.675414101297 + 17136.827368746082 * x)))))))))))));
      s[4] = 0.1322462961906402 + x * (20.300815726962743 + x * (-46.67650352604118 + x * (-725.9513211578508 + x * (1390.9485977269585 + x * (6804.85781167109 + x * (-12169.126695795794 + x * (-25498.87812513791 + x * (43971.083134998815 + x * (44753.908128822135 + x * (-75460.07269008676 + x * (-36966.90098269431 + x * (61385.91285784231 + (11617.546702369771 - 19079.685794416262 * x) * x))))))))))));
      s[5] = -0.25574581390191786 + x * (-28.78151574486889 + x * (88.82097882124356 + x * (939.7597826466779 + x * (-2416.7821369402664 + x * (-7524.228213801573 + x * (18060.068078411758 + x * (24990.206031433154 + x * (-57840.62713198537 + x * (-40162.029459671794 + x * (90890.5998244328 + x * (31073.6879147696 + x * (-69257.29734230645 + x * (-9291.551649485376 + 20481.516172470154 * x)))))))))))));
      s[6] = 0.7021017873809786 + x * (45.839436803620096 + x * (-229.32677742030222 + x * (-984.2631391526695 + x * (4103.415268139565 + x * (6423.451216843518 + x * (-24994.21238650404 + x * (-18962.080222245044 + x * (71148.00683277515 + x * (28266.00046519445 + x * (-103700.60329660763 + x * (-20774.769268453365 + x * (75062.41818363509 + (5987.409802073429 - 21395.69722287364 * x) * x))))))))))));
      s[7] = -6.277470788189986 + x * (-28.751371102994234 + x * (425.62560681903597 + x * (454.68518452978174 + x * (-5609.171845632999 + x * (-2602.6688931445688 + x * (29967.025692938736 + x * (7160.979931344586 + x * (-79506.5499079815 + x * (-10228.641058902573 + x * (111042.32667113247 + x * (7310.045443583776 + x * (-78155.60191799895 + x * (-2066.153230475991 + 21847.597144701835 * x)))))))))))));
      s[8] = 6.277470788189986 + x * (-28.751371102994234 + x * (-425.62560681903597 + x * (454.68518452978174 + x * (5609.171845632999 + x * (-2602.6688931445688 + x * (-29967.025692938736 + x * (7160.979931344586 + x * (79506.5499079815 + x * (-10228.641058902573 + x * (-111042.32667113247 + x * (7310.045443583776 + x * (78155.60191799895 + (-2066.153230475991 - 21847.597144701835 * x) * x))))))))))));
      s[9] = -0.7021017873809786 + x * (45.839436803620096 + x * (229.32677742030222 + x * (-984.2631391526695 + x * (-4103.415268139565 + x * (6423.451216843518 + x * (24994.21238650404 + x * (-18962.080222245044 + x * (-71148.00683277515 + x * (28266.00046519445 + x * (103700.60329660763 + x * (-20774.769268453365 + x * (-75062.41818363509 + x * (5987.409802073429 + 21395.69722287364 * x)))))))))))));
      s[10] = 0.25574581390191786 + x * (-28.78151574486889 + x * (-88.82097882124356 + x * (939.7597826466779 + x * (2416.7821369402664 + x * (-7524.228213801573 + x * (-18060.068078411758 + x * (24990.206031433154 + x * (57840.62713198537 + x * (-40162.029459671794 + x * (-90890.5998244328 + x * (31073.6879147696 + x * (69257.29734230645 + (-9291.551649485376 - 20481.516172470154 * x) * x))))))))))));
      s[11] = -0.1322462961906402 + x * (20.300815726962743 + x * (46.67650352604118 + x * (-725.9513211578508 + x * (-1390.9485977269585 + x * (6804.85781167109 + x * (12169.126695795794 + x * (-25498.87812513791 + x * (-43971.083134998815 + x * (44753.908128822135 + x * (75460.07269008676 + x * (-36966.90098269431 + x * (-61385.91285784231 + x * (11617.546702369771 + 19079.685794416262 * x)))))))))))));
      s[12] = 0.08059277838611026 + x * (-15.115720712603526 + x * (-28.627959204322615 + x * (559.4683031216757 + x * (882.9899713021063 + x * (-5589.508796868184 + x * (-8233.61783374356 + x * (22755.793888680855 + x * (32323.23245579422 + x * (-43169.87388156813 + x * (-59957.530442130985 + x * (38118.70636952359 + x * (52139.94052584427 + (-12667.675414101297 - 17136.827368746082 * x) * x))))))))))));
      s[13] = -0.05303203820658086 + x * (11.3267911346292 + x * (18.894769383080057 + x * (-425.9577420255462 + x * (-592.1339656018472 + x * (4385.0997391745 + x * (5689.44246296591 + x * (-18645.455974014316 + x * (-23327.54174266668 + x * (37303.96815789996 + x * (45634.27562984376 + x * (-34812.46678761418 + x * (-41941.15138793151 + x * (12198.869896873195 + 14535.37588738418 * x)))))))))))));
      s[14] = 0.03440237394195174 + x * (-7.934341866464172 + x * (-12.275067072888369 + x * (300.66335098324436 + x * (387.62538655725467 + x * (-3140.2492628005702 + x * (-3778.6147697703195 + x * (13646.037741423068 + x * (15833.641092192529 + x * (-28110.42250069986 + x * (-31892.00063855246 + x * (27192.476729830232 + x * (30383.134603742936 + (-9920.530763015466 - 10962.75825520401 * x) * x))))))))))));
      s[15] = -0.013092041015625026 + x * (3.115905761718757 + x * (4.673858642578136 + x * (-118.40441894531278 + x * (-148.00552368164102 + x * (1243.2463989257842 + x * (1450.4541320800815 + x * (-5446.603271484388 + x * (-6127.428680419937 + x * (11347.090148925807 + x * (12481.799163818388 + x * (-11140.779418945338 + x * (-12069.17770385745 + x * (4142.084655761727 + 4437.947845458994 * x)))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(17);

      s[0] = 0.1963806152343753 + x * (-0.3927612304687506 + x * (-26.118621826171918 + x * (34.82482910156255 + x * (548.4910583496103 + x * (-658.1892700195324 + x * (-4205.098114013679 + x * (4805.826416015633 + x * (15018.207550048854 + x * (-16686.89727783206 + x * (-27032.773590087938 + x * (29490.298461914113 + x * (23756.073760986368 + x * (-25583.464050293016 + x * (-8092.728424072281 + 8632.243652343766 * x))))))))))))));
      s[1] = -0.49879890575153146 + x * (1.025141122099502 + x * (66.25648384207142 + x * (-90.78106816064667 + x * (-1387.103059239475 + x * (1710.480560666757 + x * (10580.52709644782 + x * (-12425.887518411482 + x * (-37512.99704907402 + x * (42831.90797018679 + x * (66868.69057458822 + x * (-74961.72071662455 + x * (-58035.0013767881 + x * (64224.81318855592 + (19465.497497540815 - 21336.46161262884 * x) * x)))))))))))));
      s[2] = 0.7075624137968644 + x * (-1.5535798721447518 + x * (-93.67011635178785 + x * (137.1129995488741 + x * (1944.904747264485 + x * (-2562.2318057072607 + x * (-14636.00548074881 + x * (18363.410637596684 + x * (50910.65005338069 + x * (-62101.91156008634 + x * (-88539.24805431267 + x * (106038.41454177367 + x * (74587.75667430094 + x * (-88184.25783710263 + x * (-24192.649537997757 + 28330.288244602925 * x))))))))))))));
      s[3] = -0.9336911556183038 + x * (2.2893108904688426 + x * (122.77213800320709 + x * (-200.6827710181184 + x * (-2507.234666884246 + x * (3688.4828093234655 + x * (18368.51799454474 + x * (-25735.79560077932 + x * (-61614.933953075015 + x * (83929.5725867273 + x * (102616.36324340876 + x * (-137238.73730030007 + x * (-82576.07407599471 + x * (109021.07204851002 + (25600.97632759063 - 33477.79034396833 * x) * x)))))))))))));
      s[4] = 1.2310964237727344 + x * (-3.5630818917449405 + x * (-159.69481740609035 + x * (308.12951291089445 + x * (3153.9709121459487 + x * (-5476.999084954888 + x * (-21928.464074771557 + x * (36266.35423737958 + x * (68999.53701504819 + x * (-110944.91604289014 + x * (-107931.13761910483 + x * (170388.0192027426 + x * (82084.7850207973 + x * (-127923.72205992076 + x * (-24225.95703915049 + 37394.98858396395 * x))))))))))))));
      s[5] = -1.69416804819576 + x * (6.2586395949801625 + x * (213.06623287534148 + x * (-524.7432066915361 + x * (-3895.7769552413224 + x * (8635.128232261612 + x * (24293.355937422217 + x * (-51282.94075054172 + x * (-69637.58313589092 + x * (142920.5376963516 + x * (101174.23012052766 + x * (-203869.34620103118 + x * (-72604.8614047436 + x * (144425.48846038408 + (20462.840314543664 - 40316.98988531066 * x) * x)))))))))))));
      s[6] = 2.588888735299733 + x * (-13.912233091875011 + x * (-296.0174462271316 + x * (1060.4971559213884 + x * (4242.808234004108 + x * (-13680.063490737333 + x * (-22675.630601555797 + x * (69631.3450483664 + x * (58779.99296491161 + x * (-175485.1956612328 + x * (-79690.83974319094 + x * (233587.9461283087 + x * (54412.54069225461 + x * (-157448.001422687 + x * (-14777.562616313877 + 42353.07972767643 * x))))))))))))));
      s[7] = -5.228815178420851 + x * (55.18189781201828 + x * (274.35043649079256 + x * (-1930.224118279085 + x * (-3031.590199395254 + x * (19196.192049167174 + x * (14235.438481666919 + x * (-85847.2013585146 + x * (-34213.377586684444 + x * (200593.46794534114 + x * (44185.76987345385 + x * (-254351.51747342647 + x * (-29183.1583102491 + x * (165836.5751690567 + (7738.788007726662 - 43557.70801702885 * x) * x)))))))))))));
      s[8] = x * (-90.66666666666666 + x * x * (2411.7333333333327 + x * x * (-21705.6 + x * x * (92449.77777777775 + x * x * (-210113.13131313128 + x * x * (261833.28671328668 + x * x * (-168737.00699300691 + 43956.699300699285 * x * x)))))));
      s[9] = 5.228815178420851 + x * (55.18189781201828 + x * (-274.35043649079256 + x * (-1930.224118279085 + x * (3031.590199395254 + x * (19196.192049167174 + x * (-14235.438481666919 + x * (-85847.2013585146 + x * (34213.377586684444 + x * (200593.46794534114 + x * (-44185.76987345385 + x * (-254351.51747342647 + x * (29183.1583102491 + x * (165836.5751690567 + (-7738.788007726662 - 43557.70801702885 * x) * x)))))))))))));
      s[10] = -2.588888735299733 + x * (-13.912233091875011 + x * (296.0174462271316 + x * (1060.4971559213884 + x * (-4242.808234004108 + x * (-13680.063490737333 + x * (22675.630601555797 + x * (69631.3450483664 + x * (-58779.99296491161 + x * (-175485.1956612328 + x * (79690.83974319094 + x * (233587.9461283087 + x * (-54412.54069225461 + x * (-157448.001422687 + x * (14777.562616313877 + 42353.07972767643 * x))))))))))))));
      s[11] = 1.69416804819576 + x * (6.2586395949801625 + x * (-213.06623287534148 + x * (-524.7432066915361 + x * (3895.7769552413224 + x * (8635.128232261612 + x * (-24293.355937422217 + x * (-51282.94075054172 + x * (69637.58313589092 + x * (142920.5376963516 + x * (-101174.23012052766 + x * (-203869.34620103118 + x * (72604.8614047436 + x * (144425.48846038408 + (-20462.840314543664 - 40316.98988531066 * x) * x)))))))))))));
      s[12] = -1.2310964237727344 + x * (-3.5630818917449405 + x * (159.69481740609035 + x * (308.12951291089445 + x * (-3153.9709121459487 + x * (-5476.999084954888 + x * (21928.464074771557 + x * (36266.35423737958 + x * (-68999.53701504819 + x * (-110944.91604289014 + x * (107931.13761910483 + x * (170388.0192027426 + x * (-82084.7850207973 + x * (-127923.72205992076 + x * (24225.95703915049 + 37394.98858396395 * x))))))))))))));
      s[13] = 0.9336911556183038 + x * (2.2893108904688426 + x * (-122.77213800320709 + x * (-200.6827710181184 + x * (2507.234666884246 + x * (3688.4828093234655 + x * (-18368.51799454474 + x * (-25735.79560077932 + x * (61614.933953075015 + x * (83929.5725867273 + x * (-102616.36324340876 + x * (-137238.73730030007 + x * (82576.07407599471 + x * (109021.07204851002 + (-25600.97632759063 - 33477.79034396833 * x) * x)))))))))))));
      s[14] = -0.7075624137968644 + x * (-1.5535798721447518 + x * (93.67011635178785 + x * (137.1129995488741 + x * (-1944.904747264485 + x * (-2562.2318057072607 + x * (14636.00548074881 + x * (18363.410637596684 + x * (-50910.65005338069 + x * (-62101.91156008634 + x * (88539.24805431267 + x * (106038.41454177367 + x * (-74587.75667430094 + x * (-88184.25783710263 + x * (24192.649537997757 + 28330.288244602925 * x))))))))))))));
      s[15] = 0.49879890575153146 + x * (1.025141122099502 + x * (-66.25648384207142 + x * (-90.78106816064667 + x * (1387.103059239475 + x * (1710.480560666757 + x * (-10580.52709644782 + x * (-12425.887518411482 + x * (37512.99704907402 + x * (42831.90797018679 + x * (-66868.69057458822 + x * (-74961.72071662455 + x * (58035.0013767881 + x * (64224.81318855592 + (-19465.497497540815 - 21336.46161262884 * x) * x)))))))))))));
      s[16] = -0.1963806152343753 + x * (-0.3927612304687506 + x * (26.118621826171918 + x * (34.82482910156255 + x * (-548.4910583496103 + x * (-658.1892700195324 + x * (4205.098114013679 + x * (4805.826416015633 + x * (-15018.207550048854 + x * (-16686.89727783206 + x * (27032.773590087938 + x * (29490.298461914113 + x * (-23756.073760986368 + x * (-25583.464050293016 + x * (8092.728424072281 + 8632.243652343766 * x))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(18);

      s[0] = -0.010910034179687491 + x * (-3.3166503906249973 + x * (4.9749755859374964 + x * (162.51586914062486 + x * (-203.14483642578102 + x * (-2242.718994140623 + x * (2616.50549316406 + x * (13349.517822265614 + x * (-15018.207550048814 + x * (-40048.55346679683 + x * (44053.40881347653 + x * (63349.53002929683 + x * (-68628.65753173822 + x * (-50354.754638671846 + x * (53951.522827148394 + (15825.780029296862 - 16814.89128112792 * x) * x))))))))))))));
      s[1] = 0.028317098144308016 + x * (8.399965356387952 + x * (-12.908386740452812 + x * (-410.9054522624228 + x * (526.2051951530153 + x * (5652.6042785419995 + x * (-6756.1391711731285 + x * (-33486.45183064437 + x * (38594.45120807395 + x * (99806.30652375864 + x * (-112474.45150009808 + x * (-156547.6744172834 + x * (173744.85030253715 + x * (123127.89684472515 + x * (-135152.13146526413 + x * (-38201.29768993573 + 41582.468706728694 * x)))))))))))))));
      s[2] = -0.04231556230364813 + x * (-11.829157629608773 + x * (19.273070271294618 + x * (576.089254591811 + x * (-782.1780323065517 + x * (-7859.30989430159 + x * (9959.488394294216 + x * (45983.237933490076 + x * (-56189.85331057285 + x * (-134777.8952820388 + x * (161033.85216626019 + x * (207002.79481625571 + x * (-243581.41112453988 + x * (-158791.6996238283 + x * (184797.8215702756 + (47898.47094032548 - 55278.52105238617 * x) * x))))))))))))));
      s[3] = 0.0608183969535408 + x * (15.405185217521652 + x * (-27.654328154000552 + x * (-743.7776559684992 + x * (1112.6487110960788 + x * (9984.321684034678 + x * (-13940.241046743178 + x * (-57045.28072225947 + x * (76802.82111779618 + x * (162149.6653330749 + x * (-213458.60678521066 + x * (-240261.9448412069 + x * (311495.6765552764 + x * (177361.4299203105 + x * (-227419.3079251733 + x * (-51470.59592251814 + 65447.50032490625 * x)))))))))))))));
      s[4] = -0.09081523346055195 + x * (-19.859676840831884 + x * (41.16397146613596 + x * (943.0980361428709 + x * (-1628.9985045533706 + x * (-12277.22476398765 + x * (19792.507968281127 + x * (67172.65782120527 + x * (-104423.65422224003 + x * (-181441.1658796703 + x * (275792.43235441524 + x * (255368.16569930772 + x * (-382280.9841041786 + x * (-179666.13376025713 + x * (266001.00519591325 + (49927.08623316151 - 73302.53466721819 * x) * x))))))))))))));
      s[5] = 0.14858392400981524 + x * (26.252407457568705 + x * (-66.91297826286076 + x * (-1204.1063604309995 + x * (2557.554097718346 + x * (14713.862044452548 + x * (-29169.12722572395 + x * (-74315.73855584553 + x * (142063.75377038267 + x * (186506.74932774494 + x * (-348607.88271695224 + x * (-246704.4178248103 + x * (454139.207912597 + x * (164903.1258823179 + x * (-300221.6979113694 + x * (-43929.973532453434 + 79312.17240087787 * x)))))))))))))));
      s[6] = -0.28776538211375796 + x * (-36.928099584309834 + x * (127.5097422276149 + x * (1546.7882409342155 + x * (-4450.7789484250425 + x * (-16196.246106118117 + x * (43496.699818335524 + x * (72794.2673969393 + x * (-188514.53992860432 + x * (-167920.45907576007 + x * (425198.23046710226 + x * (208771.67776335933 + x * (-520629.5785353385 + x * (-133177.38857873884 + x * (328464.82526425546 + (34220.95380930509 - 83698.21560698352 * x) * x))))))))))))));
      s[7] = 0.7917297460452679 + x * (58.586743650697 + x * (-329.9265663801743 + x * (-1618.0800543603636 + x * (7593.407131572294 + x * (13853.724282544821 + x * (-60679.22118579227 + x * (-55492.32632222498 + x * (234375.4518056668 + x * (118997.90374959914 + x * (-491426.6047063852 + x * (-140798.50252108113 + x * (572646.7634117106 + x * (86701.0275695513 + x * (-348749.93587289075 + x * (-21703.809600498294 + 86574.81614386552 * x)))))))))))))));
      s[8] = -7.088550603806908 + x * (-36.710717236799844 + x * (613.5557888906874 + x * (748.378122212764 + x * (-10423.198903127963 + x * (-5629.012531026083 + x * (73172.67541337498 + x * (21040.116457074142 + x * (-263736.7141569648 + x * (-43272.55122991184 + x * (530365.3162919469 + x * (49820.371296162426 + x * (-601366.1732795737 + x * (-30103.503615409016 + x * (359376.9320819734 + (7433.3857333166925 - 88000.58067438428 * x) * x))))))))))))));
      s[9] = 7.088550603806908 + x * (-36.710717236799844 + x * (-613.5557888906874 + x * (748.378122212764 + x * (10423.198903127963 + x * (-5629.012531026083 + x * (-73172.67541337498 + x * (21040.116457074142 + x * (263736.7141569648 + x * (-43272.55122991184 + x * (-530365.3162919469 + x * (49820.371296162426 + x * (601366.1732795737 + x * (-30103.503615409016 + x * (-359376.9320819734 + x * (7433.3857333166925 + 88000.58067438428 * x)))))))))))))));
      s[10] = -0.7917297460452679 + x * (58.586743650697 + x * (329.9265663801743 + x * (-1618.0800543603636 + x * (-7593.407131572294 + x * (13853.724282544821 + x * (60679.22118579227 + x * (-55492.32632222498 + x * (-234375.4518056668 + x * (118997.90374959914 + x * (491426.6047063852 + x * (-140798.50252108113 + x * (-572646.7634117106 + x * (86701.0275695513 + x * (348749.93587289075 + (-21703.809600498294 - 86574.81614386552 * x) * x))))))))))))));
      s[11] = 0.28776538211375796 + x * (-36.928099584309834 + x * (-127.5097422276149 + x * (1546.7882409342155 + x * (4450.7789484250425 + x * (-16196.246106118117 + x * (-43496.699818335524 + x * (72794.2673969393 + x * (188514.53992860432 + x * (-167920.45907576007 + x * (-425198.23046710226 + x * (208771.67776335933 + x * (520629.5785353385 + x * (-133177.38857873884 + x * (-328464.82526425546 + x * (34220.95380930509 + 83698.21560698352 * x)))))))))))))));
      s[12] = -0.14858392400981524 + x * (26.252407457568705 + x * (66.91297826286076 + x * (-1204.1063604309995 + x * (-2557.554097718346 + x * (14713.862044452548 + x * (29169.12722572395 + x * (-74315.73855584553 + x * (-142063.75377038267 + x * (186506.74932774494 + x * (348607.88271695224 + x * (-246704.4178248103 + x * (-454139.207912597 + x * (164903.1258823179 + x * (300221.6979113694 + (-43929.973532453434 - 79312.17240087787 * x) * x))))))))))))));
      s[13] = 0.09081523346055195 + x * (-19.859676840831884 + x * (-41.16397146613596 + x * (943.0980361428709 + x * (1628.9985045533706 + x * (-12277.22476398765 + x * (-19792.507968281127 + x * (67172.65782120527 + x * (104423.65422224003 + x * (-181441.1658796703 + x * (-275792.43235441524 + x * (255368.16569930772 + x * (382280.9841041786 + x * (-179666.13376025713 + x * (-266001.00519591325 + x * (49927.08623316151 + 73302.53466721819 * x)))))))))))))));
      s[14] = -0.0608183969535408 + x * (15.405185217521652 + x * (27.654328154000552 + x * (-743.7776559684992 + x * (-1112.6487110960788 + x * (9984.321684034678 + x * (13940.241046743178 + x * (-57045.28072225947 + x * (-76802.82111779618 + x * (162149.6653330749 + x * (213458.60678521066 + x * (-240261.9448412069 + x * (-311495.6765552764 + x * (177361.4299203105 + x * (227419.3079251733 + (-51470.59592251814 - 65447.50032490625 * x) * x))))))))))))));
      s[15] = 0.04231556230364813 + x * (-11.829157629608773 + x * (-19.273070271294618 + x * (576.089254591811 + x * (782.1780323065517 + x * (-7859.30989430159 + x * (-9959.488394294216 + x * (45983.237933490076 + x * (56189.85331057285 + x * (-134777.8952820388 + x * (-161033.85216626019 + x * (207002.79481625571 + x * (243581.41112453988 + x * (-158791.6996238283 + x * (-184797.8215702756 + x * (47898.47094032548 + 55278.52105238617 * x)))))))))))))));
      s[16] = -0.028317098144308016 + x * (8.399965356387952 + x * (12.908386740452812 + x * (-410.9054522624228 + x * (-526.2051951530153 + x * (5652.6042785419995 + x * (6756.1391711731285 + x * (-33486.45183064437 + x * (-38594.45120807395 + x * (99806.30652375864 + x * (112474.45150009808 + x * (-156547.6744172834 + x * (-173744.85030253715 + x * (123127.89684472515 + x * (135152.13146526413 + (-38201.29768993573 - 41582.468706728694 * x) * x))))))))))))));
      s[17] = 0.010910034179687491 + x * (-3.3166503906249973 + x * (-4.9749755859374964 + x * (162.51586914062486 + x * (203.14483642578102 + x * (-2242.718994140623 + x * (-2616.50549316406 + x * (13349.517822265614 + x * (15018.207550048814 + x * (-40048.55346679683 + x * (-44053.40881347653 + x * (63349.53002929683 + x * (68628.65753173822 + x * (-50354.754638671846 + x * (-53951.522827148394 + x * (15825.780029296862 + 16814.89128112792 * x)))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(19);

      s[0] = -0.18547058105468767 + x * (0.37094116210937533 + x * (31.159057617187532 + x * (-41.54541015625004 + x * (-836.1013793945323 + x * (1003.3216552734389 + x * (8361.013793945323 + x * (-9555.444335937511 + x * (-40312.03079223637 + x * (44791.145324707075 + x * (103915.45715332043 + x * (-113362.31689453137 + x * (-146426.32598876968 + x * (157689.88952636736 + x * (106199.3133544923 + x * (-113279.26757812513 + x * (-30974.79972839359 + 32796.84677124027 * x))))))))))))))));
      s[1] = 0.46888238808559246 + x * (-0.9582602708645284 + x * (-78.71008279958262 + x * (107.24046111897472 + x * (2108.028530134227 + x * (-2584.921133665395 + x * (-21014.77615748434 + x * (24541.792635338825 + x * (100875.06855628415 + x * (-114533.06957434119 + x * (-258524.135277969 + x * (288190.2089558023 + x * (361616.33425640775 + x * (-397944.3010954755 + x * (-259917.6425401157 + x * (283304.87630087114 + (74992.57413567696 - 81139.3289624432 * x) * x)))))))))))))));
      s[2] = -0.6573338680009646 + x * (1.4152928982866035 + x * (110.118661505736 + x * (-158.06291362191592 + x * (-2934.6131744926315 + x * (3791.0754828822833 + x * (29019.72281562374 + x * (-35703.88948495954 + x * (-137729.3237788149 + x * (164745.75327786844 + x * (347820.7609770461 + x * (-408483.3738097248 + x * (-477813.9689704565 + x * (553954.1857400903 + x * (336229.402356588 + x * (-386095.4955691645 + x * (-94723.7402769084 + 107972.39746020136 * x))))))))))))))));
      s[3] = 0.8494054000963955 + x * (-1.9928320962169361 + x * (-141.74171182389637 + x * (221.69816883146427 + x * (3741.8673939226637 + x * (-5267.388298838541 + x * (-36443.08240025626 + x * (48857.66933236376 + x * (169371.8888409934 + x * (-220762.10032787762 + x * (-416681.9059549563 + x * (533235.308544701 + x * (555374.2584852293 + x * (-701610.5739900393 + x * (-378295.3430507404 + x * (473353.30582725746 + (103085.3857464598 - 128040.2106675216 * x) * x)))))))))))))));
      s[4] = -1.0816007858340868 + x * (2.8785339451992993 + x * (179.2081133161056 + x * (-317.9587417660911 + x * (-4649.826993248931 + x * (7424.930721948011 + x * (44057.83482343763 + x * (-67002.26170176033 + x * (-197471.95157739488 + x * (291969.35756144754 + x * (465956.24965293217 + x * (-676406.9596088491 + x * (-594999.4320087215 + x * (852659.4309175054 + x * (388933.54473242234 + x * (-552050.0973998383 + x * (-102012.11169361805 + 143730.74839339388 * x))))))))))))))));
      s[5] = 1.402529761895951 + x * (-4.46020548563671 + x * (-229.19461557703383 + x * (485.91010779131506 + x * (5749.531332965218 + x * (-10970.5013987578 + x * (-51726.67351170741 + x * (93998.14503300657 + x * (217985.2232082614 + x * (-385121.1158086717 + x * (-484790.2834592122 + x * (840921.1076673035 + x * (587421.8085961477 + x * (-1.005883155393649e6 + x * (-367051.43995616736 + x * (622541.6921074667 + (92644.57391843644 - 155975.48978095048 * x) * x)))))))))))))));
      s[6] = -1.913756208003585 + x * (7.839579738996325 + x * (303.16655933419105 + x * (-827.9349292795255 + x * (-7043.32571613823 + x * (17311.519622551295 + x * (56982.83471290361 + x * (-133386.59023923927 + x * (-219520.80805185635 + x * (499584.96161579643 + x * (455043.875321683 + x * (-1.016758959182068e6 + x * (-521985.3127186489 + x * (1.1513812169170908e6 + x * (312402.95044731087 + x * (-682527.2952355967 + x * (-76184.69613974945 + 165221.85624605374 * x))))))))))))))));
      s[7] = 2.9115577108894164 + x * (-17.46036214994737 + x * (-419.3451466150455 + x * (1676.5179450933358 + x * (7656.829267120887 + x * (-27550.409478246023 + x * (-53251.60153361141 + x * (182483.02409473888 + x * (186017.48123234021 + x * (-619739.3879171463 + x * (-360654.65227492765 + x * (1.1797173006984824e6 + x * (394408.3138438298 + x * (-1.2735869288840326e6 + x * (-227841.27197836395 + x * (728717.1136958875 + (54083.299582481704 - 171705.66041154426 * x) * x)))))))))))))));
      s[8] = -5.867989857766719 + x * (69.36731225807392 + x * (388.4170214724045 + x * (-3061.0646880113054 + x * (-5479.818676447079 + x * (38867.17282685271 + x * (33544.24041549749 + x * (-226592.44533355124 + x * (-108793.1207602185 + x * (714487.1831209438 + x * (201153.89740256377 + x * (-1.2970374911962901e6 + x * (-212975.68357136517 + x * (1.355658250248156e6 + x * (120218.22646224024 + x * (-757939.5289813369 + x * (-28051.222604302373 + 175554.06719591407 * x))))))))))))))));
      s[9] = x * (-114. + x * x * (3830.4000000000005 + x * x * (-44049.600000000006 + x * x * (244720. + x * x * (-750845.4545454546 + x * x * (1.3399703496503497e6 + x * x * (-1.3846360279720281e6 + x * x * (767949.3936651583 - 176830.45248868776 * x * x))))))));
      s[10] = 5.867989857766719 + x * (69.36731225807392 + x * (-388.4170214724045 + x * (-3061.0646880113054 + x * (5479.818676447079 + x * (38867.17282685271 + x * (-33544.24041549749 + x * (-226592.44533355124 + x * (108793.1207602185 + x * (714487.1831209438 + x * (-201153.89740256377 + x * (-1.2970374911962901e6 + x * (212975.68357136517 + x * (1.355658250248156e6 + x * (-120218.22646224024 + x * (-757939.5289813369 + x * (28051.222604302373 + 175554.06719591407 * x))))))))))))))));
      s[11] = -2.9115577108894164 + x * (-17.46036214994737 + x * (419.3451466150455 + x * (1676.5179450933358 + x * (-7656.829267120887 + x * (-27550.409478246023 + x * (53251.60153361141 + x * (182483.02409473888 + x * (-186017.48123234021 + x * (-619739.3879171463 + x * (360654.65227492765 + x * (1.1797173006984824e6 + x * (-394408.3138438298 + x * (-1.2735869288840326e6 + x * (227841.27197836395 + x * (728717.1136958875 + (-54083.299582481704 - 171705.66041154426 * x) * x)))))))))))))));
      s[12] = 1.913756208003585 + x * (7.839579738996325 + x * (-303.16655933419105 + x * (-827.9349292795255 + x * (7043.32571613823 + x * (17311.519622551295 + x * (-56982.83471290361 + x * (-133386.59023923927 + x * (219520.80805185635 + x * (499584.96161579643 + x * (-455043.875321683 + x * (-1.016758959182068e6 + x * (521985.3127186489 + x * (1.1513812169170908e6 + x * (-312402.95044731087 + x * (-682527.2952355967 + x * (76184.69613974945 + 165221.85624605374 * x))))))))))))))));
      s[13] = -1.402529761895951 + x * (-4.46020548563671 + x * (229.19461557703383 + x * (485.91010779131506 + x * (-5749.531332965218 + x * (-10970.5013987578 + x * (51726.67351170741 + x * (93998.14503300657 + x * (-217985.2232082614 + x * (-385121.1158086717 + x * (484790.2834592122 + x * (840921.1076673035 + x * (-587421.8085961477 + x * (-1.005883155393649e6 + x * (367051.43995616736 + x * (622541.6921074667 + (-92644.57391843644 - 155975.48978095048 * x) * x)))))))))))))));
      s[14] = 1.0816007858340868 + x * (2.8785339451992993 + x * (-179.2081133161056 + x * (-317.9587417660911 + x * (4649.826993248931 + x * (7424.930721948011 + x * (-44057.83482343763 + x * (-67002.26170176033 + x * (197471.95157739488 + x * (291969.35756144754 + x * (-465956.24965293217 + x * (-676406.9596088491 + x * (594999.4320087215 + x * (852659.4309175054 + x * (-388933.54473242234 + x * (-552050.0973998383 + x * (102012.11169361805 + 143730.74839339388 * x))))))))))))))));
      s[15] = -0.8494054000963955 + x * (-1.9928320962169361 + x * (141.74171182389637 + x * (221.69816883146427 + x * (-3741.8673939226637 + x * (-5267.388298838541 + x * (36443.08240025626 + x * (48857.66933236376 + x * (-169371.8888409934 + x * (-220762.10032787762 + x * (416681.9059549563 + x * (533235.308544701 + x * (-555374.2584852293 + x * (-701610.5739900393 + x * (378295.3430507404 + x * (473353.30582725746 + (-103085.3857464598 - 128040.2106675216 * x) * x)))))))))))))));
      s[16] = 0.6573338680009646 + x * (1.4152928982866035 + x * (-110.118661505736 + x * (-158.06291362191592 + x * (2934.6131744926315 + x * (3791.0754828822833 + x * (-29019.72281562374 + x * (-35703.88948495954 + x * (137729.3237788149 + x * (164745.75327786844 + x * (-347820.7609770461 + x * (-408483.3738097248 + x * (477813.9689704565 + x * (553954.1857400903 + x * (-336229.402356588 + x * (-386095.4955691645 + x * (94723.7402769084 + 107972.39746020136 * x))))))))))))))));
      s[17] = -0.46888238808559246 + x * (-0.9582602708645284 + x * (78.71008279958262 + x * (107.24046111897472 + x * (-2108.028530134227 + x * (-2584.921133665395 + x * (21014.77615748434 + x * (24541.792635338825 + x * (-100875.06855628415 + x * (-114533.06957434119 + x * (258524.135277969 + x * (288190.2089558023 + x * (-361616.33425640775 + x * (-397944.3010954755 + x * (259917.6425401157 + x * (283304.87630087114 + (-74992.57413567696 - 81139.3289624432 * x) * x)))))))))))))));
      s[18] = 0.18547058105468767 + x * (0.37094116210937533 + x * (-31.159057617187532 + x * (-41.54541015625004 + x * (836.1013793945323 + x * (1003.3216552734389 + x * (-8361.013793945323 + x * (-9555.444335937511 + x * (40312.03079223637 + x * (44791.145324707075 + x * (-103915.45715332043 + x * (-113362.31689453137 + x * (146426.32598876968 + x * (157689.88952636736 + x * (-106199.3133544923 + x * (-113279.26757812513 + x * (30974.79972839359 + 32796.84677124027 * x))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(20);

      s[0] = 0.009273529052734373 + x * (3.5053939819335933 + x * (-5.258090972900389 + x * (-214.99749755859372 + x * (268.7468719482422 + x * (3762.4562072753897 + x * (-4389.532241821287 + x * (-29024.662170410156 + x * (32652.74494171142 + x * (116904.88929748537 + x * (-128595.37822723392 + x * (-263567.38677978516 + x * (285531.3356781006 + x * (334527.8370666504 + x * (-358422.6825714112 + x * (-223018.55804443354 + x * (236957.21792221066 + (60674.16652679443 - 64044.95355606079 * x) * x))))))))))))))));
      s[1] = -0.02386101525412459 + x * (-8.843926368071932 + x * (13.526357075667239 + x * (541.8436280148763 + x * (-690.6029899950861 + x * (-9463.289923071488 + x * (11257.278384921474 + x * (72784.30850934683 + x * (-83490.0562342863 + x * (-291972.5405405329 + x * (327475.7645569866 + x * (654853.9401424457 + x * (-723354.22422897 + x * (-825838.8269326576 + x * (902200.350769945 + x * (546309.7725757491 + x * (-591850.9906974324 + x * (-147270.00049688082 + 158503.86437909078 * x)))))))))))))))));
      s[2] = 0.034894730214532106 + x * (12.335922489614585 + x * (-19.770490090808767 + x * (-753.6957508331996 + x * (1006.6085711518066 + x * (13095.624835170333 + x * (-16324.036557844038 + x * (-99952.26119562887 + x * (120143.33694049402 + x * (396853.6842859991 + x * (-466420.51689343253 + x * (-878624.1965739031 + x * (1.0169973228139838e6 + x * (1.0908568373936205e6 + x * (-1.2487788241639289e6 + x * (-708641.5382544716 + x * (804470.4360727719 + (187178.0828025231 - 211101.1672623338 * x) * x))))))))))))))));
      s[3] = -0.0483013175060241 + x * (-15.79967500621317 + x * (27.338925556210878 + x * (960.3504492084555 + x * (-1384.7832011554547 + x * (-16527.236772251235 + x * (22242.780093200578 + x * (124377.3571383119 + x * (-161412.0214345575 + x * (-484768.0112551114 + x * (615132.493682163 + x * (1.0493529699227451e6 + x * (-1.3113714726661132e6 + x * (-1.2697112459769025e6 + x * (1.569315337091957e6 + x * (802187.3025962169 + x * (-983211.0522480481 + x * (-205869.33923617462 + 250677.17745939436 * x)))))))))))))))));
      s[4] = 0.06790281628853896 + x * (19.83173181277838 + x * (-38.36576658766146 + x * (-1194.4592740067349 + x * (1925.632203045181 + x * (20211.76928570264 + x * (-30411.86838242853 + x * (-148440.78205600026 + x * (215376.21311446262 + x * (561062.7009810603 + x * (-795968.8346300885 + x * (-1.1729500091300528e6 + x * (1.6388288084734953e6 + x * (1.3688336508952295e6 + x * (-1.8914979590488006e6 + x * (-834629.6275069715 + x * (1.1437068343979986e6 + (207095.48376207807 - 281931.5664883061 * x) * x))))))))))))))));
      s[5] = -0.10079719696668206 + x * (-25.1208760033639 + x * (56.76808316027696 + x * (1487.7182763725007 + x * (-2801.617892785958 + x * (-24407.307680243346 + x * (42898.77162756269 + x * (171740.51629439482 + x * (-291074.0426513266 + x * (-617970.9144126348 + x * (1.0240918530824676e6 + x * (1.2306431963062498e6 + x * (-2.00850285035494e6 + x * (-1.3734462759873676e6 + x * (2.2169356673987866e6 + x * (804846.0510418403 + x * (-1.288308723059945e6 + x * (-192873.54554437677 + 306712.83555214753 * x)))))))))))))))));
      s[6] = 0.1648824967827661 + x * (32.903773102234815 + x * (-92.25479996385624 + x * (-1881.8487914939215 + x * (4396.901617789056 + x * (28994.233893462522 + x * (-63228.14467862415 + x * (-188736.18967607617 + x * (396880.4589007202 + x * (632852.0744122164 + x * (-1.3012085368898436e6 + x * (-1.1881954355142924e6 + x * (2.4060353106512288e6 + x * (1.2637334926268929e6 + x * (-2.5308751979745487e6 + x * (-711982.9639714065 + x * (1.414003718701063e6 + (165187.54748312832 - 325919.5499176245 * x) * x))))))))))))))));
      s[7] = -0.3198366016458618 + x * (-46.055434906288816 + x * (176.07389267371494 + x * (2405.85279045716 + x * (-7664.8186198083295 + x * (-31834.753251917165 + x * (94661.00187848012 + x * (184913.51752002386 + x * (-530205.2228578667 + x * (-571404.636379721 + x * (1.6019880202527093e6 + x * (1.0107115157382211e6 + x * (-2.7906934895205647e6 + x * (-1.0279842175551589e6 + x * (2.807194403880137e6 + x * (559627.9947390424 + x * (-1.515483419254725e6 + x * (-126391.6803133299 + 340034.04551960423 * x)))))))))))))))));
      s[8] = 0.881437631776773 + x * (72.87789804913518 + x * (-456.33925524557566 + x * (-2514.9658670370345 + x * (13123.293452174215 + x * (27271.420121688436 + x * (-132817.4920986171 + x * (-141441.17637995884 + x * (664246.2545376724 + x * (406931.48701440124 + x * (-1.8685929786688657e6 + x * (-685874.8922230449 + x * (3.1017568018509923e6 + x * (674101.4077777517 + x * (-3.015013003353448e6 + x * (-357821.94873391703 + x * (1.5870720647341697e6 + (79277.17654139218 - 349325.2690670793 * x) * x))))))))))))))));
      s[9] = -7.899525043335517 + x * (-45.63480715175878 + x * (849.8530537260336 + x * (1164.2020368764915 + x * (-18067.361259708658 + x * (-11102.916715816105 + x * (160820.06466336653 + x * (53779.37201599683 + x * (-751146.4338493733 + x * (-148488.73340316224 + x * (2.027881384745405e6 + x * (243650.2981114161 + x * (-3.277067704086247e6 + x * (-235072.65930805774 + x * (3.1269555259821783e6 + x * (123123.51555835156 + x * (-1.6241506370813698e6 + x * (-27007.891525153904 + 353938.7698561345 * x)))))))))))))))));
      s[10] = 7.899525043335517 + x * (-45.63480715175878 + x * (-849.8530537260336 + x * (1164.2020368764915 + x * (18067.361259708658 + x * (-11102.916715816105 + x * (-160820.06466336653 + x * (53779.37201599683 + x * (751146.4338493733 + x * (-148488.73340316224 + x * (-2.027881384745405e6 + x * (243650.2981114161 + x * (3.277067704086247e6 + x * (-235072.65930805774 + x * (-3.1269555259821783e6 + x * (123123.51555835156 + x * (1.6241506370813698e6 + (-27007.891525153904 - 353938.7698561345 * x) * x))))))))))))))));
      s[11] = -0.881437631776773 + x * (72.87789804913518 + x * (456.33925524557566 + x * (-2514.9658670370345 + x * (-13123.293452174215 + x * (27271.420121688436 + x * (132817.4920986171 + x * (-141441.17637995884 + x * (-664246.2545376724 + x * (406931.48701440124 + x * (1.8685929786688657e6 + x * (-685874.8922230449 + x * (-3.1017568018509923e6 + x * (674101.4077777517 + x * (3.015013003353448e6 + x * (-357821.94873391703 + x * (-1.5870720647341697e6 + x * (79277.17654139218 + 349325.2690670793 * x)))))))))))))))));
      s[12] = 0.3198366016458618 + x * (-46.055434906288816 + x * (-176.07389267371494 + x * (2405.85279045716 + x * (7664.8186198083295 + x * (-31834.753251917165 + x * (-94661.00187848012 + x * (184913.51752002386 + x * (530205.2228578667 + x * (-571404.636379721 + x * (-1.6019880202527093e6 + x * (1.0107115157382211e6 + x * (2.7906934895205647e6 + x * (-1.0279842175551589e6 + x * (-2.807194403880137e6 + x * (559627.9947390424 + x * (1.515483419254725e6 + (-126391.6803133299 - 340034.04551960423 * x) * x))))))))))))))));
      s[13] = -0.1648824967827661 + x * (32.903773102234815 + x * (92.25479996385624 + x * (-1881.8487914939215 + x * (-4396.901617789056 + x * (28994.233893462522 + x * (63228.14467862415 + x * (-188736.18967607617 + x * (-396880.4589007202 + x * (632852.0744122164 + x * (1.3012085368898436e6 + x * (-1.1881954355142924e6 + x * (-2.4060353106512288e6 + x * (1.2637334926268929e6 + x * (2.5308751979745487e6 + x * (-711982.9639714065 + x * (-1.414003718701063e6 + x * (165187.54748312832 + 325919.5499176245 * x)))))))))))))))));
      s[14] = 0.10079719696668206 + x * (-25.1208760033639 + x * (-56.76808316027696 + x * (1487.7182763725007 + x * (2801.617892785958 + x * (-24407.307680243346 + x * (-42898.77162756269 + x * (171740.51629439482 + x * (291074.0426513266 + x * (-617970.9144126348 + x * (-1.0240918530824676e6 + x * (1.2306431963062498e6 + x * (2.00850285035494e6 + x * (-1.3734462759873676e6 + x * (-2.2169356673987866e6 + x * (804846.0510418403 + x * (1.288308723059945e6 + (-192873.54554437677 - 306712.83555214753 * x) * x))))))))))))))));
      s[15] = -0.06790281628853896 + x * (19.83173181277838 + x * (38.36576658766146 + x * (-1194.4592740067349 + x * (-1925.632203045181 + x * (20211.76928570264 + x * (30411.86838242853 + x * (-148440.78205600026 + x * (-215376.21311446262 + x * (561062.7009810603 + x * (795968.8346300885 + x * (-1.1729500091300528e6 + x * (-1.6388288084734953e6 + x * (1.3688336508952295e6 + x * (1.8914979590488006e6 + x * (-834629.6275069715 + x * (-1.1437068343979986e6 + x * (207095.48376207807 + 281931.5664883061 * x)))))))))))))))));
      s[16] = 0.0483013175060241 + x * (-15.79967500621317 + x * (-27.338925556210878 + x * (960.3504492084555 + x * (1384.7832011554547 + x * (-16527.236772251235 + x * (-22242.780093200578 + x * (124377.3571383119 + x * (161412.0214345575 + x * (-484768.0112551114 + x * (-615132.493682163 + x * (1.0493529699227451e6 + x * (1.3113714726661132e6 + x * (-1.2697112459769025e6 + x * (-1.569315337091957e6 + x * (802187.3025962169 + x * (983211.0522480481 + (-205869.33923617462 - 250677.17745939436 * x) * x))))))))))))))));
      s[17] = -0.034894730214532106 + x * (12.335922489614585 + x * (19.770490090808767 + x * (-753.6957508331996 + x * (-1006.6085711518066 + x * (13095.624835170333 + x * (16324.036557844038 + x * (-99952.26119562887 + x * (-120143.33694049402 + x * (396853.6842859991 + x * (466420.51689343253 + x * (-878624.1965739031 + x * (-1.0169973228139838e6 + x * (1.0908568373936205e6 + x * (1.2487788241639289e6 + x * (-708641.5382544716 + x * (-804470.4360727719 + x * (187178.0828025231 + 211101.1672623338 * x)))))))))))))))));
      s[18] = 0.02386101525412459 + x * (-8.843926368071932 + x * (-13.526357075667239 + x * (541.8436280148763 + x * (690.6029899950861 + x * (-9463.289923071488 + x * (-11257.278384921474 + x * (72784.30850934683 + x * (83490.0562342863 + x * (-291972.5405405329 + x * (-327475.7645569866 + x * (654853.9401424457 + x * (723354.22422897 + x * (-825838.8269326576 + x * (-902200.350769945 + x * (546309.7725757491 + x * (591850.9906974324 + (-147270.00049688082 - 158503.86437909078 * x) * x))))))))))))))));
      s[19] = -0.009273529052734373 + x * (3.5053939819335933 + x * (5.258090972900389 + x * (-214.99749755859372 + x * (-268.7468719482422 + x * (3762.4562072753897 + x * (4389.532241821287 + x * (-29024.662170410156 + x * (-32652.74494171142 + x * (116904.88929748537 + x * (128595.37822723392 + x * (-263567.38677978516 + x * (-285531.3356781006 + x * (334527.8370666504 + x * (358422.6825714112 + x * (-223018.55804443354 + x * (-236957.21792221066 + x * (60674.16652679443 + 64044.95355606079 * x)))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(21);

      s[0] = 0.17619705200195304 + x * (-0.35239410400390614 + x * (-36.472789764404276 + x * (48.630386352539034 + x * (1215.7596588134759 + x * (-1458.911590576171 + x * (-15318.571701049797 + x * (17506.939086914055 + x * (95193.98128509516 + x * (-105771.0903167724 + x * (-327890.3799819945 + x * (357698.59634399385 + x * (655780.7599639889 + x * (-706225.4338073727 + x * (-756670.1076507564 + x * (807114.78149414 + x * (466613.23305129993 + x * (-494061.0702896116 + x * (-118940.62803268425 + 125200.66108703607 * x))))))))))))))))));
      s[1] = -0.4439381104077079 + x * (0.9036243173999805 + x * (91.84752558301992 + x * (-124.63547757983852 + x * (-3057.7739673637752 + x * (3734.410967535462 + x * (38450.332685847665 + x * (-44722.65044221997 + x * (-238264.4710767545 + x * (269433.91556147445 + x * (817649.3035578704 + x * (-907801.9617580973 + x * (-1.627724672648193e6 + x * (1.784025734197345e6 + x * (1.8675841629295712e6 + x * (-2.0274231022750796e6 + x * (-1.1439809427663116e6 + x * (1.2327580816041676e6 + (289323.05947600666 - 309952.3464833484 * x) * x)))))))))))))))));
      s[2] = 0.6171831785953372 + x * (-1.3104006557008128 + x * (-127.52178975113755 + x * (180.50247500949885 + x * (4231.96583246534 + x * (-5391.174932266291 + x * (-52942.75879320815 + x * (64233.049435177454 + x * (325720.91691648355 + x * (-384205.1345403119 + x * (-1.1074207868056041e6 + x * (1.2825114683746216e6 + x * (2.1794578820859157e6 + x * (-2.4916852960903305e6 + x * (-2.4668210760792284e6 + x * (2.793356715001243e6 + x * (1.4875528923735642e6 + x * (-1.672076047744718e6 + x * (-369679.714211302 + 413106.510780583 * x))))))))))))))))));
      s[3] = -0.7860469919465505 + x * (1.7879032876916823 + x * (162.01986156723578 + x * (-245.68153145659045 + x * (-5345.651107087181 + x * (7295.3708522279385 + x * (66252.4888353189 + x * (-86111.20405198204 + x * (-402368.30026675126 + x * (508448.2609255985 + x * (1.3457587570319436e6 + x * (-1.6696340485692855e6 + x * (-2.597225731807422e6 + x * (3.180972375449353e6 + x * (2.875241593146289e6 + x * (-3.4879366076669535e6 + x * (-1.6927096332889413e6 + x * (2.038316249854932e6 + (410250.4490401807 - 491123.7958858397 * x) * x)))))))))))))))));
      s[4] = 0.9781415492159006 + x * (-2.4576361367256445 + x * (-200.7785126657248 + x * (336.31160275379057 + x * (6558.50928508671 + x * (-9887.176003309942 + x * (-79997.25410738 + x * (114855.79402561826 + x * (475469.99160842906 + x * (-663691.8496908953 + x * (-1.5489892777796332e6 + x * (2.122867331712381e6 + x * (2.9025589445174905e6 + x * (-3.9269160124811097e6 + x * (-3.115489294384907e6 + x * (4.174849924110356e6 + x * (1.778449542752551e6 + x * (-2.3656528458627807e6 + x * (-418370.9621219748 + 553253.0412510451 * x))))))))))))))))));
      s[5] = -1.223014459978085 + x * (3.524278227544726 + x * (249.21628056045597 + x * (-478.76649065110325 + x * (-7998.4715850711955 + x * (13829.193447838717 + x * (94896.98233865073 + x * (-156261.84535255196 + x * (-544178.8959938886 + x * (871179.776509371 + x * (1.7028064562471253e6 + x * (-2.6764704228131827e6 + x * (-3.0639803531948277e6 + x * (4.75421982777763e6 + x * (3.1651184388107737e6 + x * (-4.864377701285633e6 + x * (-1.7445968999603963e6 + x * (2.661504958068145e6 + (397691.20126797695 - 603157.8391278912 * x) * x)))))))))))))))));
      s[6] = 1.5705866773083 + x * (-5.455017385954593 + x * (-315.6132822518173 + x * (730.7995017812905 + x * (9792.501249082106 + x * (-20406.99771779835 + x * (-110372.99295619053 + x * (219057.94065537344 + x * (596128.647788669 + x * (-1.1502750974580413e6 + x * (-1.7625104062879155e6 + x * (3.3390620141457478e6 + x * (3.017767820809656e6 + x * (-5.643840618968166e6 + x * (-2.988344959566765e6 + x * (5.535587075475681e6 + x * (1.589397332476557e6 + x * (-2.9225388817342855e6 + x * (-351548.3226975562 + 642636.9002324316 * x))))))))))))))))));
      s[7] = -2.1315612623891824 + x * (9.599124114218183 + x * (415.2068462741184 + x * (-1246.5423414544653 + x * (-11934.666522174006 + x * (32247.44619718165 + x * (121196.62806332111 + x * (-311879.10289905645 + x * (-599856.325855992 + x * (1.5007506011335952e6 + x * (1.6571136563642658e6 + x * (-4.070470855708613e6 + x * (-2.6921594224093095e6 + x * (6.528136846078093e6 + x * (2.5586638906354653e6 + x * (-6.145337738717414e6 + x * (-1.3172400273343995e6 + x * (3.140452979462036e6 + (283806.1641600282 - 672669.9251467274 * x) * x)))))))))))))))));
      s[8] = 3.233287771627264 + x * (-21.41322102011345 + x * (-572.6298015838017 + x * (2528.251812621977 + x * (12960.199981240283 + x * (-51499.21311028192 + x * (-113380.52127424891 + x * (429079.7714107353 + x * (509818.4151022807 + x * (-1.8757746111673121e6 + x * (-1.319438008211745e6 + x * (4.766341938400174e6 + x * (2.0463732332147807e6 + x * (-7.297551594361996e6 + x * (-1.8794568875721833e6 + x * (6.638481293997182e6 + x * (942740.4266222195 + x * (-3.3053949472846603e6 + x * (-199049.30280348245 + 693816.621262315 * x))))))))))))))))));
      s[9] = -6.506656850126473 + x * (85.17373935564382 + x * (530.1890324488392 + x * (-4626.869937377098 + x * (-9286.437578350182 + x * (72937.0518894489 + x * (71597.40960697268 + x * (-535558.6918680082 + x * (-299205.8726703803 + x * (2.1759325017705667e6 + x * (739053.0986420519 + x * (-5.276938325862004e6 + x * (-1.1104372084347964e6 + x * (7.827021095283479e6 + x * (997057.7966457522 + x * (-6.960923689907279e6 + x * (-491832.2717582841 + x * (3.4084617192113665e6 + (102530.6858076688 - 706395.7412822972 * x) * x)))))))))))))))));
      s[10] = x * (-140. + x * x * (5796.000000000001 + x * x * (-82800. + x * x * (579600.0000000001 + x * x * (-2.292054545454545e6 + x * x * (5.465668531468532e6 + x * x * (-8.016313846153847e6 + x * x * (7.073218099547513e6 + x * x * (-3.4435403905691844e6 + 710571.8266253871 * x * x)))))))));
      s[11] = 6.506656850126473 + x * (85.17373935564382 + x * (-530.1890324488392 + x * (-4626.869937377098 + x * (9286.437578350182 + x * (72937.0518894489 + x * (-71597.40960697268 + x * (-535558.6918680082 + x * (299205.8726703803 + x * (2.1759325017705667e6 + x * (-739053.0986420519 + x * (-5.276938325862004e6 + x * (1.1104372084347964e6 + x * (7.827021095283479e6 + x * (-997057.7966457522 + x * (-6.960923689907279e6 + x * (491832.2717582841 + x * (3.4084617192113665e6 + (-102530.6858076688 - 706395.7412822972 * x) * x)))))))))))))))));
      s[12] = -3.233287771627264 + x * (-21.41322102011345 + x * (572.6298015838017 + x * (2528.251812621977 + x * (-12960.199981240283 + x * (-51499.21311028192 + x * (113380.52127424891 + x * (429079.7714107353 + x * (-509818.4151022807 + x * (-1.8757746111673121e6 + x * (1.319438008211745e6 + x * (4.766341938400174e6 + x * (-2.0463732332147807e6 + x * (-7.297551594361996e6 + x * (1.8794568875721833e6 + x * (6.638481293997182e6 + x * (-942740.4266222195 + x * (-3.3053949472846603e6 + x * (199049.30280348245 + 693816.621262315 * x))))))))))))))))));
      s[13] = 2.1315612623891824 + x * (9.599124114218183 + x * (-415.2068462741184 + x * (-1246.5423414544653 + x * (11934.666522174006 + x * (32247.44619718165 + x * (-121196.62806332111 + x * (-311879.10289905645 + x * (599856.325855992 + x * (1.5007506011335952e6 + x * (-1.6571136563642658e6 + x * (-4.070470855708613e6 + x * (2.6921594224093095e6 + x * (6.528136846078093e6 + x * (-2.5586638906354653e6 + x * (-6.145337738717414e6 + x * (1.3172400273343995e6 + x * (3.140452979462036e6 + (-283806.1641600282 - 672669.9251467274 * x) * x)))))))))))))))));
      s[14] = -1.5705866773083 + x * (-5.455017385954593 + x * (315.6132822518173 + x * (730.7995017812905 + x * (-9792.501249082106 + x * (-20406.99771779835 + x * (110372.99295619053 + x * (219057.94065537344 + x * (-596128.647788669 + x * (-1.1502750974580413e6 + x * (1.7625104062879155e6 + x * (3.3390620141457478e6 + x * (-3.017767820809656e6 + x * (-5.643840618968166e6 + x * (2.988344959566765e6 + x * (5.535587075475681e6 + x * (-1.589397332476557e6 + x * (-2.9225388817342855e6 + x * (351548.3226975562 + 642636.9002324316 * x))))))))))))))))));
      s[15] = 1.223014459978085 + x * (3.524278227544726 + x * (-249.21628056045597 + x * (-478.76649065110325 + x * (7998.4715850711955 + x * (13829.193447838717 + x * (-94896.98233865073 + x * (-156261.84535255196 + x * (544178.8959938886 + x * (871179.776509371 + x * (-1.7028064562471253e6 + x * (-2.6764704228131827e6 + x * (3.0639803531948277e6 + x * (4.75421982777763e6 + x * (-3.1651184388107737e6 + x * (-4.864377701285633e6 + x * (1.7445968999603963e6 + x * (2.661504958068145e6 + (-397691.20126797695 - 603157.8391278912 * x) * x)))))))))))))))));
      s[16] = -0.9781415492159006 + x * (-2.4576361367256445 + x * (200.7785126657248 + x * (336.31160275379057 + x * (-6558.50928508671 + x * (-9887.176003309942 + x * (79997.25410738 + x * (114855.79402561826 + x * (-475469.99160842906 + x * (-663691.8496908953 + x * (1.5489892777796332e6 + x * (2.122867331712381e6 + x * (-2.9025589445174905e6 + x * (-3.9269160124811097e6 + x * (3.115489294384907e6 + x * (4.174849924110356e6 + x * (-1.778449542752551e6 + x * (-2.3656528458627807e6 + x * (418370.9621219748 + 553253.0412510451 * x))))))))))))))))));
      s[17] = 0.7860469919465505 + x * (1.7879032876916823 + x * (-162.01986156723578 + x * (-245.68153145659045 + x * (5345.651107087181 + x * (7295.3708522279385 + x * (-66252.4888353189 + x * (-86111.20405198204 + x * (402368.30026675126 + x * (508448.2609255985 + x * (-1.3457587570319436e6 + x * (-1.6696340485692855e6 + x * (2.597225731807422e6 + x * (3.180972375449353e6 + x * (-2.875241593146289e6 + x * (-3.4879366076669535e6 + x * (1.6927096332889413e6 + x * (2.038316249854932e6 + (-410250.4490401807 - 491123.7958858397 * x) * x)))))))))))))))));
      s[18] = -0.6171831785953372 + x * (-1.3104006557008128 + x * (127.52178975113755 + x * (180.50247500949885 + x * (-4231.96583246534 + x * (-5391.174932266291 + x * (52942.75879320815 + x * (64233.049435177454 + x * (-325720.91691648355 + x * (-384205.1345403119 + x * (1.1074207868056041e6 + x * (1.2825114683746216e6 + x * (-2.1794578820859157e6 + x * (-2.4916852960903305e6 + x * (2.4668210760792284e6 + x * (2.793356715001243e6 + x * (-1.4875528923735642e6 + x * (-1.672076047744718e6 + x * (369679.714211302 + 413106.510780583 * x))))))))))))))))));
      s[19] = 0.4439381104077079 + x * (0.9036243173999805 + x * (-91.84752558301992 + x * (-124.63547757983852 + x * (3057.7739673637752 + x * (3734.410967535462 + x * (-38450.332685847665 + x * (-44722.65044221997 + x * (238264.4710767545 + x * (269433.91556147445 + x * (-817649.3035578704 + x * (-907801.9617580973 + x * (1.627724672648193e6 + x * (1.784025734197345e6 + x * (-1.8675841629295712e6 + x * (-2.0274231022750796e6 + x * (1.1439809427663116e6 + x * (1.2327580816041676e6 + (-289323.05947600666 - 309952.3464833484 * x) * x)))))))))))))))));
      s[20] = -0.17619705200195304 + x * (-0.35239410400390614 + x * (36.472789764404276 + x * (48.630386352539034 + x * (-1215.7596588134759 + x * (-1458.911590576171 + x * (15318.571701049797 + x * (17506.939086914055 + x * (-95193.98128509516 + x * (-105771.0903167724 + x * (327890.3799819945 + x * (357698.59634399385 + x * (-655780.7599639889 + x * (-706225.4338073727 + x * (756670.1076507564 + x * (807114.78149414 + x * (-466613.23305129993 + x * (-494061.0702896116 + x * (118940.62803268425 + 125200.66108703607 * x))))))))))))))))));
    }

    // 2nd derivative

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(2);

      s[0] = 0.;
      s[1] = 0.;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(3);

      s[0] = 1.;
      s[1] = -2.;
      s[2] = 1.;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(4);

      s[0] = 1.125 - 3.375 * x;
      s[1] = -1.125 + 10.125 * x;
      s[2] = -1.125 - 10.125 * x;
      s[3] = 1.125 + 3.375 * x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(5);

      s[0] = -0.3333333333333333 + x * (-4. + 8. * x);
      s[1] = 5.333333333333333 + (8. - 32. * x) * x;
      s[2] = -10. + 48. * x * x;
      s[3] = 5.333333333333333 + (-8. - 32. * x) * x;
      s[4] = -0.3333333333333333 + x * (4. + 8. * x);
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(6);

      s[0] = -0.6510416666666666 + x * (1.953125 + (9.765625 - 16.276041666666668 * x) * x);
      s[1] = 5.078125 + x * (-25.390625 + x * (-29.296875 + 81.38020833333333 * x));
      s[2] = -4.427083333333333 + x * (66.40625 + (19.53125 - 162.76041666666666 * x) * x);
      s[3] = -4.427083333333333 + x * (-66.40625 + x * (19.53125 + 162.76041666666666 * x));
      s[4] = 5.078125 + x * (25.390625 + (-29.296875 - 81.38020833333333 * x) * x);
      s[5] = -0.6510416666666666 + x * (-1.953125 + x * (9.765625 + 16.276041666666668 * x));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(7);

      s[0] = 0.1 + x * (3.375 + x * (-6.75 + x * (-20.25 + 30.375 * x)));
      s[1] = -1.35 + x * (-27. + x * (81. + (81. - 182.25 * x) * x));
      s[2] = 13.5 + x * (43.875 + x * (-263.25 + x * (-101.25 + 455.625 * x)));
      s[3] = -24.5 + x * x * (378. - 607.5 * x * x);
      s[4] = 13.5 + x * (-43.875 + x * (-263.25 + x * (101.25 + 455.625 * x)));
      s[5] = -1.35 + x * (27. + x * (81. + (-81. - 182.25 * x) * x));
      s[6] = 0.1 + x * (-3.375 + x * (-6.75 + x * (20.25 + 30.375 * x)));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(8);

      s[0] = 0.2754123263888889 + x * (-0.8262369791666667 + x * (-10.942057291666666 + x * (18.23676215277778 + (38.297200520833336 - 53.61608072916667 * x) * x)));
      s[1] = -2.653103298611111 + x * (11.143033854166667 + x * (92.22591145833333 + x * (-215.19379340277777 + x * (-191.48600260416666 + 375.31256510416665 * x))));
      s[2] = 12.4318359375 + x * (-87.0228515625 + x * (-211.025390625 + x * (820.654296875 + (344.6748046875 - 1125.9376953125 * x) * x)));
      s[3] = -10.054144965277779 + x * (211.13704427083334 + x * (129.74153645833334 + x * (-1513.6512586805557 + x * (-191.48600260416666 + 1876.5628255208333 * x))));
      s[4] = -10.054144965277779 + x * (-211.13704427083334 + x * (129.74153645833334 + x * (1513.6512586805557 + (-191.48600260416666 - 1876.5628255208333 * x) * x)));
      s[5] = 12.4318359375 + x * (87.0228515625 + x * (-211.025390625 + x * (-820.654296875 + x * (344.6748046875 + 1125.9376953125 * x))));
      s[6] = -2.653103298611111 + x * (-11.143033854166667 + x * (92.22591145833333 + x * (215.19379340277777 + (-191.48600260416666 - 375.31256510416665 * x) * x)));
      s[7] = 0.2754123263888889 + x * (0.8262369791666667 + x * (-10.942057291666666 + x * (-18.23676215277778 + x * (38.297200520833336 + 53.61608072916667 * x))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(9);

      s[0] = -0.02857142857142857 + x * (-1.8666666666666667 + x * (3.7333333333333334 + x * (28.444444444444443 + x * (-42.666666666666664 + x * (-68.26666666666667 + 91.02222222222223 * x)))));
      s[1] = 0.40634920634920635 + x * (19.2 + x * (-51.2 + x * (-256. + x * (512. + (409.6 - 728.1777777777778 * x) * x))));
      s[2] = -3.2 + x * (-90.13333333333334 + x * (360.53333333333336 + x * (739.5555555555555 + x * (-2218.6666666666665 + x * (-955.7333333333333 + 2548.6222222222223 * x)))));
      s[3] = 25.6 + x * (130.13333333333333 + x * (-1041.0666666666666 + x * (-824.8888888888889 + x * (4949.333333333333 + (955.7333333333333 - 5097.2444444444445 * x) * x))));
      s[4] = -45.55555555555556 + x * x * (1456. + x * x * (-6400. + 6371.555555555556 * x * x));
      s[5] = 25.6 + x * (-130.13333333333333 + x * (-1041.0666666666666 + x * (824.8888888888889 + x * (4949.333333333333 + (-955.7333333333333 - 5097.2444444444445 * x) * x))));
      s[6] = -3.2 + x * (90.13333333333334 + x * (360.53333333333336 + x * (-739.5555555555555 + x * (-2218.6666666666665 + x * (955.7333333333333 + 2548.6222222222223 * x)))));
      s[7] = 0.40634920634920635 + x * (-19.2 + x * (-51.2 + x * (256. + x * (512. + (-409.6 - 728.1777777777778 * x) * x))));
      s[8] = -0.02857142857142857 + x * (1.8666666666666667 + x * (3.7333333333333334 + x * (-28.444444444444443 + x * (-42.666666666666664 + x * (68.26666666666667 + 91.02222222222223 * x)))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(10);

      s[0] = -0.10135672433035714 + x * (0.3040701729910714 + x * (7.5284912109375 + x * (-12.5474853515625 + x * (-64.8731689453125 + x * (90.8224365234375 + (116.7717041015625 - 150.13504813058034 * x) * x)))));
      s[1] = 1.1647705078125 + x * (-4.492686244419643 + x * (-82.5998291015625 + x * (176.9996337890625 + x * (627.1072998046875 + x * (-1128.7931396484375 + x * (-817.4019287109375 + 1351.2154331752233 * x))))));
      s[2] = -6.412876674107143 + x * (34.62953404017857 + x * (402.58740234375 + x * (-1207.76220703125 + x * (-2162.43896484375 + x * (5449.34619140625 + (2335.43408203125 - 5404.861732700893 * x) * x)))));
      s[3] = 23.38857421875 + x * (-210.49716796875 + x * (-787.44814453125 + x * (3937.24072265625 + x * (3373.40478515625 + x * (-14168.30009765625 + x * (-3269.60771484375 + 12611.34404296875 * x))))));
      s[4] = -18.039111328125 + x * (487.056005859375 + x * (459.932080078125 + x * (-6898.981201171875 + x * (-1773.199951171875 + x * (22342.319384765626 + (1634.803857421875 - 18917.016064453124 * x) * x)))));
      s[5] = -18.039111328125 + x * (-487.056005859375 + x * (459.932080078125 + x * (6898.981201171875 + x * (-1773.199951171875 + x * (-22342.319384765626 + x * (1634.803857421875 + 18917.016064453124 * x))))));
      s[6] = 23.38857421875 + x * (210.49716796875 + x * (-787.44814453125 + x * (-3937.24072265625 + x * (3373.40478515625 + x * (14168.30009765625 + (-3269.60771484375 - 12611.34404296875 * x) * x)))));
      s[7] = -6.412876674107143 + x * (-34.62953404017857 + x * (402.58740234375 + x * (1207.76220703125 + x * (-2162.43896484375 + x * (-5449.34619140625 + x * (2335.43408203125 + 5404.861732700893 * x))))));
      s[8] = 1.1647705078125 + x * (4.492686244419643 + x * (-82.5998291015625 + x * (-176.9996337890625 + x * (627.1072998046875 + x * (1128.7931396484375 + (-817.4019287109375 - 1351.2154331752233 * x) * x)))));
      s[9] = -0.10135672433035714 + x * (-0.3040701729910714 + x * (7.5284912109375 + x * (12.5474853515625 + x * (-64.8731689453125 + x * (-90.8224365234375 + x * (116.7717041015625 + 150.13504813058034 * x))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(11);

      s[0] = 0.007936507936507936 + x * (0.8473875661375662 + x * (-1.6947751322751323 + x * (-23.509837962962962 + x * (35.26475694444444 + x * (135.63368055555554 + x * (-180.84490740740742 + x * (-193.76240079365078 + 242.2030009920635 * x)))))));
      s[1] = -0.12400793650793651 + x * (-10.424933862433862 + x * (26.062334656084655 + x * (274.88425925925924 + x * (-515.4079861111111 + x * (-1410.5902777777778 + x * (2350.983796296296 + (1550.0992063492063 - 2422.0300099206347 * x) * x))))));
      s[2] = 0.9920634920634921 + x * (60.379464285714285 + x * (-201.26488095238096 + x * (-1416.015625 + x * (3540.0390625 + x * (5615.234375 + x * (-12478.298611111111 + x * (-5231.584821428572 + 10899.135044642857 * x)))))));
      s[3] = -5.9523809523809526 + x * (-216.71626984126985 + x * (1083.5813492063492 + x * (3385.4166666666665 + x * (-12695.3125 + x * (-11067.708333333334 + x * (36892.36111111111 + (9300.595238095239 - 29064.36011904762 * x) * x))))));
      s[4] = 41.666666666666664 + x * (289.75694444444446 + x * (-2897.5694444444443 + x * (-3504.7743055555557 + x * (26285.807291666668 + x * (10253.90625 + x * (-68359.375 + x * (-8138.020833333333 + 50862.630208333336 * x)))))));
      s[5] = -73.18055555555556 + x * x * (3981.7708333333335 + x * x * (-33300.78125 + x * x * (83550.34722222222 - 61035.15625 * x * x)));
      s[6] = 41.666666666666664 + x * (-289.75694444444446 + x * (-2897.5694444444443 + x * (3504.7743055555557 + x * (26285.807291666668 + x * (-10253.90625 + x * (-68359.375 + x * (8138.020833333333 + 50862.630208333336 * x)))))));
      s[7] = -5.9523809523809526 + x * (216.71626984126985 + x * (1083.5813492063492 + x * (-3385.4166666666665 + x * (-12695.3125 + x * (11067.708333333334 + x * (36892.36111111111 + (-9300.595238095239 - 29064.36011904762 * x) * x))))));
      s[8] = 0.9920634920634921 + x * (-60.379464285714285 + x * (-201.26488095238096 + x * (1416.015625 + x * (3540.0390625 + x * (-5615.234375 + x * (-12478.298611111111 + x * (5231.584821428572 + 10899.135044642857 * x)))))));
      s[9] = -0.12400793650793651 + x * (10.424933862433862 + x * (26.062334656084655 + x * (-274.88425925925924 + x * (-515.4079861111111 + x * (1410.5902777777778 + x * (2350.983796296296 + (-1550.0992063492063 - 2422.0300099206347 * x) * x))))));
      s[10] = 0.007936507936507936 + x * (-0.8473875661375662 + x * (-1.6947751322751323 + x * (23.509837962962962 + x * (35.26475694444444 + x * (-135.63368055555554 + x * (-180.84490740740742 + x * (193.76240079365078 + 242.2030009920635 * x)))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(12);

      s[0] = 0.03442612663147941 + x * (-0.10327837989443825 + x * (-4.0853368527044065 + x * (6.808894754507344 + x * (62.77402225070529 + x * (-87.88363115098741 + x * (-266.51426990650316 + x * (342.6612041655041 + (314.10610381837876 - 383.90746022246293 * x) * x)))))));
      s[1] = -0.46124456738668773 + x * (1.691230080417855 + x * (53.568007260277156 + x * (-109.12001478945346 + x * (-781.2212051391601 + x * (1336.7562843492296 + x * (2980.1141089545354 + x * (-4683.036456928556 + x * (-2826.954934365409 + 4222.982062447092 * x))))))));
      s[2] = 2.9448802524142796 + x * (-13.883006904238746 + x * (-327.3099262378834 + x * (857.2402830039803 + x * (4287.555825975206 + x * (-9432.622817145453 + x * (-13398.39920529966 + x * (27070.235129074823 + (10993.713633643256 - 21114.91031223546 * x) * x)))))));
      s[3] = -12.161688850039528 + x * (80.26714641026088 + x * (1204.7819371299138 + x * (-4417.53376947635 + x * (-11916.551831563314 + x * (36702.97964121501 + x * (31618.28383890788 + x * (-89434.57428719656 + x * (-23557.957786378407 + 63344.73093670638 * x))))))));
      s[4] = 38.03683881002759 + x * (-418.4052269103035 + x * (-2124.8862737746467 + x * (12985.41611751173 + x * (16894.922256469727 + x * (-86727.26758321126 + x * (-40267.88332587348 + x * (189834.30710768927 + (28269.54934365409 - 126689.46187341276 * x) * x)))))));
      s[5] = -28.393211771647135 + x * (936.9759884643555 + x * (1197.9315924750433 + x * (-21962.079195375794 + x * (-8547.479067993165 + x * (131631.17764709474 + x * (19334.39885321723 + x * (-273443.64092407224 + x * (-13192.456360371907 + 177365.24662277786 * x))))))));
      s[6] = -28.393211771647135 + x * (-936.9759884643555 + x * (1197.9315924750433 + x * (21962.079195375794 + x * (-8547.479067993165 + x * (-131631.17764709474 + x * (19334.39885321723 + x * (273443.64092407224 + (-13192.456360371907 - 177365.24662277786 * x) * x)))))));
      s[7] = 38.03683881002759 + x * (418.4052269103035 + x * (-2124.8862737746467 + x * (-12985.41611751173 + x * (16894.922256469727 + x * (86727.26758321126 + x * (-40267.88332587348 + x * (-189834.30710768927 + x * (28269.54934365409 + 126689.46187341276 * x))))))));
      s[8] = -12.161688850039528 + x * (-80.26714641026088 + x * (1204.7819371299138 + x * (4417.53376947635 + x * (-11916.551831563314 + x * (-36702.97964121501 + x * (31618.28383890788 + x * (89434.57428719656 + (-23557.957786378407 - 63344.73093670638 * x) * x)))))));
      s[9] = 2.9448802524142796 + x * (13.883006904238746 + x * (-327.3099262378834 + x * (-857.2402830039803 + x * (4287.555825975206 + x * (9432.622817145453 + x * (-13398.39920529966 + x * (-27070.235129074823 + x * (10993.713633643256 + 21114.91031223546 * x))))))));
      s[10] = -0.46124456738668773 + x * (-1.691230080417855 + x * (53.568007260277156 + x * (109.12001478945346 + x * (-781.2212051391601 + x * (-1336.7562843492296 + x * (2980.1141089545354 + x * (4683.036456928556 + (-2826.954934365409 - 4222.982062447092 * x) * x)))))));
      s[11] = 0.03442612663147941 + x * (0.10327837989443825 + x * (-4.0853368527044065 + x * (-6.808894754507344 + x * (62.77402225070529 + x * (87.88363115098741 + x * (-266.51426990650316 + x * (-342.6612041655041 + x * (314.10610381837876 + 383.90746022246293 * x))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(13);

      s[0] = -0.0021645021645021645 + x * (-0.34214285714285714 + x * (0.6842857142857143 + x * (14.892857142857142 + x * (-22.339285714285715 + x * (-150.66 + x * (200.88 + x * (499.8857142857143 + x * (-624.8571428571429 + x * (-499.8857142857143 + 599.8628571428571 * x)))))))));
      s[1] = 0.0374025974025974 + x * (4.885714285714286 + x * (-11.725714285714286 + x * (-207.42857142857142 + x * (373.37142857142857 + x * (1992.6 + x * (-3188.16 + x * (-5998.628571428571 + x * (8997.942857142858 + (4998.857142857143 - 7198.354285714286 * x) * x))))))));
      s[2] = -0.32142857142857145 + x * (-33.06857142857143 + x * (99.20571428571428 + x * (1339.2857142857142 + x * (-3013.3928571428573 + x * (-11683.44 + x * (23366.88 + x * (29993.14285714286 + x * (-56237.142857142855 + x * (-21994.97142857143 + 39590.94857142857 * x)))))))));
      s[3] = 1.9047619047619047 + x * (141.97142857142856 + x * (-567.8857142857142 + x * (-5161.714285714285 + x * (15485.142857142857 + x * (36693. + x * (-97848. + x * (-81981.25714285714 + x * (204953.14285714287 + (54987.42857142857 - 131969.82857142857 * x) * x))))))));
      s[4] = -9.642857142857142 + x * (-430.9392857142857 + x * (2585.635714285714 + x * (10881.32142857143 + x * (-48965.94642857143 + x * (-64516.5 + x * (258066. + x * (130470.17142857143 + x * (-489263.14285714284 + x * (-82481.14285714286 + 296932.1142857143 * x)))))))));
      s[5] = 61.714285714285715 + x * (545.8628571428571 + x * (-6550.354285714286 + x * (-10686.857142857143 + x * (96181.71428571429 + x * (56628.72 + x * (-453029.76 + x * (-107975.31428571428 + x * (809814.8571428572 + (65984.91428571429 - 475091.38285714283 * x) * x))))))));
      s[6] = -107.38 + x * x * (8888.88 + x * x * (-120077.1 + x * x * (544864.32 + x * x * (-955281.6 + 554273.28 * x * x))));
      s[7] = 61.714285714285715 + x * (-545.8628571428571 + x * (-6550.354285714286 + x * (10686.857142857143 + x * (96181.71428571429 + x * (-56628.72 + x * (-453029.76 + x * (107975.31428571428 + x * (809814.8571428572 + (-65984.91428571429 - 475091.38285714283 * x) * x))))))));
      s[8] = -9.642857142857142 + x * (430.9392857142857 + x * (2585.635714285714 + x * (-10881.32142857143 + x * (-48965.94642857143 + x * (64516.5 + x * (258066. + x * (-130470.17142857143 + x * (-489263.14285714284 + x * (82481.14285714286 + 296932.1142857143 * x)))))))));
      s[9] = 1.9047619047619047 + x * (-141.97142857142856 + x * (-567.8857142857142 + x * (5161.714285714285 + x * (15485.142857142857 + x * (-36693. + x * (-97848. + x * (81981.25714285714 + x * (204953.14285714287 + (-54987.42857142857 - 131969.82857142857 * x) * x))))))));
      s[10] = -0.32142857142857145 + x * (33.06857142857143 + x * (99.20571428571428 + x * (-1339.2857142857142 + x * (-3013.3928571428573 + x * (11683.44 + x * (23366.88 + x * (-29993.14285714286 + x * (-56237.142857142855 + x * (21994.97142857143 + 39590.94857142857 * x)))))))));
      s[11] = 0.0374025974025974 + x * (-4.885714285714286 + x * (-11.725714285714286 + x * (207.42857142857142 + x * (373.37142857142857 + x * (-1992.6 + x * (-3188.16 + x * (5998.628571428571 + x * (8997.942857142858 + (-4998.857142857143 - 7198.354285714286 * x) * x))))))));
      s[12] = -0.0021645021645021645 + x * (0.34214285714285714 + x * (0.6842857142857143 + x * (-14.892857142857142 + x * (-22.339285714285715 + x * (150.66 + x * (200.88 + x * (-499.8857142857143 + x * (-624.8571428571429 + x * (499.8857142857143 + 599.8628571428571 * x)))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(14);

      s[0] = -0.011095891065354413 + x * (0.03328767319606324 + x * (1.9186822794017757 + x * (-3.1978037990029597 + x * (-45.57252921015287 + x * (63.80154089421402 + x * (334.61086037294365 + x * (-430.2139633366418 + x * (-904.3054701976675 + x * (1105.2622413527047 + (783.7314075046452 - 926.2280270509443 * x) * x)))))))));
      s[1] = 0.17013757362567558 + x * (-0.6032150337637588 + x * (-29.07499526193743 + x * (57.26893006139191 + x * (672.3324148514494 + x * (-1112.4045409360344 + x * (-4694.924597724161 + x * (7133.846466671777 + x * (11616.847194077729 + x * (-16779.89039144561 + x * (-8621.045482551097 + 12040.964351662276 * x))))))))));
      s[2] = -1.2433957364411237 + x * (5.388048191244869 + x * (208.1068866202945 + x * (-500.99806038219043 + x * (-4589.438002213978 + x * (9280.863515588266 + x * (29409.643863364327 + x * (-54617.91003196232 + x * (-63857.878587804524 + x * (112736.74861797589 + (42321.49600525084 - 72245.78610997366 * x) * x)))))))));
      s[3] = 5.821864436114276 + x * (-32.436101858350966 + x * (-933.9784577692291 + x * (2890.8857026190426 + x * (18700.077741330937 + x * (-48620.202127460434 + x * (-102516.93057860104 + x * (244785.3240346188 + x * (197695.0881770593 + x * (-448736.46998919814 + x * (-120694.63675571536 + 264901.21573657007 * x))))))))));
      s[4] = -20.037530502945028 + x * (156.2927379229712 + x * (2877.871689151414 + x * (-12470.777319656128 + x * (-45000.37614853504 + x * (163801.36918066753 + x * (212339.59563677988 + x * (-709820.933985807 + x * (-373895.53094711254 + x * (1.1881569094541576e6 + (215526.13706377742 - 662253.0393414252 * x) * x)))))))));
      s[5] = 56.42131236454797 + x * (-733.4770607391237 + x * (-4714.980585980188 + x * (34052.63756541247 + x * (59567.078910400756 + x * (-361373.61205643124 + x * (-252616.60117434608 + x * (1.4074353493999282e6 + x * (418832.55662001204 + x * (-2.2182613183948784e6 + x * (-232768.22802887962 + 1.1920554708145654e6 * x))))))))));
      s[6] = -41.121292243836415 + x * (1603.7303975096204 + x * (2590.1367809602443 + x * (-56119.63025413863 + x * (-29304.102386623967 + x * (533334.6634365562 + x * (117744.60599015413 + x * (-1.9680169858354332e6 + x * (-189486.77698603433 + x * (3.0107343454447677e6 + (103452.54579061316 - 1.5894072944194204e6 * x) * x)))))))));
      s[7] = -41.121292243836415 + x * (-1603.7303975096204 + x * (2590.1367809602443 + x * (56119.63025413863 + x * (-29304.102386623967 + x * (-533334.6634365562 + x * (117744.60599015413 + x * (1.9680169858354332e6 + x * (-189486.77698603433 + x * (-3.0107343454447677e6 + x * (103452.54579061316 + 1.5894072944194204e6 * x))))))))));
      s[8] = 56.42131236454797 + x * (733.4770607391237 + x * (-4714.980585980188 + x * (-34052.63756541247 + x * (59567.078910400756 + x * (361373.61205643124 + x * (-252616.60117434608 + x * (-1.4074353493999282e6 + x * (418832.55662001204 + x * (2.2182613183948784e6 + (-232768.22802887962 - 1.1920554708145654e6 * x) * x)))))))));
      s[9] = -20.037530502945028 + x * (-156.2927379229712 + x * (2877.871689151414 + x * (12470.777319656128 + x * (-45000.37614853504 + x * (-163801.36918066753 + x * (212339.59563677988 + x * (709820.933985807 + x * (-373895.53094711254 + x * (-1.1881569094541576e6 + x * (215526.13706377742 + 662253.0393414252 * x))))))))));
      s[10] = 5.821864436114276 + x * (32.436101858350966 + x * (-933.9784577692291 + x * (-2890.8857026190426 + x * (18700.077741330937 + x * (48620.202127460434 + x * (-102516.93057860104 + x * (-244785.3240346188 + x * (197695.0881770593 + x * (448736.46998919814 + (-120694.63675571536 - 264901.21573657007 * x) * x)))))))));
      s[11] = -1.2433957364411237 + x * (-5.388048191244869 + x * (208.1068866202945 + x * (500.99806038219043 + x * (-4589.438002213978 + x * (-9280.863515588266 + x * (29409.643863364327 + x * (54617.91003196232 + x * (-63857.878587804524 + x * (-112736.74861797589 + x * (42321.49600525084 + 72245.78610997366 * x))))))))));
      s[12] = 0.17013757362567558 + x * (0.6032150337637588 + x * (-29.07499526193743 + x * (-57.26893006139191 + x * (672.3324148514494 + x * (1112.4045409360344 + x * (-4694.924597724161 + x * (-7133.846466671777 + x * (11616.847194077729 + x * (16779.89039144561 + (-8621.045482551097 - 12040.964351662276 * x) * x)))))))));
      s[13] = -0.011095891065354413 + x * (-0.03328767319606324 + x * (1.9186822794017757 + x * (3.1978037990029597 + x * (-45.57252921015287 + x * (-63.80154089421402 + x * (334.61086037294365 + x * (430.2139633366418 + x * (-904.3054701976675 + x * (-1105.2622413527047 + x * (783.7314075046452 + 926.2280270509443 * x))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(15);

      s[0] = 0.0005827505827505828 + x * (0.1277588383838384 + x * (-0.2555176767676768 + x * (-7.997157921810699 + x * (11.995736882716049 + x * (123.51556375385802 + x * (-164.68741833847736 + x * (-700.5834548611111 + x * (875.7293185763889 + x * (1589.2865411201133 + x * (-1907.1438493441358 + x * (-1213.6369950371773 + 1415.9098275433735 * x)))))))))));
      s[1] = -0.011104636104636105 + x * (-2.0764162457912456 + x * (4.844971240179573 + x * (128.1552276234568 + x * (-224.27164834104937 + x * (-1925.4130324074074 + x * (2995.0869393004114 + x * (10408.668472222222 + x * (-15179.308188657407 + x * (-21795.929706790124 + x * (30514.301589506173 + (14563.643940446127 - 19822.73758560723 * x) * x))))))))));
      s[2] = 0.10393939393939394 + x * (16.062657828282827 + x * (-44.97544191919192 + x * (-968.1501414609054 + x * (2033.1152970679013 + x * (13890.536470389661 + x * (-25929.001411394034 + x * (-69557.92873263889 + x * (121726.37528211805 + x * (130548.53730629501 + x * (-219321.5426745756 + x * (-78886.40467741653 + 128847.79430644699 * x)))))))))));
      s[3] = -0.6496212121212122 + x * (-79.08550505050505 + x * (276.79926767676767 + x * (4558.132998971193 + x * (-11965.099122299383 + x * (-60062.71941358025 + x * (140146.3452983539 + x * (265821.37944444444 + x * (-581484.2675347222 + x * (-450449.2139403292 + x * (945943.3492746913 + (252436.4949677329 - 515391.17722578795 * x) * x))))))))));
      s[4] = 3.175925925925926 + x * (280.253912037037 + x * (-1307.8515895061728 + x * (-14587.279205246914 + x * (51055.4772183642 + x * (160935.2193851273 + x * (-500687.34919817385 + x * (-628823.6924131945 + x * (1.834069102871817e6 + x * (981497.9596088928 + x * (-2.7481942869049e6 + x * (-520650.2708709491 + 1.4173257373709169e6 * x)))))))))));
      s[5] = -14.291666666666666 + x * (-757.3936805555555 + x * (5301.755763888889 + x * (28093.19753729424 + x * (-147489.28707079476 + x * (-260451.8282484568 + x * (1.215441865159465e6 + x * (923168.8268055556 + x * (-4.038863617274306e6 + x * (-1.358612951723251e6 + x * (5.706174397237655e6 + (694200.3611612654 - 2.8346514747418338e6 * x) * x))))))))));
      s[6] = 85.75 + x * (921.6185416666667 + x * (-12902.659583333334 + x * (-26529.29000771605 + x * (278557.5450810185 + x * (219584.06289207176 + x * (-2.0494512536593364e6 + x * (-732910.3771354166 + x * (6.412965799934896e6 + x * (1.0414367663025656e6 + x * (-8.748068836941551e6 + x * (-520650.2708709491 + 4.251977212112751e6 * x)))))))))));
      s[7] = -148.1561111111111 + x * x * (17344.68425925926 + x * x * (-343958.95098379627 + x * x * (2.435297988580247e6 + x * x * (-7.468219628819444e6 + x * x * (1.0069719524537036e7 - 4.859402528128858e6 * x * x)))));
      s[8] = 85.75 + x * (-921.6185416666667 + x * (-12902.659583333334 + x * (26529.29000771605 + x * (278557.5450810185 + x * (-219584.06289207176 + x * (-2.0494512536593364e6 + x * (732910.3771354166 + x * (6.412965799934896e6 + x * (-1.0414367663025656e6 + x * (-8.748068836941551e6 + x * (520650.2708709491 + 4.251977212112751e6 * x)))))))))));
      s[9] = -14.291666666666666 + x * (757.3936805555555 + x * (5301.755763888889 + x * (-28093.19753729424 + x * (-147489.28707079476 + x * (260451.8282484568 + x * (1.215441865159465e6 + x * (-923168.8268055556 + x * (-4.038863617274306e6 + x * (1.358612951723251e6 + x * (5.706174397237655e6 + (-694200.3611612654 - 2.8346514747418338e6 * x) * x))))))))));
      s[10] = 3.175925925925926 + x * (-280.253912037037 + x * (-1307.8515895061728 + x * (14587.279205246914 + x * (51055.4772183642 + x * (-160935.2193851273 + x * (-500687.34919817385 + x * (628823.6924131945 + x * (1.834069102871817e6 + x * (-981497.9596088928 + x * (-2.7481942869049e6 + x * (520650.2708709491 + 1.4173257373709169e6 * x)))))))))));
      s[11] = -0.6496212121212122 + x * (79.08550505050505 + x * (276.79926767676767 + x * (-4558.132998971193 + x * (-11965.099122299383 + x * (60062.71941358025 + x * (140146.3452983539 + x * (-265821.37944444444 + x * (-581484.2675347222 + x * (450449.2139403292 + x * (945943.3492746913 + (-252436.4949677329 - 515391.17722578795 * x) * x))))))))));
      s[12] = 0.10393939393939394 + x * (-16.062657828282827 + x * (-44.97544191919192 + x * (968.1501414609054 + x * (2033.1152970679013 + x * (-13890.536470389661 + x * (-25929.001411394034 + x * (69557.92873263889 + x * (121726.37528211805 + x * (-130548.53730629501 + x * (-219321.5426745756 + x * (78886.40467741653 + 128847.79430644699 * x)))))))))));
      s[13] = -0.011104636104636105 + x * (2.0764162457912456 + x * (4.844971240179573 + x * (-128.1552276234568 + x * (-224.27164834104937 + x * (1925.4130324074074 + x * (2995.0869393004114 + x * (-10408.668472222222 + x * (-15179.308188657407 + x * (21795.929706790124 + x * (30514.301589506173 + (-14563.643940446127 - 19822.73758560723 * x) * x))))))))));
      s[14] = 0.0005827505827505828 + x * (-0.1277588383838384 + x * (-0.2555176767676768 + x * (7.997157921810699 + x * (11.995736882716049 + x * (-123.51556375385802 + x * (-164.68741833847736 + x * (700.5834548611111 + x * (875.7293185763889 + x * (-1589.2865411201133 + x * (-1907.1438493441358 + x * (1213.6369950371773 + 1415.9098275433735 * x)))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(16);

      s[0] = 0.0034463836474636633 + x * (-0.01033915094239099 + x * (-0.816890461878343 + x * (1.3614841031305718 + x * (27.593584465129034 + x * (-38.63101825118065 + x * (-306.0951296772276 + x * (393.5508810135783 + x * (1400.3016985952854 + x * (-1711.4798538386822 + x * (-2727.8604518089974 + x * (3223.8350794106336 + (1859.9048535061347 - 2146.0440617378476 * x) * x)))))))))));
      s[1] = -0.059575623450783495 + x * (0.2062233119450198 + x * (14.020482499104041 + x * (-26.962466344430847 + x * (-466.2616843623774 + x * (753.191951662302 + x * (5030.528509191105 + x * (-7462.8719641846055 + x * (-21986.55524158052 + x * (31006.680468895607 + x * (39826.76259641136 + x * (-54309.22172237913 + x * (-24178.76309557975 + 32190.660926067718 * x))))))))))));
      s[2] = 0.4918860619539743 + x * (-2.012261162538986 + x * (-114.43663345915931 + x * (260.0832578617257 + x * (3711.320765848671 + x * (-7085.248734802008 + x * (-38319.99935209751 + x * (67184.41444848265 + x * (156415.51830672793 + x * (-260692.5305112132 + x * (-258055.59874113117 + x * (415874.72524397174 + (143212.67371997237 - 225334.626482474 * x) * x)))))))))));
      s[3] = -2.59627126060523 + x * (12.98135630302615 + x * (591.885124843616 + x * (-1644.125346787822 + x * (-18363.509686397654 + x * (42848.189268261194 + x * (175964.19341862202 + x * (-377066.12875419005 + x * (-649394.45915765 + x * (1.3228405649507684e6 + x * (980393.0463801537 + x * (-1.9310772125669695e6 + x * (-507754.02500717476 + 976450.0480907207 * x))))))))))));
      s[4] = 9.946349330923773 + x * (-63.94081712736712 + x * (-2175.856560604139 + x * (7770.916287871924 + x * (61706.80085197091 + x * (-185120.40255591273 + x * (-517073.7896114588 + x * (1.424591053011162e6 + x * (1.7189339851029217e6 + x * (-4.501969960983843e6 + x * (-2.4097919231280684e6 + x * (6.102719805324329e6 + (1.1847593916834078e6 - 2.929350144272162e6 * x) * x)))))))))));
      s[5] = -30.1270156119551 + x * (271.1431405075959 + x * (5918.7981496964185 + x * (-29593.99074848209 + x * (-133816.05950583305 + x * (562027.4499244988 + x * (973537.0147973299 + x * (-3.755071342789701e6 + x * (-2.965675325997706e6 + x * (1.0874142861991588e7 + x * (3.9308469110567654e6 + x * (-1.393663904829217e7 + x * (-1.8617647583596408e6 + 6.444570317398757e6 * x))))))))))));
      s[6] = 78.5669618774028 + x * (-1178.5044281610421 + x * (-9175.114031561783 + x * (76459.28359634819 + x * (168191.53378850647 + x * (-1.1773407365195453e6 + x * (-1.1000806856900454e6 + x * (7.071947265150292e6 + x * (3.153643096863691e6 + x * (-1.9272263369722556e7 + x * (-4.026867598960442e6 + x * (2.3795126721129887e7 + (1.8617647583596408e6 - 1.0740950528997928e7 * x) * x)))))))))));
      s[7] = -56.225781157916906 + x * (2530.1601521062607 + x * (4941.520359047821 + x * (-123538.00897619555 + x * (-80991.41811419811 + x * (1.7008197803981602e6 + x * (501248.8330581359 + x * (-9.666941780406905e6 + x * (-1.3933365615749997e6 + x * (2.5544503628874995e7 + x * (1.7463762612481203e6 + x * (-3.095848826758031e7 + x * (-797899.1821541318 + 1.380979353728305e7 * x))))))))))));
      s[8] = -56.225781157916906 + x * (-2530.1601521062607 + x * (4941.520359047821 + x * (123538.00897619555 + x * (-80991.41811419811 + x * (-1.7008197803981602e6 + x * (501248.8330581359 + x * (9.666941780406905e6 + x * (-1.3933365615749997e6 + x * (-2.5544503628874995e7 + x * (1.7463762612481203e6 + x * (3.095848826758031e7 + (-797899.1821541318 - 1.380979353728305e7 * x) * x)))))))))));
      s[9] = 78.5669618774028 + x * (1178.5044281610421 + x * (-9175.114031561783 + x * (-76459.28359634819 + x * (168191.53378850647 + x * (1.1773407365195453e6 + x * (-1.1000806856900454e6 + x * (-7.071947265150292e6 + x * (3.153643096863691e6 + x * (1.9272263369722556e7 + x * (-4.026867598960442e6 + x * (-2.3795126721129887e7 + x * (1.8617647583596408e6 + 1.0740950528997928e7 * x))))))))))));
      s[10] = -30.1270156119551 + x * (-271.1431405075959 + x * (5918.7981496964185 + x * (29593.99074848209 + x * (-133816.05950583305 + x * (-562027.4499244988 + x * (973537.0147973299 + x * (3.755071342789701e6 + x * (-2.965675325997706e6 + x * (-1.0874142861991588e7 + x * (3.9308469110567654e6 + x * (1.393663904829217e7 + (-1.8617647583596408e6 - 6.444570317398757e6 * x) * x)))))))))));
      s[11] = 9.946349330923773 + x * (63.94081712736712 + x * (-2175.856560604139 + x * (-7770.916287871924 + x * (61706.80085197091 + x * (185120.40255591273 + x * (-517073.7896114588 + x * (-1.424591053011162e6 + x * (1.7189339851029217e6 + x * (4.501969960983843e6 + x * (-2.4097919231280684e6 + x * (-6.102719805324329e6 + x * (1.1847593916834078e6 + 2.929350144272162e6 * x))))))))))));
      s[12] = -2.59627126060523 + x * (-12.98135630302615 + x * (591.885124843616 + x * (1644.125346787822 + x * (-18363.509686397654 + x * (-42848.189268261194 + x * (175964.19341862202 + x * (377066.12875419005 + x * (-649394.45915765 + x * (-1.3228405649507684e6 + x * (980393.0463801537 + x * (1.9310772125669695e6 + (-507754.02500717476 - 976450.0480907207 * x) * x)))))))))));
      s[13] = 0.4918860619539743 + x * (2.012261162538986 + x * (-114.43663345915931 + x * (-260.0832578617257 + x * (3711.320765848671 + x * (7085.248734802008 + x * (-38319.99935209751 + x * (-67184.41444848265 + x * (156415.51830672793 + x * (260692.5305112132 + x * (-258055.59874113117 + x * (-415874.72524397174 + x * (143212.67371997237 + 225334.626482474 * x))))))))))));
      s[14] = -0.059575623450783495 + x * (-0.2062233119450198 + x * (14.020482499104041 + x * (26.962466344430847 + x * (-466.2616843623774 + x * (-753.191951662302 + x * (5030.528509191105 + x * (7462.8719641846055 + x * (-21986.55524158052 + x * (-31006.680468895607 + x * (39826.76259641136 + x * (54309.22172237913 + (-24178.76309557975 - 32190.660926067718 * x) * x)))))))))));
      s[15] = 0.0034463836474636633 + x * (0.01033915094239099 + x * (-0.816890461878343 + x * (-1.3614841031305718 + x * (27.593584465129034 + x * (38.63101825118065 + x * (-306.0951296772276 + x * (-393.5508810135783 + x * (1400.3016985952854 + x * (1711.4798538386822 + x * (-2727.8604518089974 + x * (-3223.8350794106336 + x * (1859.9048535061347 + 2146.0440617378476 * x))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(17);

      s[0] = -0.0001554001554001554 + x * (-0.04510723139294568 + x * (0.09021446278589136 + x * (3.831813728110024 + x * (-5.747720592165036 + x * (-83.36961316872429 + x * (111.15948422496571 + x * (708.033177122701 + x * (-885.0414714033761 + x * (-2695.9273211836176 + x * (3235.112785420341 + x * (4590.8474116829675 + x * (-5355.988646963462 + x * (-2825.1368687279796 + 3228.727849974834 * x)))))))))))));
      s[1] = 0.003247546104688962 + x * (0.8222083102083102 + x * (-1.8793332804761376 + x * (-69.23716174086545 + x * (118.69227727005504 + x * (1481.7069300411522 + x * (-2257.8391314912797 + x * (-12242.633368606703 + x * (17489.476240866716 + x * (44647.186611796984 + x * (-61230.427353321575 + x * (-71158.13488108599 + x * (94877.51317478133 + (39551.916162191716 - 51659.645599597345 * x) * x))))))))))));
      s[2] = -0.033152033152033154 + x * (-7.159140964855251 + x * (19.091042572947334 + x * (594.7228475228475 + x * (-1189.445695045695 + x * (-12406.32888888889 + x * (22055.695802469138 + x * (98342.63800453515 + x * (-163904.39667422525 + x * (-337319.6867724868 + x * (539711.4988359788 + x * (495811.52046176046 + x * (-771262.3651627385 + x * (-254262.31818551818 + 387447.3419969801 * x)))))))))))));
      s[3] = 0.22278166278166278 + x * (39.764442964442964 + x * (-127.24621748621749 + x * (-3228.7021181836 + x * (7748.885083640639 + x * (64551.61152263374 + x * (-137710.10458161865 + x * (-479164.09453262785 + x * (958328.1890652557 + x * (1.5107056147364296e6 + x * (-2.9005547802939448e6 + x * (-2.0544042167281278e6 + x * (3.8348878712258385e6 + (988797.904054793 - 1.8080875959859071e6 * x) * x))))))))))));
      s[4] = -1.1313131313131313 + x * (-159.09941317941318 + x * (636.3976527176527 + x * (12373.777535496054 + x * (-37121.33260648816 + x * (-228816.04477366255 + x * (610176.1193964335 + x * (1.5284428438800706e6 + x * (-3.8211071097001764e6 + x * (-4.410142571506957e6 + x * (1.0584342171616696e7 + x * (5.610015537076586e6 + x * (-1.30900362531787e7 + x * (-2.5708745505424617e6 + 5.876284686954198e6 * x)))))))))))));
      s[5] = 4.826936026936027 + x * (492.22384607984606 + x * (-2625.193845759179 + x * (-34716.80153920154 + x * (138867.20615680615 + x * (546380.9137777778 + x * (-1.9426876934320987e6 + x * (-3.2512513625396825e6 + x * (1.0837504541798942e7 + x * (8.67976815068783e6 + x * (-2.777525808220106e7 + x * (-1.047401836975469e7 + x * (3.25858349281257e7 + (4.627574190976431e6 - 1.4103083248690076e7 * x) * x))))))))))));
      s[6] = -19.91111111111111 + x * (-1220.874835978836 + x * (9766.998687830688 + x * (62443.58220654517 + x * (-374661.493239271 + x * (-830146.4672921811 + x * (4.427447825558299e6 + x * (4.48797925361552e6 + x * (-2.24398962680776e7 + x * (-1.1299354700654518e7 + x * (5.423690256314168e7 + x * (1.3129823597413287e7 + x * (-6.127251012126201e7 + x * (-5.655924011193416e6 + 2.5855652622598473e7 * x)))))))))))));
      s[7] = 113.77777777777777 + x * (1440.2138170823885 + x * (-23043.421073318215 + x * (-57202.69080932785 + x * (686432.2897119342 + x * (678389.2964609053 + x * (-7.23615249558299e6 + x * (-3.4501769823330813e6 + x * (3.450176982333081e7 + x * (8.3794023945130315e6 + x * (-8.04422629873251e7 + x * (-9.519122108124632e6 + x * (8.88451396758299e7 + (4.0399457222810113e6 - 3.6936646603712104e7 * x) * x))))))))))));
      s[8] = -195.51002267573696 + x * x * (30750.32574452003 + x * x * (-840378.1079365079 + x * x * (8.518034664973546e6 + x * x * (-3.977859842902494e7 + x * x * (9.16302298615873e7 + x * x * (-1.0044315052021164e8 + 4.1553727429176114e7 * x * x))))));
      s[9] = 113.77777777777777 + x * (-1440.2138170823885 + x * (-23043.421073318215 + x * (57202.69080932785 + x * (686432.2897119342 + x * (-678389.2964609053 + x * (-7.23615249558299e6 + x * (3.4501769823330813e6 + x * (3.450176982333081e7 + x * (-8.3794023945130315e6 + x * (-8.04422629873251e7 + x * (9.519122108124632e6 + x * (8.88451396758299e7 + (-4.0399457222810113e6 - 3.6936646603712104e7 * x) * x))))))))))));
      s[10] = -19.91111111111111 + x * (1220.874835978836 + x * (9766.998687830688 + x * (-62443.58220654517 + x * (-374661.493239271 + x * (830146.4672921811 + x * (4.427447825558299e6 + x * (-4.48797925361552e6 + x * (-2.24398962680776e7 + x * (1.1299354700654518e7 + x * (5.423690256314168e7 + x * (-1.3129823597413287e7 + x * (-6.127251012126201e7 + x * (5.655924011193416e6 + 2.5855652622598473e7 * x)))))))))))));
      s[11] = 4.826936026936027 + x * (-492.22384607984606 + x * (-2625.193845759179 + x * (34716.80153920154 + x * (138867.20615680615 + x * (-546380.9137777778 + x * (-1.9426876934320987e6 + x * (3.2512513625396825e6 + x * (1.0837504541798942e7 + x * (-8.67976815068783e6 + x * (-2.777525808220106e7 + x * (1.047401836975469e7 + x * (3.25858349281257e7 + (-4.627574190976431e6 - 1.4103083248690076e7 * x) * x))))))))))));
      s[12] = -1.1313131313131313 + x * (159.09941317941318 + x * (636.3976527176527 + x * (-12373.777535496054 + x * (-37121.33260648816 + x * (228816.04477366255 + x * (610176.1193964335 + x * (-1.5284428438800706e6 + x * (-3.8211071097001764e6 + x * (4.410142571506957e6 + x * (1.0584342171616696e7 + x * (-5.610015537076586e6 + x * (-1.30900362531787e7 + x * (2.5708745505424617e6 + 5.876284686954198e6 * x)))))))))))));
      s[13] = 0.22278166278166278 + x * (-39.764442964442964 + x * (-127.24621748621749 + x * (3228.7021181836 + x * (7748.885083640639 + x * (-64551.61152263374 + x * (-137710.10458161865 + x * (479164.09453262785 + x * (958328.1890652557 + x * (-1.5107056147364296e6 + x * (-2.9005547802939448e6 + x * (2.0544042167281278e6 + x * (3.8348878712258385e6 + (-988797.904054793 - 1.8080875959859071e6 * x) * x))))))))))));
      s[14] = -0.033152033152033154 + x * (7.159140964855251 + x * (19.091042572947334 + x * (-594.7228475228475 + x * (-1189.445695045695 + x * (12406.32888888889 + x * (22055.695802469138 + x * (-98342.63800453515 + x * (-163904.39667422525 + x * (337319.6867724868 + x * (539711.4988359788 + x * (-495811.52046176046 + x * (-771262.3651627385 + x * (254262.31818551818 + 387447.3419969801 * x)))))))))))));
      s[15] = 0.003247546104688962 + x * (-0.8222083102083102 + x * (-1.8793332804761376 + x * (69.23716174086545 + x * (118.69227727005504 + x * (-1481.7069300411522 + x * (-2257.8391314912797 + x * (12242.633368606703 + x * (17489.476240866716 + x * (-44647.186611796984 + x * (-61230.427353321575 + x * (71158.13488108599 + x * (94877.51317478133 + (-39551.916162191716 - 51659.645599597345 * x) * x))))))))))));
      s[16] = -0.0001554001554001554 + x * (0.04510723139294568 + x * (0.09021446278589136 + x * (-3.831813728110024 + x * (-5.747720592165036 + x * (83.36961316872429 + x * (111.15948422496571 + x * (-708.033177122701 + x * (-885.0414714033761 + x * (2695.9273211836176 + x * (3235.112785420341 + x * (-4590.8474116829675 + x * (-5355.988646963462 + x * (2825.1368687279796 + 3228.727849974834 * x)))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(18);

      s[0] = -0.0010413539540093204 + x * (0.003124061862027961 + x * (0.3238637996215739 + x * (-0.5397729993692899 + x * (-14.71885645487564 + x * (20.606399036825895 + x * (228.12554755603298 + x * (-293.3042754291853 + x * (-1550.4729574581515 + x * (1895.022503559963 + x * (5032.453499042731 + x * (-5947.445044323228 + x * (-7598.636683507572 + x * (8767.657711739506 + (4258.576602844903 - 4826.386816557558 * x) * x)))))))))))));
      s[1] = 0.02004699763954869 + x * (-0.06815979197446553 + x * (-6.205660861317013 + x * (11.721803849154359 + x * (279.2556741688141 + x * (-443.08566968118504 + x * (-4255.022699540683 + x * (6200.175933616423 + x * (28152.607707656665 + x * (-38996.57512097627 + x * (-87736.18219933525 + x * (117513.31070335205 + x * (124707.03733521252 + x * (-163078.43343835484 + x * (-63878.649042673555 + 82048.57588147846 * x))))))))))))));
      s[2] = -0.18482238978264234 + x * (0.7250724522242122 + x * (56.81279256919023 + x * (-123.8227530354146 + x * (-2518.8037448524697 + x * (4611.3483944222135 + x * (37417.30988001282 + x * (-62910.422105955615 + x * (-238115.10491400264 + x * (380577.1334950299 + x * (702216.1077203805 + x * (-1.0852430755678606e6 + x * (-929715.5471585735 + x * (1.402825233878321e6 + (442891.96669587 - 656388.6070518277 * x) * x)))))))))))));
      s[3] = 1.0899960593405391 + x * (-5.053618093306135 + x * (-331.29734715482476 + x * (853.3416517624274 + x * (14340.857482498544 + x * (-31028.400734860486 + x * (-204675.83729501633 + x * (406693.54683295457 + x * (1.229043299815243e6 + x * (-2.321526232984348e6 + x * (-3.3730708604942807e6 + x * (6.160732728671372e6 + x * (4.169416646103449e6 + x * (-7.434973739555102e6 + x * (-1.8737737052517575e6 + 3.281943035259139e6 * x))))))))))))));
      s[4] = -4.646872179006905 + x * (26.332275681039132 + x * (1384.559005045428 + x * (-4358.796867735607 + x * (-57459.38170763696 + x * (151948.1427379733 + x * (766383.1435662593 + x * (-1.8612162058037724e6 + x * (-4.223906135028631e6 + x * (9.751487003090793e6 + x * (1.0743318477895565e7 + x * (-2.3982559430453733e7 + x * (-1.2502886194769049e7 + x * (2.7249880168086387e7 + (5.365806519584578e6 - 1.1486800623406986e7 * x) * x)))))))))))));
      s[5] = 15.428903015424506 + x * (-112.41057911237856 + x * (-4414.927742635145 + x * (17869.945624951775 + x * (168264.87869332934 + x * (-572100.5875573198 + x * (-1.9886518266917777e6 + x * (6.209463867017183e6 + x * (9.960070250887608e6 + x * (-2.956401804628544e7 + x * (-2.3643793554638404e7 + x * (6.786075812435178e7 + x * (2.619473554119281e7 + x * (-7.340283036268316e7 + x * (-1.0850853184048815e7 + 2.9865681620858163e7 * x))))))))))))));
      s[6] = -42.487006223060696 + x * (433.3674634752191 + x * (10943.68280367526 + x * (-62014.202554159805 + x * (-337142.67268961517 + x * (1.6047991220025683e6 + x * (3.480181088845034e6 + x * (-1.5213363045522578e7 + x * (-1.601184662866041e7 + x * (6.653811821243326e7 + x * (3.596948690394899e7 + x * (-1.4453193828677687e8 + x * (-3.839725209764909e7 + x * (1.506353736138541e8 + (1.550121883435545e7 - 5.9731363241716325e7 * x) * x)))))))))))));
      s[7] = 104.48882447046847 + x * (-1776.3100159979642 + x * (-16248.581034969326 + x * (153458.8208858214 + x * (406925.29934531153 + x * (-3.2282740414728047e6 + x * (-3.77716157422693e6 + x * (2.75193200407962e7 + x * (1.6346491447561422e7 + x * (-1.1321458891459206e8 + x * (-3.535391474207014e7 + x * (2.36764095696894e8 + x * (3.6816735667479515e7 + x * (-2.4072481013351992e8 + x * (-1.4615434900963709e7 + 9.386357080841137e7 * x))))))))))))));
      s[8] = -73.70802839706882 + x * (3759.10944825051 + x * (8615.63332053111 + x * (-244109.61074838147 + x * (-192674.71419674874 + x * (4.58565819788262e6 + x * (1.6905345930744028e6 + x * (-3.695025610576908e7 + x * (-7.088339264411424e6 + x * (1.4727993804943737e8 + x * (1.503846139633818e7 + x * (-3.021363607809762e8 + x * (-1.546814241585077e7 + x * (3.0341356277245736e8 + (6.089764542068212e6 - 1.1732946351051421e8 * x) * x)))))))))))));
      s[9] = -73.70802839706882 + x * (-3759.10944825051 + x * (8615.63332053111 + x * (244109.61074838147 + x * (-192674.71419674874 + x * (-4.58565819788262e6 + x * (1.6905345930744028e6 + x * (3.695025610576908e7 + x * (-7.088339264411424e6 + x * (-1.4727993804943737e8 + x * (1.503846139633818e7 + x * (3.021363607809762e8 + x * (-1.546814241585077e7 + x * (-3.0341356277245736e8 + x * (6.089764542068212e6 + 1.1732946351051421e8 * x))))))))))))));
      s[10] = 104.48882447046847 + x * (1776.3100159979642 + x * (-16248.581034969326 + x * (-153458.8208858214 + x * (406925.29934531153 + x * (3.2282740414728047e6 + x * (-3.77716157422693e6 + x * (-2.75193200407962e7 + x * (1.6346491447561422e7 + x * (1.1321458891459206e8 + x * (-3.535391474207014e7 + x * (-2.36764095696894e8 + x * (3.6816735667479515e7 + x * (2.4072481013351992e8 + (-1.4615434900963709e7 - 9.386357080841137e7 * x) * x)))))))))))));
      s[11] = -42.487006223060696 + x * (-433.3674634752191 + x * (10943.68280367526 + x * (62014.202554159805 + x * (-337142.67268961517 + x * (-1.6047991220025683e6 + x * (3.480181088845034e6 + x * (1.5213363045522578e7 + x * (-1.601184662866041e7 + x * (-6.653811821243326e7 + x * (3.596948690394899e7 + x * (1.4453193828677687e8 + x * (-3.839725209764909e7 + x * (-1.506353736138541e8 + x * (1.550121883435545e7 + 5.9731363241716325e7 * x))))))))))))));
      s[12] = 15.428903015424506 + x * (112.41057911237856 + x * (-4414.927742635145 + x * (-17869.945624951775 + x * (168264.87869332934 + x * (572100.5875573198 + x * (-1.9886518266917777e6 + x * (-6.209463867017183e6 + x * (9.960070250887608e6 + x * (2.956401804628544e7 + x * (-2.3643793554638404e7 + x * (-6.786075812435178e7 + x * (2.619473554119281e7 + x * (7.340283036268316e7 + (-1.0850853184048815e7 - 2.9865681620858163e7 * x) * x)))))))))))));
      s[13] = -4.646872179006905 + x * (-26.332275681039132 + x * (1384.559005045428 + x * (4358.796867735607 + x * (-57459.38170763696 + x * (-151948.1427379733 + x * (766383.1435662593 + x * (1.8612162058037724e6 + x * (-4.223906135028631e6 + x * (-9.751487003090793e6 + x * (1.0743318477895565e7 + x * (2.3982559430453733e7 + x * (-1.2502886194769049e7 + x * (-2.7249880168086387e7 + x * (5.365806519584578e6 + 1.1486800623406986e7 * x))))))))))))));
      s[14] = 1.0899960593405391 + x * (5.053618093306135 + x * (-331.29734715482476 + x * (-853.3416517624274 + x * (14340.857482498544 + x * (31028.400734860486 + x * (-204675.83729501633 + x * (-406693.54683295457 + x * (1.229043299815243e6 + x * (2.321526232984348e6 + x * (-3.3730708604942807e6 + x * (-6.160732728671372e6 + x * (4.169416646103449e6 + x * (7.434973739555102e6 + (-1.8737737052517575e6 - 3.281943035259139e6 * x) * x)))))))))))));
      s[15] = -0.18482238978264234 + x * (-0.7250724522242122 + x * (56.81279256919023 + x * (123.8227530354146 + x * (-2518.8037448524697 + x * (-4611.3483944222135 + x * (37417.30988001282 + x * (62910.422105955615 + x * (-238115.10491400264 + x * (-380577.1334950299 + x * (702216.1077203805 + x * (1.0852430755678606e6 + x * (-929715.5471585735 + x * (-1.402825233878321e6 + x * (442891.96669587 + 656388.6070518277 * x))))))))))))));
      s[16] = 0.02004699763954869 + x * (0.06815979197446553 + x * (-6.205660861317013 + x * (-11.721803849154359 + x * (279.2556741688141 + x * (443.08566968118504 + x * (-4255.022699540683 + x * (-6200.175933616423 + x * (28152.607707656665 + x * (38996.57512097627 + x * (-87736.18219933525 + x * (-117513.31070335205 + x * (124707.03733521252 + x * (163078.43343835484 + (-63878.649042673555 - 82048.57588147846 * x) * x)))))))))))));
      s[17] = -0.0010413539540093204 + x * (-0.003124061862027961 + x * (0.3238637996215739 + x * (0.5397729993692899 + x * (-14.71885645487564 + x * (-20.606399036825895 + x * (228.12554755603298 + x * (293.3042754291853 + x * (-1550.4729574581515 + x * (-1895.022503559963 + x * (5032.453499042731 + x * (5947.445044323228 + x * (-7598.636683507572 + x * (-8767.657711739506 + x * (4258.576602844903 + 4826.386816557558 * x))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(19);

      s[0] = 0.00004113533525298231 + x * (0.015267937419723134 + x * (-0.030535874839446267 + x * (-1.6884709988672042 + x * (2.5327064983008065 + x * (49.05722141335227 + x * (-65.40962855113636 + x * (-577.9484424226722 + x * (722.4355530283402 + x * (3247.2066124242665 + x * (-3896.64793490912 + x * (-9153.870370928877 + x * (10679.515432750355 + x * (12399.055184702993 + x * (-14170.348782517705 + x * (-6376.6569521329675 + 7173.739071149588 * x)))))))))))))));
      s[1] = -0.0009371143562320033 + x * (-0.3085119434137291 + x * (0.6941518726808905 + x * (33.920588741615525 + x * (-57.240993501476204 + x * (-975.0563980823864 + x * (1462.5845971235794 + x * (11290.918210140306 + x * (-15877.853733009806 + x * (-61804.16495615434 + x * (83435.62269080835 + x * (167688.29201237825 + x * (-220090.88326624644 + x * (-214916.95653485187 + x * (276321.80125909526 + (102026.51123412748 - 129127.30328069259 * x) * x))))))))))))));
      s[2] = 0.010403881832453261 + x * (2.98756786963037 + x * (-7.682317379049522 + x * (-325.69566250156095 + x * (628.1273491101532 + x * (9217.134410688921 + x * (-15800.801846895292 + x * (-104114.3186438337 + x * (167326.58353473275 + x * (549524.3031675502 + x * (-847837.4963156489 + x * (-1.418319248342038e6 + x * (2.1274788725130567e6 + x * (1.7069365970941118e6 + x * (-2.508151734505634e6 + x * (-758822.1773038232 + 1.097582077885887e6 * x)))))))))))))));
      s[3] = -0.07552447552447553 + x * (-18.499144212929927 + x * (55.49743263878978 + x * (1990.238105688954 + x * (-4478.035737800146 + x * (-54982.20981605114 + x * (109964.41963210228 + x * (598270.7225376276 + x * (-1.1217576047580517e6 + x * (-2.9987888722146046e6 + x * (5.397819969986288e6 + x * (7.272153018157062e6 + x * (-1.2726267781774858e7 + x * (-8.232972642642787e6 + x * (1.4113667387387635e7 + (3.4689013819603343e6 - 5.853771082058065e6 * x) * x))))))))))))));
      s[4] = 0.40783216783216786 + x * (82.57322588126159 + x * (-297.26361317254174 + x * (-8688.626753269053 + x * (23459.29223382644 + x * (230619.96546519885 + x * (-553487.9171164773 + x * (-2.365623142185507e6 + x * (5.322652069917391e6 + x * (1.1039215610401386e7 + x * (-2.3844705718466997e7 + x * (-2.50603784502676e7 + x * (5.2626794745561965e7 + x * (2.6864619566856485e7 + x * (-5.526436025181905e7 + x * (-1.0840316818626044e7 + 2.195164155771774e7 * x)))))))))))))));
      s[5] = -1.7842657342657342 + x * (-284.67052485014983 + x * (1281.0173618256742 + x * (28727.646467907092 + x * (-96955.80682918643 + x * (-708670.0451186079 + x * (2.1260101353558237e6 + x * (6.612689520441964e6 + x * (-1.8598189276243024e7 + x * (-2.8476655065100446e7 + x * (7.68869686757712e7 + x * (6.0796557719221994e7 + x * (-1.5959096401295775e8 + x * (-6.225978910078862e7 + x * (1.6009660054488504e8 + (2.428230967372234e7 - 6.1464596361609675e7 * x) * x))))))))))))));
      s[6] = 6.872727272727273 + x * (795.3201525974026 + x * (-4771.9209155844155 + x * (-73009.06219358766 + x * (328540.7798711445 + x * (1.5496955859183238e6 + x * (-6.198782343673295e6 + x * (-1.2961106658296317e7 + x * (4.860414996861119e7 + x * (5.180295733109096e7 + x * (-1.8649064639192745e8 + x * (-1.0507210406116118e8 + x * (3.677523642140641e8 + x * (1.0380489000633346e8 + x * (-3.559024800217147e8 + x * (-3.94587532197988e7 + 1.3317329211682098e8 * x)))))))))))))));
      s[7] = -26.509090909090908 + x * (-1846.2907820037105 + x * (16616.617038033397 + x * (124466.22962720315 + x * (-840147.0499836213 + x * (-2.240245514358665e6 + x * (1.344147308615199e7 + x * (1.7041837511152424e7 + x * (-9.586033600023238e7 + x * (-6.4243456268432714e7 + x * (3.4691466384953666e8 + x * (1.2544357824490544e8 + x * (-6.585787857857536e8 + x * (-1.2078332957258675e8 + x * (6.211714092304461e8 + (4.509571796548434e7 - 2.2829707220026448e8 * x) * x))))))))))))));
      s[8] = 145.8 + x * (2124.849650510204 + x * (-38247.29370918367 + x * (-111290.45224649235 + x * (1.5024211053276467e6 + x * (1.7857168783242188e6 + x * (-2.1428602539890625e7 + x * (-1.2768947332674466e7 + x * (1.4365065749258775e8 + x * (4.6399854323239595e7 + x * (-5.0111842669098765e8 + x * (-8.851898780518611e7 + x * (9.294493719544541e8 + x * (8.392507152685966e7 + x * (-8.632293071334136e8 + x * (-3.100330610127049e7 + 3.139084742753637e8 * x)))))))))))))));
      s[9] = -249.4423724489796 + x * x * (50740.730213647956 + x * x * (-1.8268274078882334e6 + x * x * (2.503565757283761e7 + x * x * (-1.6429869563047522e8 + x * x * (5.660452496552954e8 + x * x * (-1.0417011616765472e9 + x * x * (9.625209410525151e8 - 3.48787193639293e8 * x * x)))))));
      s[10] = 145.8 + x * (-2124.849650510204 + x * (-38247.29370918367 + x * (111290.45224649235 + x * (1.5024211053276467e6 + x * (-1.7857168783242188e6 + x * (-2.1428602539890625e7 + x * (1.2768947332674466e7 + x * (1.4365065749258775e8 + x * (-4.6399854323239595e7 + x * (-5.0111842669098765e8 + x * (8.851898780518611e7 + x * (9.294493719544541e8 + x * (-8.392507152685966e7 + x * (-8.632293071334136e8 + x * (3.100330610127049e7 + 3.139084742753637e8 * x)))))))))))))));
      s[11] = -26.509090909090908 + x * (1846.2907820037105 + x * (16616.617038033397 + x * (-124466.22962720315 + x * (-840147.0499836213 + x * (2.240245514358665e6 + x * (1.344147308615199e7 + x * (-1.7041837511152424e7 + x * (-9.586033600023238e7 + x * (6.4243456268432714e7 + x * (3.4691466384953666e8 + x * (-1.2544357824490544e8 + x * (-6.585787857857536e8 + x * (1.2078332957258675e8 + x * (6.211714092304461e8 + (-4.509571796548434e7 - 2.2829707220026448e8 * x) * x))))))))))))));
      s[12] = 6.872727272727273 + x * (-795.3201525974026 + x * (-4771.9209155844155 + x * (73009.06219358766 + x * (328540.7798711445 + x * (-1.5496955859183238e6 + x * (-6.198782343673295e6 + x * (1.2961106658296317e7 + x * (4.860414996861119e7 + x * (-5.180295733109096e7 + x * (-1.8649064639192745e8 + x * (1.0507210406116118e8 + x * (3.677523642140641e8 + x * (-1.0380489000633346e8 + x * (-3.559024800217147e8 + x * (3.94587532197988e7 + 1.3317329211682098e8 * x)))))))))))))));
      s[13] = -1.7842657342657342 + x * (284.67052485014983 + x * (1281.0173618256742 + x * (-28727.646467907092 + x * (-96955.80682918643 + x * (708670.0451186079 + x * (2.1260101353558237e6 + x * (-6.612689520441964e6 + x * (-1.8598189276243024e7 + x * (2.8476655065100446e7 + x * (7.68869686757712e7 + x * (-6.0796557719221994e7 + x * (-1.5959096401295775e8 + x * (6.225978910078862e7 + x * (1.6009660054488504e8 + (-2.428230967372234e7 - 6.1464596361609675e7 * x) * x))))))))))))));
      s[14] = 0.40783216783216786 + x * (-82.57322588126159 + x * (-297.26361317254174 + x * (8688.626753269053 + x * (23459.29223382644 + x * (-230619.96546519885 + x * (-553487.9171164773 + x * (2.365623142185507e6 + x * (5.322652069917391e6 + x * (-1.1039215610401386e7 + x * (-2.3844705718466997e7 + x * (2.50603784502676e7 + x * (5.2626794745561965e7 + x * (-2.6864619566856485e7 + x * (-5.526436025181905e7 + x * (1.0840316818626044e7 + 2.195164155771774e7 * x)))))))))))))));
      s[15] = -0.07552447552447553 + x * (18.499144212929927 + x * (55.49743263878978 + x * (-1990.238105688954 + x * (-4478.035737800146 + x * (54982.20981605114 + x * (109964.41963210228 + x * (-598270.7225376276 + x * (-1.1217576047580517e6 + x * (2.9987888722146046e6 + x * (5.397819969986288e6 + x * (-7.272153018157062e6 + x * (-1.2726267781774858e7 + x * (8.232972642642787e6 + x * (1.4113667387387635e7 + (-3.4689013819603343e6 - 5.853771082058065e6 * x) * x))))))))))))));
      s[16] = 0.010403881832453261 + x * (-2.98756786963037 + x * (-7.682317379049522 + x * (325.69566250156095 + x * (628.1273491101532 + x * (-9217.134410688921 + x * (-15800.801846895292 + x * (104114.3186438337 + x * (167326.58353473275 + x * (-549524.3031675502 + x * (-847837.4963156489 + x * (1.418319248342038e6 + x * (2.1274788725130567e6 + x * (-1.7069365970941118e6 + x * (-2.508151734505634e6 + x * (758822.1773038232 + 1.097582077885887e6 * x)))))))))))))));
      s[17] = -0.0009371143562320033 + x * (0.3085119434137291 + x * (0.6941518726808905 + x * (-33.920588741615525 + x * (-57.240993501476204 + x * (975.0563980823864 + x * (1462.5845971235794 + x * (-11290.918210140306 + x * (-15877.853733009806 + x * (61804.16495615434 + x * (83435.62269080835 + x * (-167688.29201237825 + x * (-220090.88326624644 + x * (214916.95653485187 + x * (276321.80125909526 + (-102026.51123412748 - 129127.30328069259 * x) * x))))))))))))));
      s[18] = 0.00004113533525298231 + x * (-0.015267937419723134 + x * (-0.030535874839446267 + x * (1.6884709988672042 + x * (2.5327064983008065 + x * (-49.05722141335227 + x * (-65.40962855113636 + x * (577.9484424226722 + x * (722.4355530283402 + x * (-3247.2066124242665 + x * (-3896.64793490912 + x * (9153.870370928877 + x * (10679.515432750355 + x * (-12399.055184702993 + x * (-14170.348782517705 + x * (6376.6569521329675 + 7173.739071149588 * x)))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(20);

      s[0] = 0.00030801513469438366 + x * (-0.0009240454040831509 + x * (-0.1216175791051118 + x * (0.20269596517518632 + x * (7.14618829058893 + x * (-10.004663606824503 + x * (-146.9318609124782 + x * (188.9123926017577 + x * (1376.6030766530284 + x * (-1682.5148714648124 + x * (-6553.613263884348 + x * (7745.17931186332 + x * (16287.947697666616 + x * (-18793.78580499994 + x * (-19983.966643902735 + x * (22648.49552975643 + (9492.384155853799 - 10609.135233013069 * x) * x)))))))))))))));
      s[1] = -0.006537048907096441 + x * (0.021918340453205714 + x * (2.5728358765571513 + x * (-4.792537417116263 + x * (-150.17332480336196 + x * (234.97708469231932 + x * (3053.248650585337 + x * (-4387.441338236073 + x * (-28117.570355892924 + x * (38408.968656089026 + x * (130529.13795423393 + x * (-172410.1447844694 + x * (-312953.07429303986 + x * (403582.0188846894 + x * (364970.3381807499 + x * (-462295.76169561653 + x * (-161370.53064951458 + 201573.56942724832 * x))))))))))))))));
      s[2] = 0.06662344853971784 + x * (-0.2531691044509278 + x * (-26.10130237194035 + x * (55.10274945187408 + x * (1509.0250788684195 + x * (-2676.004473193331 + x * (-30195.313701900515 + x * (49175.225171666556 + x * (271459.4835114998 + x * (-420259.4966955812 + x * (-1.2180374633712003e6 + x * (1.8233651724405242e6 + x * (2.7906477508158972e6 + x * (-4.078639020423234e6 + x * (-3.076479075442921e6 + x * (4.416456628302504e6 + (1.2814718610402627e6 - 1.814162124845235e6 * x) * x)))))))))))))));
      s[3] = -0.4350821405706597 + x * (1.907667847117508 + x * (169.27962081406906 + x * (-412.347794290681 + x * (-9647.254892539147 + x * (19739.767703195485 + x * (188514.06602556503 + x * (-354240.7174766112 + x * (-1.6368465214944687e6 + x * (2.9239395127550764e6 + x * (7.012683882215798e6 + x * (-1.2112817614736378e7 + x * (-1.5210707202378346e7 + x * (2.5651192619395435e7 + x * (1.5874632029285472e7 + x * (-2.6294903310047217e7 + x * (-6.293450695331069e6 + 1.0280252040789664e7 * x))))))))))))))));
      s[4] = 2.0527381332643513 + x * (-10.63691578146073 + x * (-789.8457268543585 + x * (2273.798304580729 + x * (43987.422843692955 + x * (-106369.58614929387 + x * (-828030.1555882798 + x * (1.838872163709037e6 + x * (6.826879399081891e6 + x * (-1.4412300953617325e7 + x * (-2.7520216699637227e7 + x * (5.617763243644954e7 + x * (5.63353712747577e7 + x * (-1.1227678890423737e8 + x * (-5.595089945205525e7 + x * (1.095281243819021e8 + (2.1300910045735925e7 - 4.1121008163158655e7 * x) * x)))))))))))))));
      s[5] = -7.5011178000333185 + x * (47.50707940021102 + x * (2830.2498186747043 + x * (-9958.286399040628 + x * (-151353.72739009577 + x * (447334.34984183864 + x * (2.675179276196258e6 + x * (-7.261200892532701e6 + x * (-2.0428126737368852e7 + x * (5.27096109643221e7 + x * (7.690993403654553e7 + x * (-1.9188640108107823e8 + x * (-1.49044213162259e8 + x * (3.630564166772976e8 + x * (1.418777488699646e8 + x * (-3.394556509999894e8 + x * (-5.228405193044272e7 + 1.2336302448947597e8 * x))))))))))))))));
      s[6] = 22.351701253769235 + x * (-182.00671020926376 + x * (-8104.469368243163 + x * (36663.075713480976 + x * (399393.80898485787 + x * (-1.5176964741424597e6 + x * (-6.310412082737621e6 + x * (2.202205032955374e7 + x * (4.4051216517004535e7 + x * (-1.4613816273101506e8 + x * (-1.5532997254317832e8 + x * (4.9826627556058496e8 + x * (2.871167304217805e8 + x * (-8.992117381341479e8 + x * (-2.640786531097117e8 + x * (8.123562376613036e8 + (9.488587202191457e7 - 2.878470571421106e8 * x) * x)))))))))))))));
      s[7] = -57.15628499928251 + x * (651.5816489918207 + x * (18688.49453490514 + x * (-118360.46538773256 + x * (-751874.094988975 + x * (3.9999701853413465e6 + x * (1.0421356918462135e7 + x * (-5.091577237305786e7 + x * (-6.6949188150750294e7 + x * (3.10941784966818e8 + x * (2.2354485869136956e8 + x * (-1.0039196381230597e9 + x * (-3.9818543886654747e8 + x * (1.7458900011840928e9 + x * (3.5687157275137883e8 + x * (-1.5369269066492715e9 + x * (-1.2586901390662137e8 + 5.345731061210625e8 * x))))))))))))))));
      s[8] = 134.19649494906602 + x * (-2549.733404032255 + x * (-26804.664550365545 + x * (282938.12580941414 + x * (878409.6740581921 + x * (-7.788565776649304e6 + x * (-1.094957030766273e7 + x * (8.916078679096793e7 + x * (6.614153854510837e7 + x * (-5.1198450207139444e8 + x * (-2.1251627960755154e8 + x * (1.5906521534262192e9 + x * (3.690875638254384e8 + x * (-2.6971783510320497e9 + x * (-3.251223086928079e8 + x * (2.3336556823950434e9 + (1.1328211251595923e8 - 8.018596591815938e8 * x) * x)))))))))))))));
      s[9] = -93.56884381098044 + x * (5333.424097225885 + x * (14034.605755143646 + x * (-444429.18224621547 + x * (-410281.82655748865 + x * (1.0913496586429197e7 + x * (4.830251282216897e6 + x * (-1.1799613846558422e8 + x * (-2.8250191567813456e7 + x * (6.560322264081124e8 + x * (8.899305417891704e7 + x * (-1.998298580199319e9 + x * (-1.525932889150123e8 + x * (3.3453144108291163e9 + x * (1.3325940030785203e8 + x * (-2.8695190866290803e9 + x * (-4.615197176576117e7 + 9.800506945552813e8 * x))))))))))))))));
      s[10] = -93.56884381098044 + x * (-5333.424097225885 + x * (14034.605755143646 + x * (444429.18224621547 + x * (-410281.82655748865 + x * (-1.0913496586429197e7 + x * (4.830251282216897e6 + x * (1.1799613846558422e8 + x * (-2.8250191567813456e7 + x * (-6.560322264081124e8 + x * (8.899305417891704e7 + x * (1.998298580199319e9 + x * (-1.525932889150123e8 + x * (-3.3453144108291163e9 + x * (1.3325940030785203e8 + x * (2.8695190866290803e9 + (-4.615197176576117e7 - 9.800506945552813e8 * x) * x)))))))))))))));
      s[11] = 134.19649494906602 + x * (2549.733404032255 + x * (-26804.664550365545 + x * (-282938.12580941414 + x * (878409.6740581921 + x * (7.788565776649304e6 + x * (-1.094957030766273e7 + x * (-8.916078679096793e7 + x * (6.614153854510837e7 + x * (5.1198450207139444e8 + x * (-2.1251627960755154e8 + x * (-1.5906521534262192e9 + x * (3.690875638254384e8 + x * (2.6971783510320497e9 + x * (-3.251223086928079e8 + x * (-2.3336556823950434e9 + x * (1.1328211251595923e8 + 8.018596591815938e8 * x))))))))))))))));
      s[12] = -57.15628499928251 + x * (-651.5816489918207 + x * (18688.49453490514 + x * (118360.46538773256 + x * (-751874.094988975 + x * (-3.9999701853413465e6 + x * (1.0421356918462135e7 + x * (5.091577237305786e7 + x * (-6.6949188150750294e7 + x * (-3.10941784966818e8 + x * (2.2354485869136956e8 + x * (1.0039196381230597e9 + x * (-3.9818543886654747e8 + x * (-1.7458900011840928e9 + x * (3.5687157275137883e8 + x * (1.5369269066492715e9 + (-1.2586901390662137e8 - 5.345731061210625e8 * x) * x)))))))))))))));
      s[13] = 22.351701253769235 + x * (182.00671020926376 + x * (-8104.469368243163 + x * (-36663.075713480976 + x * (399393.80898485787 + x * (1.5176964741424597e6 + x * (-6.310412082737621e6 + x * (-2.202205032955374e7 + x * (4.4051216517004535e7 + x * (1.4613816273101506e8 + x * (-1.5532997254317832e8 + x * (-4.9826627556058496e8 + x * (2.871167304217805e8 + x * (8.992117381341479e8 + x * (-2.640786531097117e8 + x * (-8.123562376613036e8 + x * (9.488587202191457e7 + 2.878470571421106e8 * x))))))))))))))));
      s[14] = -7.5011178000333185 + x * (-47.50707940021102 + x * (2830.2498186747043 + x * (9958.286399040628 + x * (-151353.72739009577 + x * (-447334.34984183864 + x * (2.675179276196258e6 + x * (7.261200892532701e6 + x * (-2.0428126737368852e7 + x * (-5.27096109643221e7 + x * (7.690993403654553e7 + x * (1.9188640108107823e8 + x * (-1.49044213162259e8 + x * (-3.630564166772976e8 + x * (1.418777488699646e8 + x * (3.394556509999894e8 + (-5.228405193044272e7 - 1.2336302448947597e8 * x) * x)))))))))))))));
      s[15] = 2.0527381332643513 + x * (10.63691578146073 + x * (-789.8457268543585 + x * (-2273.798304580729 + x * (43987.422843692955 + x * (106369.58614929387 + x * (-828030.1555882798 + x * (-1.838872163709037e6 + x * (6.826879399081891e6 + x * (1.4412300953617325e7 + x * (-2.7520216699637227e7 + x * (-5.617763243644954e7 + x * (5.63353712747577e7 + x * (1.1227678890423737e8 + x * (-5.595089945205525e7 + x * (-1.095281243819021e8 + x * (2.1300910045735925e7 + 4.1121008163158655e7 * x))))))))))))))));
      s[16] = -0.4350821405706597 + x * (-1.907667847117508 + x * (169.27962081406906 + x * (412.347794290681 + x * (-9647.254892539147 + x * (-19739.767703195485 + x * (188514.06602556503 + x * (354240.7174766112 + x * (-1.6368465214944687e6 + x * (-2.9239395127550764e6 + x * (7.012683882215798e6 + x * (1.2112817614736378e7 + x * (-1.5210707202378346e7 + x * (-2.5651192619395435e7 + x * (1.5874632029285472e7 + x * (2.6294903310047217e7 + (-6.293450695331069e6 - 1.0280252040789664e7 * x) * x)))))))))))))));
      s[17] = 0.06662344853971784 + x * (0.2531691044509278 + x * (-26.10130237194035 + x * (-55.10274945187408 + x * (1509.0250788684195 + x * (2676.004473193331 + x * (-30195.313701900515 + x * (-49175.225171666556 + x * (271459.4835114998 + x * (420259.4966955812 + x * (-1.2180374633712003e6 + x * (-1.8233651724405242e6 + x * (2.7906477508158972e6 + x * (4.078639020423234e6 + x * (-3.076479075442921e6 + x * (-4.416456628302504e6 + x * (1.2814718610402627e6 + 1.814162124845235e6 * x))))))))))))))));
      s[18] = -0.006537048907096441 + x * (-0.021918340453205714 + x * (2.5728358765571513 + x * (4.792537417116263 + x * (-150.17332480336196 + x * (-234.97708469231932 + x * (3053.248650585337 + x * (4387.441338236073 + x * (-28117.570355892924 + x * (-38408.968656089026 + x * (130529.13795423393 + x * (172410.1447844694 + x * (-312953.07429303986 + x * (-403582.0188846894 + x * (364970.3381807499 + x * (462295.76169561653 + (-161370.53064951458 - 201573.56942724832 * x) * x)))))))))))))));
      s[19] = 0.00030801513469438366 + x * (0.0009240454040831509 + x * (-0.1216175791051118 + x * (-0.20269596517518632 + x * (7.14618829058893 + x * (10.004663606824503 + x * (-146.9318609124782 + x * (-188.9123926017577 + x * (1376.6030766530284 + x * (1682.5148714648124 + x * (-6553.613263884348 + x * (-7745.17931186332 + x * (16287.947697666616 + x * (18793.78580499994 + x * (-19983.966643902735 + x * (-22648.49552975643 + x * (9492.384155853799 + 10609.135233013069 * x))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(21);

      s[0] = -0.00001082508822446903 + x * (-0.005000436460520494 + x * (0.010000872921040987 + x * (0.697648835462989 + x * (-1.0464732531944834 + x * (-26.047853859389352 + x * (34.730471812519134 + x * (404.72948614069645 + x * (-505.9118576758706 + x * (-3117.1711332852756 + x * (3740.605359942331 + x * (12820.151364573763 + x * (-14956.84325866939 + x * (-28437.89012770494 + x * (32500.44586023422 + x * (31863.182215915902 + x * (-35846.07999290539 + x * (-14057.286271727604 + 15619.206968586226 * x)))))))))))))))));
      s[1] = 0.0002672861289992353 + x * (0.1109515290187559 + x * (-0.24655895337501313 + x * (-15.41711950111421 + x * (25.695199168523683 + x * (571.427832712555 + x * (-846.559752166748 + x * (-8776.916701023843 + x * (12190.162084755339 + x * (66456.7444133003 + x * (-88608.99255106707 + x * (-266775.13036640023 + x * (345819.6134379262 + x * (572103.4366867701 + x * (-726480.5545228826 + x * (-611773.0985455853 + x * (764716.3731819816 + (253031.15289109686 - 312384.1393717245 * x) * x))))))))))))))));
      s[2] = -0.0032136980666392432 + x * (-1.1832651669836545 + x * (2.958162917459136 + x * (163.4874378756654 + x * (-306.5389460168726 + x * (-5997.87449276261 + x * (9996.457487937683 + x * (90662.71535269551 + x * (-141660.49273858673 + x * (-670757.361157769 + x * (1.0061360417366535e6 + x * (2.608368528231844e6 + x * (-3.8038707703381055e6 + x * (-5.366397148804557e6 + x * (7.666281641149366e6 + x * (5.454976795364803e6 + x * (-7.671061118481753e6 + x * (-2.136707513302596e6 + 2.967649324031383e6 * x)))))))))))))))));
      s[3] = 0.025184899134478966 + x * (8.088520956168015 + x * (-23.110059874765756 + x * (-1108.292235028346 + x * (2374.911932203599 + x * (40056.925723881744 + x * (-76298.90614072712 + x * (-591711.3846801347 + x * (1.0566274726430976e6 + x * (4.238636241855281e6 + x * (-7.266233557466196e6 + x * (-1.581031601286231e7 + x * (2.6350526688103847e7 + x * (3.0983917702667702e7 + x * (-5.058598808598809e7 + x * (-2.997688182873368e7 + x * (4.817713151046485e7 + (1.1217714444838628e7 - 1.7805895944188297e7 * x) * x))))))))))))))));
      s[4] = -0.1456876456876457 + x * (-39.912323952502526 + x * (133.04107984167507 + x * (5398.550872643548 + x * (-13496.37718160887 + x * (-190675.2532848453 + x * (423722.785077434 + x * (2.7207899238451696e6 + x * (-5.668312341344103e6 + x * (-1.861766369758423e7 + x * (3.723532739516846e7 + x * (6.587768779299037e7 + x * (-1.2809550404192573e8 + x * (-1.2265596575492409e8 + x * (2.3363041096176016e8 + x * (1.1342655605221742e8 + x * (-2.1267479259790766e8 + x * (-4.0864531191912144e7 + 7.567505776280026e7 * x)))))))))))))))));
      s[5] = 0.6713286713286714 + x * (152.03255474684047 + x * (-608.1302189873619 + x * (-20122.439472637885 + x * (60367.31841791366 + x * (684092.0205908632 + x * (-1.8242453882423018e6 + x * (-9.243549797865273e6 + x * (2.3108874494663186e7 + x * (5.934226748183841e7 + x * (-1.424214419564122e8 + x * (-1.9797229825338292e8 + x * (4.619353625912268e8 + x * (3.509302554441443e8 + x * (-8.021262981580442e8 + x * (-3.120042802582485e8 + x * (7.020096305810591e8 + (1.0897208317843239e8 - 2.4216018484096086e8 * x) * x))))))))))))))));
      s[6] = -2.6223776223776225 + x * (-468.02131400345684 + x * (2340.1065700172844 + x * (59466.86909137306 + x * (-223000.75909264898 + x * (-1.8854989436789206e6 + x * (6.284996478929735e6 + x * (2.3343433448716186e7 + x * (-7.294822952723809e7 + x * (-1.3907334249286133e8 + x * (4.1722002747858405e8 + x * (4.3794445621495885e8 + x * (-1.2773379972936301e9 + x * (-7.432928439872885e8 + x * (2.1236938399636812e9 + x * (6.396087745294094e8 + x * (-1.798899678363964e9 + x * (-2.1794416635686478e8 + 6.054004621024021e8 * x)))))))))))))))));
      s[7] = 9.324009324009324 + x * (1207.2642965500108 + x * (-8048.428643666739 + x * (-139866.00922348278 + x * (699330.0461174138 + x * (3.845797386127247e6 + x * (-1.7092432827232208e7 + x * (-4.286727070878857e7 + x * (1.786136279532857e8 + x * (2.3757007705988774e8 + x * (-9.50280308239551e8 + x * (-7.115114915214121e8 + x * (2.7669891336943808e9 + x * (1.1655252540669208e9 + x * (-4.440096205969222e9 + x * (-9.776134114758453e8 + x * (3.66605029303442e9 + (3.2691624953529716e8 - 1.2108009242048042e9 * x) * x))))))))))))))));
      s[8] = -34.09090909090909 + x * (-2658.6158137497423 + x * (26586.158137497423 + x * (228361.2175527478 + x * (-1.7127091316456087e6 + x * (-5.340046481751488e6 + x * (3.560030987834325e7 + x * (5.4184716062087715e7 + x * (-3.3865447538804823e8 + x * (-2.8325449083150494e8 + x * (1.6995269449890296e9 + x * (8.16500727266683e8 + x * (-4.762920909055651e9 + x * (-1.303101075236492e9 + x * (7.44629185849424e9 + x * (1.0731647223049339e9 + x * (-6.036551562965254e9 + x * (-3.541592703299053e8 + 1.967551501832807e9 * x)))))))))))))))));
      s[9] = 181.8181818181818 + x * (2998.733079090222 + x * (-59974.66158180444 + x * (-200189.06794386293 + x * (3.002836019157944e6 + x * (4.1709901405107807e6 + x * (-5.561320187347708e7 + x * (-3.975672142103194e7 + x * (4.969590177628992e8 + x * (2.0021543143899363e8 + x * (-2.402585177267924e9 + x * (-5.635714017961593e8 + x * (6.574999687621859e9 + x * (8.852614827730569e8 + x * (-1.0117274088834936e10 + x * (-7.210765588190632e8 + x * (8.112111286714461e9 + (2.3610618021993685e8 - 2.6234020024437428e9 * x) * x))))))))))))))));
      s[10] = -309.95354623330815 + x * x * (79184.60622427984 + x * x * (-3.630840274971014e6 + x * x * (6.457593044906863e7 + x * x * (-5.646743083686986e8 + x * x * (2.695299187008051e9 + x * x * (-7.316894584408409e9 + x * x * (1.1198988340192043e10 + x * x * (-8.946560234175976e9 + 2.885742202688117e9 * x * x))))))));
      s[11] = 181.8181818181818 + x * (-2998.733079090222 + x * (-59974.66158180444 + x * (200189.06794386293 + x * (3.002836019157944e6 + x * (-4.1709901405107807e6 + x * (-5.561320187347708e7 + x * (3.975672142103194e7 + x * (4.969590177628992e8 + x * (-2.0021543143899363e8 + x * (-2.402585177267924e9 + x * (5.635714017961593e8 + x * (6.574999687621859e9 + x * (-8.852614827730569e8 + x * (-1.0117274088834936e10 + x * (7.210765588190632e8 + x * (8.112111286714461e9 + (-2.3610618021993685e8 - 2.6234020024437428e9 * x) * x))))))))))))))));
      s[12] = -34.09090909090909 + x * (2658.6158137497423 + x * (26586.158137497423 + x * (-228361.2175527478 + x * (-1.7127091316456087e6 + x * (5.340046481751488e6 + x * (3.560030987834325e7 + x * (-5.4184716062087715e7 + x * (-3.3865447538804823e8 + x * (2.8325449083150494e8 + x * (1.6995269449890296e9 + x * (-8.16500727266683e8 + x * (-4.762920909055651e9 + x * (1.303101075236492e9 + x * (7.44629185849424e9 + x * (-1.0731647223049339e9 + x * (-6.036551562965254e9 + x * (3.541592703299053e8 + 1.967551501832807e9 * x)))))))))))))))));
      s[13] = 9.324009324009324 + x * (-1207.2642965500108 + x * (-8048.428643666739 + x * (139866.00922348278 + x * (699330.0461174138 + x * (-3.845797386127247e6 + x * (-1.7092432827232208e7 + x * (4.286727070878857e7 + x * (1.786136279532857e8 + x * (-2.3757007705988774e8 + x * (-9.50280308239551e8 + x * (7.115114915214121e8 + x * (2.7669891336943808e9 + x * (-1.1655252540669208e9 + x * (-4.440096205969222e9 + x * (9.776134114758453e8 + x * (3.66605029303442e9 + (-3.2691624953529716e8 - 1.2108009242048042e9 * x) * x))))))))))))))));
      s[14] = -2.6223776223776225 + x * (468.02131400345684 + x * (2340.1065700172844 + x * (-59466.86909137306 + x * (-223000.75909264898 + x * (1.8854989436789206e6 + x * (6.284996478929735e6 + x * (-2.3343433448716186e7 + x * (-7.294822952723809e7 + x * (1.3907334249286133e8 + x * (4.1722002747858405e8 + x * (-4.3794445621495885e8 + x * (-1.2773379972936301e9 + x * (7.432928439872885e8 + x * (2.1236938399636812e9 + x * (-6.396087745294094e8 + x * (-1.798899678363964e9 + x * (2.1794416635686478e8 + 6.054004621024021e8 * x)))))))))))))))));
      s[15] = 0.6713286713286714 + x * (-152.03255474684047 + x * (-608.1302189873619 + x * (20122.439472637885 + x * (60367.31841791366 + x * (-684092.0205908632 + x * (-1.8242453882423018e6 + x * (9.243549797865273e6 + x * (2.3108874494663186e7 + x * (-5.934226748183841e7 + x * (-1.424214419564122e8 + x * (1.9797229825338292e8 + x * (4.619353625912268e8 + x * (-3.509302554441443e8 + x * (-8.021262981580442e8 + x * (3.120042802582485e8 + x * (7.020096305810591e8 + (-1.0897208317843239e8 - 2.4216018484096086e8 * x) * x))))))))))))))));
      s[16] = -0.1456876456876457 + x * (39.912323952502526 + x * (133.04107984167507 + x * (-5398.550872643548 + x * (-13496.37718160887 + x * (190675.2532848453 + x * (423722.785077434 + x * (-2.7207899238451696e6 + x * (-5.668312341344103e6 + x * (1.861766369758423e7 + x * (3.723532739516846e7 + x * (-6.587768779299037e7 + x * (-1.2809550404192573e8 + x * (1.2265596575492409e8 + x * (2.3363041096176016e8 + x * (-1.1342655605221742e8 + x * (-2.1267479259790766e8 + x * (4.0864531191912144e7 + 7.567505776280026e7 * x)))))))))))))))));
      s[17] = 0.025184899134478966 + x * (-8.088520956168015 + x * (-23.110059874765756 + x * (1108.292235028346 + x * (2374.911932203599 + x * (-40056.925723881744 + x * (-76298.90614072712 + x * (591711.3846801347 + x * (1.0566274726430976e6 + x * (-4.238636241855281e6 + x * (-7.266233557466196e6 + x * (1.581031601286231e7 + x * (2.6350526688103847e7 + x * (-3.0983917702667702e7 + x * (-5.058598808598809e7 + x * (2.997688182873368e7 + x * (4.817713151046485e7 + (-1.1217714444838628e7 - 1.7805895944188297e7 * x) * x))))))))))))))));
      s[18] = -0.0032136980666392432 + x * (1.1832651669836545 + x * (2.958162917459136 + x * (-163.4874378756654 + x * (-306.5389460168726 + x * (5997.87449276261 + x * (9996.457487937683 + x * (-90662.71535269551 + x * (-141660.49273858673 + x * (670757.361157769 + x * (1.0061360417366535e6 + x * (-2.608368528231844e6 + x * (-3.8038707703381055e6 + x * (5.366397148804557e6 + x * (7.666281641149366e6 + x * (-5.454976795364803e6 + x * (-7.671061118481753e6 + x * (2.136707513302596e6 + 2.967649324031383e6 * x)))))))))))))))));
      s[19] = 0.0002672861289992353 + x * (-0.1109515290187559 + x * (-0.24655895337501313 + x * (15.41711950111421 + x * (25.695199168523683 + x * (-571.427832712555 + x * (-846.559752166748 + x * (8776.916701023843 + x * (12190.162084755339 + x * (-66456.7444133003 + x * (-88608.99255106707 + x * (266775.13036640023 + x * (345819.6134379262 + x * (-572103.4366867701 + x * (-726480.5545228826 + x * (611773.0985455853 + x * (764716.3731819816 + (-253031.15289109686 - 312384.1393717245 * x) * x))))))))))))))));
      s[20] = -0.00001082508822446903 + x * (0.005000436460520494 + x * (0.010000872921040987 + x * (-0.697648835462989 + x * (-1.0464732531944834 + x * (26.047853859389352 + x * (34.730471812519134 + x * (-404.72948614069645 + x * (-505.9118576758706 + x * (3117.1711332852756 + x * (3740.605359942331 + x * (-12820.151364573763 + x * (-14956.84325866939 + x * (28437.89012770494 + x * (32500.44586023422 + x * (-31863.182215915902 + x * (-35846.07999290539 + x * (14057.286271727604 + 15619.206968586226 * x)))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(2);

      s[0] = 0.;
      s[1] = 0.;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(3);

      s[0] = 1.;
      s[1] = -2.;
      s[2] = 1.;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(4);

      s[0] = 1.25 - 3.75 * x;
      s[1] = -1.25 + 8.385254915624213 * x;
      s[2] = -1.25 - 8.385254915624213 * x;
      s[3] = 1.25 + 3.75 * x;
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(5);

      s[0] = -0.7500000000000001 + x * (-5.250000000000001 + 10.500000000000002 * x);
      s[1] = 4.083333333333334 + (8.01950746617272 - 24.500000000000004 * x) * x;
      s[2] = -6.666666666666667 + 28. * x * x;
      s[3] = 4.083333333333334 + (-8.01950746617272 - 24.500000000000004 * x) * x;
      s[4] = -0.7500000000000001 + x * (5.250000000000001 + 10.500000000000002 * x);
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(6);

      s[0] = -1.7500000000000002 + x * (5.250000000000001 + (15.750000000000005 - 26.250000000000004 * x) * x);
      s[1] = 5.1743458804799625 + x * (-20.290085116604 + x * (-28.710291574633665 + 62.545131653948744 * x));
      s[2] = -3.4243458804799602 + x * (36.016488529019114 + (12.96029157463365 - 75.72966067790232 * x) * x);
      s[3] = -3.4243458804799602 + x * (-36.016488529019114 + x * (12.96029157463365 + 75.72966067790232 * x));
      s[4] = 5.1743458804799625 + x * (20.290085116604 + (-28.710291574633665 - 62.545131653948744 * x) * x);
      s[5] = -1.7500000000000002 + x * (-5.250000000000001 + x * (15.750000000000005 + 26.250000000000004 * x));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(7);

      s[0] = 0.6249999999999998 + x * (11.249999999999995 + x * (-22.49999999999999 + x * (-41.249999999999986 + 61.874999999999964 * x)));
      s[1] = -2.1862643928627907 + x * (-30.21683840605192 + x * (72.79202283022025 + (82.57190526146333 - 149.18609118260875 * x) * x));
      s[2] = 8.561264392862793 + x * (29.512161505768194 + x * (-125.89202283022028 + x * (-58.2344868741189 + 186.3110911826088 * x)));
      s[3] = -14.000000000000002 + x * x * (151.20000000000002 - 198.00000000000006 * x * x);
      s[4] = 8.561264392862793 + x * (-29.512161505768194 + x * (-125.89202283022028 + x * (58.2344868741189 + 186.3110911826088 * x)));
      s[5] = -2.1862643928627907 + x * (30.21683840605192 + x * (72.79202283022025 + (-82.57190526146333 - 149.18609118260875 * x) * x));
      s[6] = 0.6249999999999998 + x * (-11.249999999999995 + x * (-22.49999999999999 + x * (41.249999999999986 + 61.874999999999964 * x)));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(8);

      s[0] = 2.109375 + x * (-6.328125 + x * (-46.40624999999999 + x * (77.34374999999997 + (100.54687499999996 - 140.76562499999994 * x) * x)));
      s[1] = -5.808594146968975 + x * (19.989652272755098 + x * (118.70462257766198 + x * (-226.94955368028047 + x * (-212.89784494158457 + 341.9103541666624 * x))));
      s[2] = 10.260125098974642 + x * (-52.020222847273004 + x * (-132.6593356442048 + x * (373.66710316840397 + (183.86734322997904 - 435.04174681591934 * x) * x)));
      s[3] = -6.560905952005669 + x * (94.04104828135569 + x * (60.36096306654281 + x * (-480.6592500397163 + x * (-71.51637328839438 + 478.3721774364371 * x))));
      s[4] = -6.560905952005669 + x * (-94.04104828135569 + x * (60.36096306654281 + x * (480.6592500397163 + (-71.51637328839438 - 478.3721774364371 * x) * x)));
      s[5] = 10.260125098974642 + x * (52.020222847273004 + x * (-132.6593356442048 + x * (-373.66710316840397 + x * (183.86734322997904 + 435.04174681591934 * x))));
      s[6] = -5.808594146968975 + x * (-19.989652272755098 + x * (118.70462257766198 + x * (226.94955368028047 + (-212.89784494158457 - 341.9103541666624 * x) * x)));
      s[7] = 2.109375 + x * (6.328125 + x * (-46.40624999999999 + x * (-77.34374999999997 + x * (100.54687499999996 + 140.76562499999994 * x))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(9);

      s[0] = -0.5468750000000001 + x * (-18.046875000000004 + x * (36.09375000000001 + x * (156.40625000000003 + x * (-234.609375 + x * (-234.609375 + 312.81249999999994 * x)))));
      s[1] = 1.6488486942025704 + x * (47.91069205346119 + x * (-106.49684092343425 + x * (-390.2222425092334 + x * (650.5453319102505 + (515.2467256076445 - 763.5337920274465 * x) * x))));
      s[2] = -3.749080939074228 + x * (-74.78895500882449 + x * (220.88148349035953 + x * (461.74955212949715 + x * (-1022.7973441733963 + x * (-499.46672403721476 + 983.415719129407 * x)))));
      s[3] = 14.647107244871659 + x * (70.45902083732094 + x * (-388.0783925669253 + x * (-324.9392836796546 + x * (1342.2899586917174 + (300.85037900413266 - 1104.6944271019606 * x) * x))));
      s[4] = -24. + x * x * (475.20000000000005 + x * x * (-1470.8571428571427 + 1143.9999999999998 * x * x));
      s[5] = 14.647107244871659 + x * (-70.45902083732094 + x * (-388.0783925669253 + x * (324.9392836796546 + x * (1342.2899586917174 + (-300.85037900413266 - 1104.6944271019606 * x) * x))));
      s[6] = -3.749080939074229 + x * (74.78895500882449 + x * (220.88148349035953 + x * (-461.74955212949715 + x * (-1022.7973441733963 + x * (499.46672403721476 + 983.415719129407 * x)))));
      s[7] = 1.6488486942025704 + x * (-47.91069205346119 + x * (-106.49684092343425 + x * (390.2222425092334 + x * (650.5453319102505 + (-515.2467256076445 - 763.5337920274465 * x) * x))));
      s[8] = -0.5468750000000001 + x * (18.046875000000004 + x * (36.09375000000001 + x * (-156.40625000000003 + x * (-234.609375 + x * (234.609375 + 312.81249999999994 * x)))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(10);

      s[0] = -2.406250000000001 + x * (7.2187500000000036 + x * (93.84375000000003 + x * (-156.40625 + x * (-469.2187500000001 + x * (656.9062500000001 + (531.7812500000001 - 683.7187500000002 * x) * x)))));
      s[1] = 6.382595148343517 + x * (-20.823359829341186 + x * (-243.1230568082394 + x * (440.66356996923986 + x * (1155.854752323978 + x * (-1759.8009588142722 + x * (-1197.6553524155775 + 1674.5903356987844 * x))))));
      s[2] = -10.165458780910196 + x * (41.27971735759138 + x * (354.5126162504836 + x * (-799.7770201753037 + x * (-1406.859536810395 + x * (2666.0436225004687 + (1249.784798130806 - 2175.044685420543 * x) * x)))));
      s[3] = 16.8507241810746 + x * (-105.77429063553579 + x * (-378.700258857578 + x * (1320.6406117661318 + x * (1193.7895797011095 + x * (-3497.003896206779 + x * (-921.3447085986463 + 2478.602664251737 * x))))));
      s[4] = -10.661610548507916 + x * (193.520288953447 + x * (173.46694941533352 + x * (-1749.2340612557366 + x * (-473.56604521469177 + x * (4011.3543348864064 + (337.4340128834177 - 2624.9181201022293 * x) * x)))));
      s[5] = -10.661610548507916 + x * (-193.520288953447 + x * (173.46694941533352 + x * (1749.2340612557366 + x * (-473.56604521469177 + x * (-4011.3543348864064 + x * (337.4340128834177 + 2624.9181201022293 * x))))));
      s[6] = 16.850724181074597 + x * (105.77429063553578 + x * (-378.7002588575778 + x * (-1320.6406117661318 + x * (1193.7895797011095 + x * (3497.0038962067783 + (-921.3447085986461 - 2478.6026642517368 * x) * x)))));
      s[7] = -10.165458780910196 + x * (-41.27971735759138 + x * (354.5126162504836 + x * (799.7770201753037 + x * (-1406.859536810395 + x * (-2666.0436225004687 + x * (1249.784798130806 + 2175.044685420543 * x))))));
      s[8] = 6.382595148343517 + x * (20.823359829341186 + x * (-243.1230568082394 + x * (-440.66356996923986 + x * (1155.854752323978 + x * (1759.8009588142722 + (-1197.6553524155775 - 1674.5903356987844 * x) * x)))));
      s[9] = -2.406250000000001 + x * (-7.2187500000000036 + x * (93.84375000000003 + x * (156.40625 + x * (-469.2187500000001 + x * (-656.9062500000001 + x * (531.7812500000001 + 683.7187500000002 * x))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(11);

      s[0] = 0.4921875000000001 + x * (25.593750000000004 + x * (-51.18750000000001 + x * (-383.90625000000006 + x * (575.859375 + x * (1305.2812500000005 + x * (-1740.3750000000005 + x * (-1180.9687500000002 + 1476.2109375000005 * x)))))));
      s[1] = -1.3853082934775747 + x * (-66.71380446296465 + x * (142.8558935585737 + x * (978.5815289394321 + x * (-1571.595337672924 + x * (-3195.038141156756 + x * (4561.075300510499 + (2708.3007139607193 - 3624.5939055701974 * x) * x))))));
      s[2] = 2.566033428025968 + x * (100.90264088829952 + x * (-257.24605877835717 + x * (-1372.54072225826 + x * (2624.4161317685566 + x * (3952.2472701939923 + x * (-6717.366526943697 + x * (-2972.497735730603 + 4736.393173858924 * x)))))));
      s[3] = -5.690118175279273 + x * (-146.69363127273235 + x * (519.0533014003114 + x * (1535.6706497788077 + x * (-4075.304328392903 + x * (-3703.842380775722 + x * (8736.991960401869 + (2465.5681083306517 - 5452.525679510489 * x) * x))))));
      s[4] = 22.350538874064206 + x * (136.85847434394478 + x * (-925.4756361805278 + x * (-1086.5976197323728 + x * (5510.909873582983 + x * (2271.987665387126 + x * (-10242.54795619089 + x * (-1387.4135254540572 + 5863.801188007476 * x)))))));
      s[5] = -36.666666666666664 + x * x * (1144. + x * x * (-6128.571428571429 + x * x * (10804.444444444445 - 5998.5714285714275 * x * x)));
      s[6] = 22.350538874064206 + x * (-136.85847434394478 + x * (-925.4756361805278 + x * (1086.5976197323728 + x * (5510.909873582983 + x * (-2271.987665387126 + x * (-10242.54795619089 + x * (1387.4135254540572 + 5863.801188007476 * x)))))));
      s[7] = -5.690118175279273 + x * (146.69363127273238 + x * (519.0533014003114 + x * (-1535.6706497788082 + x * (-4075.3043283929032 + x * (3703.842380775722 + x * (8736.991960401869 + (-2465.5681083306517 - 5452.525679510487 * x) * x))))));
      s[8] = 2.566033428025968 + x * (-100.90264088829953 + x * (-257.2460587783572 + x * (1372.5407222582603 + x * (2624.416131768557 + x * (-3952.2472701939932 + x * (-6717.366526943697 + x * (2972.497735730603 + 4736.393173858924 * x)))))));
      s[9] = -1.3853082934775747 + x * (66.71380446296465 + x * (142.8558935585737 + x * (-978.5815289394321 + x * (-1571.595337672924 + x * (3195.038141156756 + x * (4561.075300510499 + (-2708.3007139607193 - 3624.5939055701974 * x) * x))))));
      s[10] = 0.4921875000000001 + x * (-25.593750000000004 + x * (-51.18750000000001 + x * (383.90625000000006 + x * (575.859375 + x * (-1305.2812500000005 + x * (-1740.3750000000005 + x * (1180.9687500000002 + 1476.2109375000005 * x)))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(12);

      s[0] = 2.666015624999999 + x * (-7.9980468749999964 + x * (-159.9609374999999 + x * (266.60156249999983 + x * (1359.6679687499989 + x * (-1903.5351562499986 + x * (-3444.4921874999977 + x * (4428.632812499996 + (2583.369140624998 - 3157.4511718749977 * x) * x)))))));
      s[1] = -6.92778563508287 + x * (21.995314755990464 + x * (411.52384346149347 + x * (-725.868981592399 + x * (-3428.501555516432 + x * (5079.803021152933 + x * (8406.676424123061 + x * (-11438.874271164626 + x * (-6004.7088053755515 + 7767.059151858794 * x))))))));
      s[2] = 10.428246488508563 + x * (-38.18568178035809 + x * (-600.2725425311031 + x * (1221.1393734975236 + x * (4699.146296161243 + x * (-8029.990066665399 + x * (-10510.28956857182 + x * (16494.04432445616 + (6834.145268701547 - 10195.355840961125 * x) * x)))))));
      s[3] = -15.412996630821947 + x * (73.0616719731863 + x * (810.3452782209131 + x * (-2134.0280515096774 + x * (-5354.402072262088 + x * (11844.596869791596 + x * (10447.915780335088 + x * (-21225.37641901051 + x * (-6123.013764533876 + 11824.87830223096 * x))))))));
      s[4] = 24.973373446327656 + x * (-187.5201959526852 + x * (-854.8063344183281 + x * (3565.8745742901256 + x * (4547.352063801842 + x * (-15934.417679742915 + x * (-7802.191159777482 + x * (25107.9143201318 + (4203.238325970339 - 12858.306480304947 * x) * x)))))));
      s[5] = -15.726853293931402 + x * (345.5111427882573 + x * (393.17069276702455 + x * (-4798.758065791296 + x * (-1823.2627009345647 + x * (18692.881419253095 + x * (2902.38071139115 + x * (-27327.368700177536 + x * (-1493.0301653874565 + 13363.423314556954 * x))))))));
      s[6] = -15.726853293931402 + x * (-345.5111427882573 + x * (393.17069276702455 + x * (4798.758065791296 + x * (-1823.2627009345647 + x * (-18692.881419253095 + x * (2902.38071139115 + x * (27327.368700177536 + (-1493.0301653874565 - 13363.423314556954 * x) * x)))))));
      s[7] = 24.973373446327656 + x * (187.5201959526852 + x * (-854.8063344183281 + x * (-3565.8745742901256 + x * (4547.352063801842 + x * (15934.417679742915 + x * (-7802.191159777482 + x * (-25107.9143201318 + x * (4203.238325970339 + 12858.306480304947 * x))))))));
      s[8] = -15.412996630821947 + x * (-73.06167197318626 + x * (810.3452782209131 + x * (2134.0280515096774 + x * (-5354.402072262088 + x * (-11844.596869791596 + x * (10447.915780335086 + x * (21225.376419010514 + (-6123.013764533877 - 11824.87830223096 * x) * x)))))));
      s[9] = 10.428246488508563 + x * (38.18568178035809 + x * (-600.2725425311031 + x * (-1221.1393734975236 + x * (4699.146296161243 + x * (8029.990066665399 + x * (-10510.28956857182 + x * (-16494.04432445616 + x * (6834.145268701547 + 10195.355840961125 * x))))))));
      s[10] = -6.92778563508287 + x * (-21.995314755990464 + x * (411.52384346149347 + x * (725.868981592399 + x * (-3428.501555516432 + x * (-5079.803021152933 + x * (8406.676424123061 + x * (11438.874271164626 + (-6004.7088053755515 - 7767.059151858794 * x) * x)))))));
      s[11] = 2.666015624999999 + x * (7.9980468749999964 + x * (-159.9609374999999 + x * (-266.60156249999983 + x * (1359.6679687499989 + x * (1903.5351562499986 + x * (-3444.4921874999977 + x * (-4428.632812499996 + x * (2583.369140624998 + 3157.4511718749977 * x))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(13);

      s[0] = -0.4511718750000001 + x * (-33.837890625 + x * (67.67578125 + x * (766.9921875000001 + x * (-1150.4882812500002 + x * (-4371.85546875 + x * (5829.140624999999 + x * (8743.7109375 + x * (-10929.638671875 + x * (-5586.259765624999 + 6703.511718749999 * x)))))))));
      s[1] = 1.2229696203714218 + x * (87.08917992306108 + x * (-182.7090745570596 + x * (-1954.0151848252508 + x * (3074.5751631138573 + x * (10944.201073143777 + x * (-15306.952035503753 + x * (-21317.04005589174 + x * (27951.353029364735 + (13118.887667645744 - 16513.69201380345 * x) * x))))))));
      s[2] = -2.043758771527479 + x * (-127.67456490926473 + x * (301.70717147814094 + x * (2778.838325137309 + x * (-4924.994956912873 + x * (-14789.460335211126 + x * (23299.27002869003 + x * (26860.779398985636 + x * (-39671.61441829495 + x * (-15341.046577458828 + 21751.41355847448 * x)))))))));
      s[3] = 3.626554834214089 + x * (178.24779531529697 + x * (-519.5301388664382 + x * (-3590.700956693204 + x * (7849.230463238918 + x * (16983.07352190227 + x * (-32999.823007088526 + x * (-27732.763653581787 + x * (50519.581906362364 + (14507.868275057386 - 25371.22483763944 * x) * x))))))));
      s[4] = -8.028327919993533 + x * (-252.52805245708763 + x * (1045.8600816458656 + x * (3950.4919767973456 + x * (-12270.899671918749 + x * (-15834.001281588153 + x * (43718.310928265724 + x * (23140.266211565213 + x * (-59898.00062274084 + x * (-11194.438755995889 + 27817.463883498705 * x)))))))));
      s[5] = 31.673734111935506 + x * (234.70412095153617 + x * (-1883.0038209505085 + x * (-2807.6365712193583 + x * (16894.00585515742 + x * (9821.895050907391 + x * (-52533.279872696825 + x * (-13238.885648375202 + x * (66383.77332263826 + (6075.428342906279 - 29245.472309280296 * x) * x))))))));
      s[6] = -52. + x * x * (2340. + x * x * (-18942.85714285714 + x * x * (55986.66666666666 + x * x * (-68710.90909090907 + 29715.99999999999 * x * x))));
      s[7] = 31.673734111935506 + x * (-234.70412095153617 + x * (-1883.0038209505085 + x * (2807.6365712193583 + x * (16894.00585515742 + x * (-9821.895050907391 + x * (-52533.279872696825 + x * (13238.885648375202 + x * (66383.77332263826 + (-6075.428342906279 - 29245.472309280296 * x) * x))))))));
      s[8] = -8.028327919993533 + x * (252.52805245708763 + x * (1045.8600816458656 + x * (-3950.4919767973456 + x * (-12270.899671918749 + x * (15834.001281588153 + x * (43718.310928265724 + x * (-23140.266211565213 + x * (-59898.00062274084 + x * (11194.438755995889 + 27817.463883498705 * x)))))))));
      s[9] = 3.6265548342140885 + x * (-178.247795315297 + x * (-519.5301388664382 + x * (3590.7009566932043 + x * (7849.230463238918 + x * (-16983.073521902275 + x * (-32999.823007088526 + x * (27732.763653581787 + x * (50519.581906362364 + (-14507.86827505739 - 25371.224837639442 * x) * x))))))));
      s[10] = -2.0437587715274788 + x * (127.67456490926475 + x * (301.707171478141 + x * (-2778.838325137309 + x * (-4924.994956912873 + x * (14789.460335211126 + x * (23299.27002869003 + x * (-26860.779398985636 + x * (-39671.61441829496 + x * (15341.04657745883 + 21751.41355847448 * x)))))))));
      s[11] = 1.2229696203714218 + x * (-87.08917992306108 + x * (-182.7090745570596 + x * (1954.0151848252508 + x * (3074.5751631138573 + x * (-10944.201073143777 + x * (-15306.952035503753 + x * (21317.04005589174 + x * (27951.353029364735 + (-13118.887667645744 - 16513.69201380345 * x) * x))))))));
      s[12] = -0.4511718750000001 + x * (33.837890625 + x * (67.67578125 + x * (-766.9921875000001 + x * (-1150.4882812500002 + x * (4371.85546875 + x * (5829.140624999999 + x * (-8743.7109375 + x * (-10929.638671875 + x * (5586.259765624999 + 6703.511718749999 * x)))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(14);

      s[0] = -2.9003906250000013 + x * (8.701171875000004 + x * (246.53320312500009 + x * (-410.88867187500017 + x * (-3122.753906250001 + x * (4371.855468750002 + x * (13115.566406250007 + x * (-16862.87109375001 + x * (-21547.001953125007 + x * (26335.224609375015 + (11970.556640625004 - 14147.021484375005 * x) * x)))))))));
      s[1] = 7.444462293628238 + x * (-23.26551884004479 + x * (-629.6150042313466 + x * (1093.1555687639468 + x * (7898.077141290149 + x * (-11518.808540558784 + x * (-32672.230289375715 + x * (43760.41216153525 + x * (52527.67164553383 + x * (-66880.03306399669 + x * (-28339.115266751975 + 34889.52908221418 * x))))))))));
      s[2] = -10.846668169772908 + x * (37.49707881281303 + x * (904.2372943861399 + x * (-1736.6447651316864 + x * (-11032.489686015004 + x * (17798.417612247515 + x * (43760.69206445399 + x * (-64834.845142987935 + x * (-66601.37044674913 + x * (93802.23108876863 + (33836.04843700838 - 46079.75188234186 * x) * x)))))))));
      s[3] = 15.036223984526135 + x * (-61.888620266828546 + x * (-1212.0228392432575 + x * (2771.4708356537676 + x * (13872.478993953526 + x * (-26646.051998600986 + x * (-50441.54964546302 + x * (88978.20684495165 + x * (70571.34326053997 + x * (-118339.38804969276 + x * (-33294.6097183946 + 53985.27961115911 * x))))))))));
      s[4] = -21.612248821454106 + x * (117.74810541984408 + x * (1590.5720725836404 + x * (-4814.318481762526 + x * (-15477.159251697522 + x * (39350.6582295643 + x * (49580.724225319995 + x * (-115768.40504604191 + x * (-63142.85548885098 + x * (140154.51989555592 + (27754.02347109304 - 59567.49441157708 * x) * x)))))))));
      s[5] = 34.63537859581579 + x * (-303.17728476044834 + x * (-1669.6923646218765 + x * (8119.712945005686 + x * (13180.39814854781 + x * (-53840.86521394397 + x * (-37375.09370840765 + x * (140211.04457235013 + x * (43999.86314827365 + x * (-156912.29216781148 + x * (-18320.05542166401 + 63173.205688359536 * x))))))))));
      s[6] = -21.756757257743118 + x * (561.0695710431642 + x * (769.9876380016988 + x * (-11031.480387250973 + x * (-5318.551439828949 + x * (64006.29584318133 + x * (14031.890947222355 + x * (-155082.2042106467 + x * (-15807.650165622264 + x * (166080.5547003878 + (6393.151858084121 - 64948.17952732908 * x) * x)))))))));
      s[7] = -21.756757257743118 + x * (-561.0695710431642 + x * (769.9876380016988 + x * (11031.480387250973 + x * (-5318.551439828949 + x * (-64006.29584318133 + x * (14031.890947222355 + x * (155082.2042106467 + x * (-15807.650165622264 + x * (-166080.5547003878 + x * (6393.151858084121 + 64948.17952732908 * x))))))))));
      s[8] = 34.63537859581579 + x * (303.17728476044834 + x * (-1669.6923646218765 + x * (-8119.712945005686 + x * (13180.39814854781 + x * (53840.86521394397 + x * (-37375.09370840765 + x * (-140211.04457235013 + x * (43999.86314827365 + x * (156912.29216781148 + (-18320.05542166401 - 63173.205688359536 * x) * x)))))))));
      s[9] = -21.612248821454106 + x * (-117.74810541984405 + x * (1590.5720725836404 + x * (4814.318481762526 + x * (-15477.159251697525 + x * (-39350.6582295643 + x * (49580.724225319995 + x * (115768.40504604191 + x * (-63142.85548885098 + x * (-140154.51989555592 + x * (27754.023471093045 + 59567.4944115771 * x))))))))));
      s[10] = 15.036223984526133 + x * (61.88862026682854 + x * (-1212.0228392432575 + x * (-2771.4708356537676 + x * (13872.478993953524 + x * (26646.051998600986 + x * (-50441.54964546302 + x * (-88978.20684495165 + x * (70571.34326053997 + x * (118339.38804969276 + (-33294.6097183946 - 53985.27961115911 * x) * x)))))))));
      s[11] = -10.846668169772908 + x * (-37.49707881281303 + x * (904.2372943861399 + x * (1736.6447651316864 + x * (-11032.489686015004 + x * (-17798.417612247515 + x * (43760.69206445399 + x * (64834.845142987935 + x * (-66601.37044674913 + x * (-93802.23108876863 + x * (33836.04843700838 + 46079.75188234186 * x))))))))));
      s[12] = 7.444462293628238 + x * (23.26551884004479 + x * (-629.6150042313466 + x * (-1093.1555687639468 + x * (7898.077141290149 + x * (11518.808540558784 + x * (-32672.230289375715 + x * (-43760.41216153525 + x * (52527.67164553383 + x * (66880.03306399669 + (-28339.115266751975 - 34889.52908221418 * x) * x)))))))));
      s[13] = -2.9003906250000013 + x * (-8.701171875000004 + x * (246.53320312500009 + x * (410.88867187500017 + x * (-3122.753906250001 + x * (-4371.855468750002 + x * (13115.566406250007 + x * (16862.87109375001 + x * (-21547.001953125007 + x * (-26335.224609375015 + x * (11970.556640625004 + 14147.021484375005 * x))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(15);

      s[0] = 0.4189453125 + x * (42.732421875 + x * (-85.46484375 + x * (-1353.193359375 + x * (2029.7900390625005 + x * (11366.824218749998 + x * (-15155.765625 + x * (-37348.13671874999 + x * (46685.1708984375 + x * (51872.41210937499 + x * (-62246.89453125 + x * (-25464.638671875 + 29708.745117187504 * x)))))))))));
      s[1] = -1.1099461651819988 + x * (-109.04422584148075 + x * (225.94081538669334 + x * (3434.6680109688323 + x * (-5337.501951563802 + x * (-28593.99471694147 + x * (39498.044221068965 + x * (92730.52229513715 + x * (-120086.65324158763 + x * (-126515.35166926213 + x * (157284.70624373134 + (60673.0783574437 - 73333.91018812323 * x) * x))))))))));
      s[2] = 1.7472704312484553 + x * (156.4577553593038 + x * (-353.54407284730274 + x * (-4855.179007250217 + x * (8228.354149099197 + x * (39433.39185348597 + x * (-59404.49944480196 + x * (-123501.22642963202 + x * (174420.59077423607 + x * (161247.55246776485 + x * (-218620.4818234576 + x * (-73636.12068915289 + 97063.10056950564 * x)))))))))));
      s[3] = -2.7603728441274433 + x * (-210.45191788856727 + x * (551.2678210089084 + x * (6320.780743702286 + x * (-12417.716583251145 + x * (-48709.92811171262 + x * (85062.0772068308 + x * (142678.23515258337 + x * (-233586.37149486542 + x * (-174088.443689384 + x * (273609.35831326706 + (74680.7469019545 - 114113.02052705249 * x) * x))))))))));
      s[4] = 4.855151077036711 + x * (285.036982032162 + x * (-940.3232163078088 + x * (-7923.052386656471 + x * (19603.32493545196 + x * (54557.84287607862 + x * (-119989.12310090271 + x * (-144841.06253572513 + x * (298639.78703311237 + x * (163275.8126537518 + x * (-323183.4049152052 + x * (-65757.46683698054 + 126542.90971325804 * x)))))))))));
      s[5] = -10.768467648255442 + x * (-398.80991304881536 + x * (1896.214137450234 + x * (8657.524083772116 + x * (-30872.82755360286 + x * (-50868.98473054057 + x * (161243.88227361563 + x * (121634.25047464985 + x * (-361457.5794784129 + x * (-127505.89675903 + x * (363749.96127011767 + (48714.67070879093 - 135113.26865629424 * x) * x))))))))));
      s[6] = 42.61741983677969 + x * (369.98785525754977 + x * (-3436.0906409407235 + x * (-6172.270764465036 + x * (42991.576964804146 + x * (31781.067057535656 + x * (-196767.94886414404 + x * (-70312.99767902952 + x * (408124.60096362536 + x * (70098.57083925216 + x * (-390604.7830187415 + x * (-25871.75523614221 + 140158.62578970054 * x)))))))))));
      s[7] = -70. + x * x * (4284. + x * x * (-48450.00000000001 + x * x * (211026.6666666667 + x * x * (-425479.09090909094 + x * x * (400023.076923077 - 141826.36363636362 * x * x)))));
      s[8] = 42.61741983677969 + x * (-369.98785525754977 + x * (-3436.0906409407235 + x * (6172.270764465036 + x * (42991.576964804146 + x * (-31781.067057535656 + x * (-196767.94886414404 + x * (70312.99767902952 + x * (408124.60096362536 + x * (-70098.57083925216 + x * (-390604.7830187415 + x * (25871.75523614221 + 140158.62578970054 * x)))))))))));
      s[9] = -10.768467648255442 + x * (398.80991304881536 + x * (1896.214137450234 + x * (-8657.524083772116 + x * (-30872.82755360286 + x * (50868.98473054057 + x * (161243.88227361563 + x * (-121634.25047464985 + x * (-361457.5794784129 + x * (127505.89675903 + x * (363749.96127011767 + (-48714.67070879093 - 135113.26865629424 * x) * x))))))))));
      s[10] = 4.85515107703671 + x * (-285.036982032162 + x * (-940.3232163078086 + x * (7923.052386656469 + x * (19603.324935451958 + x * (-54557.84287607862 + x * (-119989.12310090268 + x * (144841.06253572513 + x * (298639.78703311237 + x * (-163275.8126537518 + x * (-323183.4049152051 + x * (65757.46683698054 + 126542.909713258 * x)))))))))));
      s[11] = -2.7603728441274424 + x * (210.4519178885673 + x * (551.2678210089085 + x * (-6320.780743702286 + x * (-12417.716583251145 + x * (48709.92811171262 + x * (85062.0772068308 + x * (-142678.23515258337 + x * (-233586.37149486542 + x * (174088.443689384 + x * (273609.35831326706 + (-74680.7469019545 - 114113.02052705249 * x) * x))))))))));
      s[12] = 1.7472704312484553 + x * (-156.4577553593038 + x * (-353.54407284730274 + x * (4855.179007250217 + x * (8228.354149099197 + x * (-39433.39185348597 + x * (-59404.49944480195 + x * (123501.22642963204 + x * (174420.59077423607 + x * (-161247.55246776485 + x * (-218620.48182345758 + x * (73636.12068915287 + 97063.10056950562 * x)))))))))));
      s[13] = -1.1099461651819988 + x * (109.04422584148075 + x * (225.94081538669334 + x * (-3434.6680109688323 + x * (-5337.501951563802 + x * (28593.99471694147 + x * (39498.044221068965 + x * (-92730.52229513715 + x * (-120086.65324158763 + x * (126515.35166926213 + x * (157284.70624373134 + (-60673.0783574437 - 73333.91018812323 * x) * x))))))))));
      s[14] = 0.4189453125 + x * (-42.732421875 + x * (-85.46484375 + x * (1353.193359375 + x * (2029.7900390625005 + x * (-11366.824218749998 + x * (-15155.765625 + x * (37348.13671874999 + x * (46685.1708984375 + x * (-51872.41210937499 + x * (-62246.89453125 + x * (25464.638671875 + 29708.745117187504 * x)))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(16);

      s[0] = 3.115905761718757 + x * (-9.347717285156271 + x * (-355.2132568359383 + x * (592.0220947265641 + x * (6216.231994628922 + x * (-8702.72479248049 + x * (-38126.22290039072 + x * (49019.4294433595 + x * (102123.81134033226 + x * (-124817.99163818388 + x * (-122548.5736083987 + x * (144830.1324462894 + (53847.10052490245 - 62131.2698364259 * x) * x)))))))))));
      s[1] = -7.934341866464172 + x * (24.550134145776738 + x * (901.9900529497329 + x * (-1550.5015462290187 + x * (-15701.246314002852 + x * (22671.688618621916 + x * (95522.26418996148 + x * (-126669.12873754023 + x * (-252993.80250629882 + x * (318920.00638552464 + x * (299117.2440281325 + x * (-364597.6152449152 + x * (-128966.89991920104 + 153478.61557285613 * x))))))))))));
      s[2] = 11.3267911346292 + x * (-37.78953876616011 + x * (-1277.8732260766385 + x * (2368.535862407389 + x * (21925.4986958725 + x * (-34136.654777795455 + x * (-130518.19181810021 + x * (186620.33394133343 + x * (335735.71342109964 + x * (-456342.7562984376 + x * (-382937.13466375606 + x * (503293.8166551781 + (158585.30865935155 - 203495.26242337847 * x) * x)))))))))));
      s[3] = -15.115720712603526 + x * (57.25591840864523 + x * (1678.4049093650272 + x * (-3531.959885208425 + x * (-27947.543984340922 + x * (49401.70700246135 + x * (159290.557220766 + x * (-258585.85964635375 + x * (-388528.8649341132 + x * (599575.30442131 + x * (419305.77006475953 + x * (-625679.2863101313 + x * (-164679.7803833169 + 239915.58316244514 * x))))))))))));
      s[4] = 20.300815726962743 + x * (-93.35300705208236 + x * (-2177.853963473552 + x * (5563.794390907834 + x * (34024.28905835545 + x * (-73014.76017477475 + x * (-178492.1468759654 + x * (351768.6650799905 + x * (402785.1731593992 + x * (-754600.7269008678 + x * (-406635.9108096374 + x * (736630.9542941076 + (151028.10713080698 - 267115.60112182767 * x) * x)))))))))));
      s[5] = -28.78151574486889 + x * (177.6419576424871 + x * (2819.2793479400334 + x * (-9667.128547761065 + x * (-37621.14106900786 + x * (108360.40847047055 + x * (174931.4422200321 + x * (-462725.01705588296 + x * (-361458.2651370462 + x * (908905.9982443277 + x * (341810.5670624657 + x * (-831087.5681076774 + x * (-120790.1714433099 + 286741.22641458217 * x))))))))))));
      s[6] = 45.839436803620096 + x * (-458.65355484060444 + x * (-2952.7894174580083 + x * (16413.66107255826 + x * (32117.256084217595 + x * (-149965.27431902426 + x * (-132734.5615557153 + x * (569184.0546622012 + x * (254394.00418675004 + x * (-1.0370060329660759e6 + x * (-228522.46195298704 + x * (900749.018203621 + (77836.32742695457 - 299539.76112023095 * x) * x)))))))))));
      s[7] = -28.751371102994234 + x * (851.2512136380719 + x * (1364.0555535893452 + x * (-22436.687382531996 + x * (-13013.344465722847 + x * (179802.15415763244 + x * (50126.8595194121 + x * (-636052.399263852 + x * (-92057.76953012314 + x * (1.1104232667113245e6 + x * (80410.49987942155 + x * (-937867.2230159874 + x * (-26859.991996187884 + 305866.3600258257 * x))))))))))));
      s[8] = -28.751371102994234 + x * (-851.2512136380719 + x * (1364.0555535893452 + x * (22436.687382531996 + x * (-13013.344465722847 + x * (-179802.15415763244 + x * (50126.8595194121 + x * (636052.399263852 + x * (-92057.76953012314 + x * (-1.1104232667113245e6 + x * (80410.49987942155 + x * (937867.2230159874 + (-26859.991996187884 - 305866.3600258257 * x) * x)))))))))));
      s[9] = 45.839436803620096 + x * (458.65355484060444 + x * (-2952.7894174580083 + x * (-16413.66107255826 + x * (32117.256084217595 + x * (149965.27431902426 + x * (-132734.5615557153 + x * (-569184.0546622012 + x * (254394.00418675004 + x * (1.0370060329660759e6 + x * (-228522.46195298704 + x * (-900749.018203621 + x * (77836.32742695457 + 299539.76112023095 * x))))))))))));
      s[10] = -28.78151574486889 + x * (-177.6419576424871 + x * (2819.2793479400334 + x * (9667.128547761065 + x * (-37621.14106900786 + x * (-108360.40847047055 + x * (174931.4422200321 + x * (462725.01705588296 + x * (-361458.2651370462 + x * (-908905.9982443277 + x * (341810.5670624657 + x * (831087.5681076774 + (-120790.1714433099 - 286741.22641458217 * x) * x)))))))))));
      s[11] = 20.300815726962753 + x * (93.35300705208236 + x * (-2177.853963473552 + x * (-5563.794390907834 + x * (34024.28905835545 + x * (73014.76017477475 + x * (-178492.14687596535 + x * (-351768.6650799906 + x * (402785.1731593992 + x * (754600.7269008677 + x * (-406635.9108096374 + x * (-736630.9542941076 + x * (151028.10713080695 + 267115.60112182767 * x))))))))))));
      s[12] = -15.115720712603526 + x * (-57.25591840864522 + x * (1678.4049093650272 + x * (3531.9598852084255 + x * (-27947.543984340922 + x * (-49401.70700246135 + x * (159290.557220766 + x * (258585.85964635375 + x * (-388528.8649341132 + x * (-599575.3044213098 + x * (419305.77006475953 + x * (625679.2863101314 + (-164679.7803833169 - 239915.58316244514 * x) * x)))))))))));
      s[13] = 11.3267911346292 + x * (37.78953876616011 + x * (-1277.8732260766385 + x * (-2368.535862407389 + x * (21925.4986958725 + x * (34136.654777795455 + x * (-130518.19181810021 + x * (-186620.33394133343 + x * (335735.71342109964 + x * (456342.7562984376 + x * (-382937.13466375606 + x * (-503293.8166551781 + x * (158585.30865935155 + 203495.26242337847 * x))))))))))));
      s[14] = -7.934341866464172 + x * (-24.550134145776738 + x * (901.9900529497329 + x * (1550.5015462290187 + x * (-15701.246314002852 + x * (-22671.688618621916 + x * (95522.26418996148 + x * (126669.12873754023 + x * (-252993.80250629882 + x * (-318920.00638552464 + x * (299117.2440281325 + x * (364597.6152449152 + (-128966.89991920104 - 153478.61557285613 * x) * x)))))))))));
      s[15] = 3.115905761718757 + x * (9.347717285156271 + x * (-355.2132568359383 + x * (-592.0220947265641 + x * (6216.231994628922 + x * (8702.72479248049 + x * (-38126.22290039072 + x * (-49019.4294433595 + x * (102123.81134033226 + x * (124817.99163818388 + x * (-122548.5736083987 + x * (-144830.1324462894 + x * (53847.10052490245 + 62131.2698364259 * x))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(17);

      s[0] = -0.3927612304687506 + x * (-52.237243652343835 + x * (104.47448730468767 + x * (2193.964233398441 + x * (-3290.9463500976617 + x * (-25230.58868408208 + x * (33640.78491210943 + x * (120145.66040039083 + x * (-150182.07550048854 + x * (-270327.7359008794 + x * (324393.2830810552 + x * (285072.88513183646 + x * (-332585.03265380923 + x * (-113298.19793701192 + 129483.6547851565 * x)))))))))))));
      s[1] = 1.025141122099502 + x * (132.51296768414284 + x * (-272.34320448194 + x * (-5548.4122369579 + x * (8552.402803333784 + x * (63483.162578686926 + x * (-86981.21262888037 + x * (-300103.9763925922 + x * (385487.1717316811 + x * (668686.9057458822 + x * (-824578.92788287 + x * (-696420.0165214573 + x * (834922.571451227 + (272516.9649655714 - 320046.9241894325 * x) * x))))))))))));
      s[2] = -1.5535798721447518 + x * (-187.3402327035757 + x * (411.3389986466223 + x * (7779.61898905794 + x * (-12811.159028536302 + x * (-87816.03288449286 + x * (128543.87446317679 + x * (407285.2004270455 + x * (-558917.204040777 + x * (-885392.4805431266 + x * (1.1664225599595106e6 + x * (895053.0800916112 + x * (-1.146395351882334e6 + x * (-338697.09353196865 + 424954.3236690439 * x)))))))))))));
      s[3] = 2.2893108904688426 + x * (245.54427600641418 + x * (-602.0483130543552 + x * (-10028.938667536984 + x * (18442.41404661733 + x * (110211.10796726844 + x * (-180150.56920545525 + x * (-492919.4716246001 + x * (755366.1532805457 + x * (1.0261636324340876e6 + x * (-1.5096261103033007e6 + x * (-990912.8889119364 + x * (1.4172739366306302e6 + (358413.66858626885 - 502166.8551595249 * x) * x))))))))))));
      s[4] = -3.5630818917449405 + x * (-319.3896348121807 + x * (924.3885387326834 + x * (12615.883648583795 + x * (-27384.995424774435 + x * (-131570.78444862933 + x * (253864.479661657 + x * (551996.2961203855 + x * (-998504.2443860112 + x * (-1.0793113761910482e6 + x * (1.8742682112301686e6 + x * (985017.4202495676 + x * (-1.66300838677897e6 + x * (-339163.39854810684 + 560924.8287594593 * x)))))))))))));
      s[5] = 6.2586395949801625 + x * (426.13246575068297 + x * (-1574.229620074608 + x * (-15583.10782096529 + x * (43175.64116130805 + x * (145760.13562453332 + x * (-358980.585253792 + x * (-557100.6650871274 + x * (1.286284839267164e6 + x * (1.0117423012052765e6 + x * (-2.242562808211343e6 + x * (-871258.3368569231 + x * (1.8775313499849932e6 + (286479.7644036113 - 604754.8482796598 * x) * x))))))))))));
      s[6] = -13.912233091875011 + x * (-592.0348924542632 + x * (3181.4914677641646 + x * (16971.232936016433 + x * (-68400.31745368667 + x * (-136053.7836093348 + x * (487419.41533856484 + x * (470239.9437192929 + x * (-1.5793667609510948e6 + x * (-796908.3974319093 + x * (2.569467407411396e6 + x * (652950.4883070553 + x * (-2.0468240184949308e6 + x * (-206885.87662839427 + 635296.1959151464 * x)))))))))))));
      s[7] = 55.18189781201828 + x * (548.7008729815851 + x * (-5790.672354837254 + x * (-12126.360797581016 + x * (95980.96024583589 + x * (85412.63089000154 + x * (-600930.4095096022 + x * (-273707.02069347556 + x * (1.8053412115080704e6 + x * (441857.6987345386 + x * (-2.7978666922076913e6 + x * (-350197.8997229892 + x * (2.155875477197737e6 + (108343.03210817327 - 653365.6202554328 * x) * x))))))))))));
      s[8] = -90.66666666666666 + x * x * (7235.199999999999 + x * x * (-108527.99999999999 + x * x * (647148.4444444444 + x * x * (-1.8910181818181814e6 + x * x * (2.8801661538461535e6 + x * x * (-2.1935810909090904e6 + 659350.4895104894 * x * x))))));
      s[9] = 55.18189781201828 + x * (-548.7008729815851 + x * (-5790.672354837254 + x * (12126.360797581016 + x * (95980.96024583589 + x * (-85412.63089000154 + x * (-600930.4095096022 + x * (273707.02069347556 + x * (1.8053412115080704e6 + x * (-441857.6987345386 + x * (-2.7978666922076913e6 + x * (350197.8997229892 + x * (2.155875477197737e6 + (-108343.03210817327 - 653365.6202554328 * x) * x))))))))))));
      s[10] = -13.912233091875011 + x * (592.0348924542633 + x * (3181.4914677641655 + x * (-16971.232936016433 + x * (-68400.31745368666 + x * (136053.7836093348 + x * (487419.41533856484 + x * (-470239.9437192929 + x * (-1.5793667609510948e6 + x * (796908.3974319093 + x * (2.569467407411396e6 + x * (-652950.4883070553 + x * (-2.046824018494931e6 + x * (206885.87662839427 + 635296.1959151464 * x)))))))))))));
      s[11] = 6.2586395949801625 + x * (-426.13246575068297 + x * (-1574.229620074608 + x * (15583.10782096529 + x * (43175.64116130805 + x * (-145760.13562453332 + x * (-358980.585253792 + x * (557100.6650871274 + x * (1.286284839267164e6 + x * (-1.0117423012052765e6 + x * (-2.242562808211343e6 + x * (871258.3368569231 + x * (1.8775313499849932e6 + (-286479.7644036113 - 604754.8482796598 * x) * x))))))))))));
      s[12] = -3.563081891744941 + x * (319.3896348121807 + x * (924.3885387326835 + x * (-12615.883648583795 + x * (-27384.995424774435 + x * (131570.78444862933 + x * (253864.479661657 + x * (-551996.2961203856 + x * (-998504.2443860112 + x * (1.0793113761910482e6 + x * (1.8742682112301686e6 + x * (-985017.4202495676 + x * (-1.66300838677897e6 + x * (339163.39854810684 + 560924.8287594592 * x)))))))))))));
      s[13] = 2.289310890468843 + x * (-245.54427600641418 + x * (-602.0483130543552 + x * (10028.938667536986 + x * (18442.41404661733 + x * (-110211.10796726847 + x * (-180150.56920545528 + x * (492919.4716246001 + x * (755366.1532805457 + x * (-1.0261636324340876e6 + x * (-1.509626110303301e6 + x * (990912.8889119365 + x * (1.4172739366306304e6 + (-358413.66858626885 - 502166.855159525 * x) * x))))))))))));
      s[14] = -1.5535798721447516 + x * (187.3402327035757 + x * (411.3389986466223 + x * (-7779.618989057939 + x * (-12811.159028536302 + x * (87816.03288449287 + x * (128543.87446317679 + x * (-407285.2004270455 + x * (-558917.2040407772 + x * (885392.4805431266 + x * (1.1664225599595106e6 + x * (-895053.0800916112 + x * (-1.1463953518823339e6 + x * (338697.09353196865 + 424954.3236690439 * x)))))))))))));
      s[15] = 1.025141122099502 + x * (-132.51296768414284 + x * (-272.34320448194 + x * (5548.4122369579 + x * (8552.402803333784 + x * (-63483.162578686926 + x * (-86981.21262888037 + x * (300103.9763925922 + x * (385487.1717316811 + x * (-668686.9057458822 + x * (-824578.92788287 + x * (696420.0165214573 + x * (834922.571451227 + (-272516.9649655714 - 320046.9241894325 * x) * x))))))))))));
      s[16] = -0.3927612304687506 + x * (52.237243652343835 + x * (104.47448730468767 + x * (-2193.964233398441 + x * (-3290.9463500976617 + x * (25230.58868408208 + x * (33640.78491210943 + x * (-120145.66040039083 + x * (-150182.07550048854 + x * (270327.7359008794 + x * (324393.2830810552 + x * (-285072.88513183646 + x * (-332585.03265380923 + x * (113298.19793701192 + 129483.6547851565 * x)))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(18);

      s[0] = -3.3166503906249973 + x * (9.949951171874993 + x * (487.54760742187455 + x * (-812.5793457031241 + x * (-11213.594970703112 + x * (15699.032958984359 + x * (93446.62475585929 + x * (-120145.66040039051 + x * (-360436.9812011716 + x * (440534.08813476533 + x * (696844.8303222652 + x * (-823543.8903808588 + x * (-654611.8103027338 + x * (755321.3195800774 + (237386.7004394529 - 269038.2604980467 * x) * x)))))))))))));
      s[1] = 8.399965356387952 + x * (-25.816773480905624 + x * (-1232.7163567872685 + x * (2104.8207806120613 + x * (28263.02139271 + x * (-40536.83502703877 + x * (-234405.16281451058 + x * (308755.6096645916 + x * (898256.7587138279 + x * (-1.1247445150009808e6 + x * (-1.7220244185901172e6 + x * (2.0849382036304455e6 + x * (1.6006626589814273e6 + x * (-1.8921298405136978e6 + x * (-573019.4653490359 + 665319.4993076591 * x))))))))))))));
      s[2] = -11.829157629608773 + x * (38.546140542589235 + x * (1728.2677637754334 + x * (-3128.712129226207 + x * (-39296.54947150794 + x * (59756.93036576528 + x * (321882.66553443053 + x * (-449518.8264845828 + x * (-1.2130010575383492e6 + x * (1.610338521662602e6 + x * (2.277030742978813e6 + x * (-2.922976933494478e6 + x * (-2.064292095109768e6 + x * (2.5871695019838586e6 + (718477.0641048822 - 884456.3368381787 * x) * x)))))))))))));
      s[3] = 15.405185217521652 + x * (-55.308656308001105 + x * (-2231.3329679054973 + x * (4450.594844384315 + x * (49921.6084201734 + x * (-83641.44628045906 + x * (-399316.9650558162 + x * (614422.5689423694 + x * (1.4593469879976742e6 + x * (-2.1345860678521064e6 + x * (-2.642881393253275e6 + x * (3.737948118663316e6 + x * (2.3056985889640367e6 + x * (-3.1838703109524264e6 + x * (-772058.9388377721 + 1.0471600051985e6 * x))))))))))))));
      s[4] = -19.859676840831884 + x * (82.32794293227192 + x * (2829.294108428613 + x * (-6515.994018213482 + x * (-61386.12381993824 + x * (118755.04780968677 + x * (470208.60474843683 + x * (-835389.2337779202 + x * (-1.6329704929170327e6 + x * (2.757924323544153e6 + x * (2.809049822692384e6 + x * (-4.587371809250142e6 + x * (-2.335659738883342e6 + x * (3.7240140727427863e6 + (748906.2934974227 - 1.172840554675491e6 * x) * x)))))))))))));
      s[5] = 26.252407457568705 + x * (-133.82595652572152 + x * (-3612.319081292999 + x * (10230.216390873384 + x * (73569.31022226275 + x * (-175014.7633543437 + x * (-520210.16989091877 + x * (1.1365100301630613e6 + x * (1.6785607439497046e6 + x * (-3.486078827169522e6 + x * (-2.713748596072914e6 + x * (5.449670494951163e6 + x * (2.143740636470133e6 + x * (-4.203103770759172e6 + x * (-658949.6029868014 + 1.268994758414046e6 * x))))))))))))));
      s[6] = -36.92809958430984 + x * (255.01948445522982 + x * (4640.3647228026475 + x * (-17803.115793700174 + x * (-80981.23053059058 + x * (260980.19891001316 + x * (509559.8717785752 + x * (-1.5081163194288348e6 + x * (-1.5112841316818404e6 + x * (4.251982304671023e6 + x * (2.296488455396953e6 + x * (-6.247554942424062e6 + x * (-1.731306051523605e6 + x * (4.598507553699578e6 + (513314.3071395763 - 1.3391714497117365e6 * x) * x)))))))))))));
      s[7] = 58.586743650697 + x * (-659.8531327603487 + x * (-4854.240163081092 + x * (30373.628526289176 + x * (69268.6214127241 + x * (-364075.32711475366 + x * (-388446.2842555748 + x * (1.8750036144453348e6 + x * (1.0709811337463923e6 + x * (-4.914266047063852e6 + x * (-1.5487835277318924e6 + x * (6.871761160940526e6 + x * (1.1271133584041668e6 + x * (-4.88249910222047e6 + x * (-325557.1440074744 + 1.385197058301848e6 * x))))))))))))));
      s[8] = -36.710717236799844 + x * (1227.1115777813748 + x * (2245.134366638292 + x * (-41692.79561251185 + x * (-28145.06265513041 + x * (439036.05248024984 + x * (147280.81519951904 + x * (-2.1098937132557184e6 + x * (-389452.96106920665 + x * (5.30365316291947e6 + x * (548024.0842577867 + x * (-7.216394079354884e6 + x * (-391345.54700031714 + x * (5.031277049147629e6 + (111500.78599975037 - 1.4080092907901485e6 * x) * x)))))))))))));
      s[9] = -36.710717236799844 + x * (-1227.1115777813748 + x * (2245.134366638292 + x * (41692.79561251185 + x * (-28145.06265513041 + x * (-439036.05248024984 + x * (147280.81519951904 + x * (2.1098937132557184e6 + x * (-389452.96106920665 + x * (-5.30365316291947e6 + x * (548024.0842577867 + x * (7.216394079354884e6 + x * (-391345.54700031714 + x * (-5.031277049147629e6 + x * (111500.78599975037 + 1.4080092907901485e6 * x))))))))))))));
      s[10] = 58.586743650697 + x * (659.8531327603487 + x * (-4854.240163081092 + x * (-30373.628526289176 + x * (69268.6214127241 + x * (364075.32711475366 + x * (-388446.2842555748 + x * (-1.8750036144453348e6 + x * (1.0709811337463923e6 + x * (4.914266047063852e6 + x * (-1.5487835277318924e6 + x * (-6.871761160940526e6 + x * (1.1271133584041668e6 + x * (4.88249910222047e6 + (-325557.1440074744 - 1.385197058301848e6 * x) * x)))))))))))));
      s[11] = -36.92809958430984 + x * (-255.01948445522982 + x * (4640.3647228026475 + x * (17803.115793700174 + x * (-80981.23053059058 + x * (-260980.19891001316 + x * (509559.8717785752 + x * (1.5081163194288348e6 + x * (-1.5112841316818404e6 + x * (-4.251982304671023e6 + x * (2.296488455396953e6 + x * (6.247554942424062e6 + x * (-1.731306051523605e6 + x * (-4.598507553699578e6 + x * (513314.3071395763 + 1.3391714497117365e6 * x))))))))))))));
      s[12] = 26.252407457568708 + x * (133.82595652572152 + x * (-3612.3190812929997 + x * (-10230.216390873386 + x * (73569.31022226276 + x * (175014.7633543437 + x * (-520210.16989091877 + x * (-1.1365100301630616e6 + x * (1.6785607439497043e6 + x * (3.486078827169522e6 + x * (-2.713748596072914e6 + x * (-5.449670494951163e6 + x * (2.1437406364701334e6 + x * (4.203103770759172e6 + (-658949.6029868014 - 1.268994758414046e6 * x) * x)))))))))))));
      s[13] = -19.859676840831884 + x * (-82.32794293227194 + x * (2829.2941084286126 + x * (6515.994018213483 + x * (-61386.12381993824 + x * (-118755.04780968677 + x * (470208.6047484369 + x * (835389.2337779205 + x * (-1.6329704929170327e6 + x * (-2.757924323544153e6 + x * (2.809049822692384e6 + x * (4.587371809250143e6 + x * (-2.335659738883342e6 + x * (-3.7240140727427863e6 + x * (748906.2934974227 + 1.172840554675491e6 * x))))))))))))));
      s[14] = 15.405185217521648 + x * (55.30865630800108 + x * (-2231.332967905497 + x * (-4450.5948443843145 + x * (49921.60842017339 + x * (83641.44628045904 + x * (-399316.9650558162 + x * (-614422.5689423693 + x * (1.459346987997674e6 + x * (2.1345860678521064e6 + x * (-2.642881393253275e6 + x * (-3.7379481186633157e6 + x * (2.3056985889640367e6 + x * (3.183870310952426e6 + (-772058.9388377721 - 1.0471600051984999e6 * x) * x)))))))))))));
      s[15] = -11.829157629608773 + x * (-38.546140542589235 + x * (1728.2677637754334 + x * (3128.712129226207 + x * (-39296.54947150794 + x * (-59756.93036576528 + x * (321882.66553443053 + x * (449518.8264845828 + x * (-1.2130010575383492e6 + x * (-1.610338521662602e6 + x * (2.277030742978813e6 + x * (2.922976933494478e6 + x * (-2.064292095109768e6 + x * (-2.5871695019838586e6 + x * (718477.0641048822 + 884456.3368381787 * x))))))))))))));
      s[16] = 8.399965356387952 + x * (25.816773480905624 + x * (-1232.7163567872685 + x * (-2104.8207806120613 + x * (28263.02139271 + x * (40536.83502703877 + x * (-234405.16281451058 + x * (-308755.6096645916 + x * (898256.7587138279 + x * (1.1247445150009808e6 + x * (-1.7220244185901172e6 + x * (-2.0849382036304455e6 + x * (1.6006626589814273e6 + x * (1.8921298405136978e6 + (-573019.4653490359 - 665319.4993076591 * x) * x)))))))))))));
      s[17] = -3.3166503906249973 + x * (-9.949951171874993 + x * (487.54760742187455 + x * (812.5793457031241 + x * (-11213.594970703112 + x * (-15699.032958984359 + x * (93446.62475585929 + x * (120145.66040039051 + x * (-360436.9812011716 + x * (-440534.08813476533 + x * (696844.8303222652 + x * (823543.8903808588 + x * (-654611.8103027338 + x * (-755321.3195800774 + x * (237386.7004394529 + 269038.2604980467 * x))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(19);

      s[0] = 0.37094116210937533 + x * (62.318115234375064 + x * (-124.63623046875013 + x * (-3344.405517578129 + x * (5016.608276367193 + x * (50166.08276367193 + x * (-66888.11035156259 + x * (-322496.246337891 + x * (403120.3079223638 + x * (1.0391545715332042e6 + x * (-1.246985485839845e6 + x * (-1.7571159118652362e6 + x * (2.0499685638427758e6 + x * (1.4867903869628925e6 + x * (-1.6991890136718769e6 + x * (-495596.79565429746 + 557546.3951110847 * x)))))))))))))));
      s[1] = -0.9582602708645284 + x * (-157.42016559916524 + x * (321.7213833569242 + x * (8432.114120536908 + x * (-12924.605668326973 + x * (-126088.65694490602 + x * (171792.5484473718 + x * (807000.5484502732 + x * (-1.0307976261690708e6 + x * (-2.58524135277969e6 + x * (3.1700922985138255e6 + x * (4.339396011076894e6 + x * (-5.173275914241182e6 + x * (-3.6388469955616193e6 + x * (4.249573144513067e6 + (1.1998811861708313e6 - 1.379368592361534e6 * x) * x))))))))))))));
      s[2] = 1.4152928982866035 + x * (220.237323011472 + x * (-474.18874086574783 + x * (-11738.452697970526 + x * (18955.377414411418 + x * (174118.3368937424 + x * (-249927.2263947168 + x * (-1.1018345902305192e6 + x * (1.4827117795008165e6 + x * (3.478207609770462e6 + x * (-4.493317111906974e6 + x * (-5.733767627645478e6 + x * (7.201404414621174e6 + x * (4.707211632992231e6 + x * (-5.791432433537469e6 + x * (-1.5155798444305344e6 + 1.835530756823423e6 * x)))))))))))))));
      s[3] = -1.9928320962169361 + x * (-283.48342364779273 + x * (665.0945064943928 + x * (14967.469575690655 + x * (-26336.941494192703 + x * (-218658.4944015375 + x * (342003.6853265463 + x * (1.3549751107279472e6 + x * (-1.9868589029508987e6 + x * (-4.1668190595495636e6 + x * (5.865588393991712e6 + x * (6.6644911018227525e6 + x * (-9.12093746187051e6 + x * (-5.296134802710367e6 + x * (7.100299587408861e6 + (1.6493661719433567e6 - 2.1766835813478674e6 * x) * x))))))))))))));
      s[4] = 2.8785339451992993 + x * (358.4162266322112 + x * (-953.8762252982735 + x * (-18599.307972995724 + x * (37124.65360974006 + x * (264347.00894062576 + x * (-469015.8319123224 + x * (-1.579775612619159e6 + x * (2.627724218053028e6 + x * (4.659562496529322e6 + x * (-7.4404765556973405e6 + x * (-7.139993184104658e6 + x * (1.1084572601927571e7 + x * (5.445069626253913e6 + x * (-8.280751460997575e6 + x * (-1.6321937870978888e6 + 2.4434227226876966e6 * x)))))))))))))));
      s[5] = -4.46020548563671 + x * (-458.38923115406766 + x * (1457.730323373945 + x * (22998.125331860872 + x * (-54852.506993789 + x * (-310360.0410702445 + x * (657987.0152310461 + x * (1.7438817856660911e6 + x * (-3.4660900422780453e6 + x * (-4.847902834592122e6 + x * (9.25013218434034e6 + x * (7.049061703153772e6 + x * (-1.3076481020117437e7 + x * (-5.138720159386343e6 + x * (9.338125381612003e6 + (1.482313182694983e6 - 2.6515833262761584e6 * x) * x))))))))))))));
      s[6] = 7.839579738996325 + x * (606.3331186683821 + x * (-2483.8047878385764 + x * (-28173.30286455292 + x * (86557.59811275647 + x * (341897.0082774216 + x * (-933706.1316746749 + x * (-1.7561664644148508e6 + x * (4.496264654542168e6 + x * (4.550438753216829e6 + x * (-1.1184348551002748e7 + x * (-6.263823752623787e6 + x * (1.4967955819922179e7 + x * (4.373641306262352e6 + x * (-1.0237909428533953e7 + x * (-1.2189551382359911e6 + 2.8087715561829135e6 * x)))))))))))))));
      s[7] = -17.46036214994737 + x * (-838.690293230091 + x * (5029.553835280008 + x * (30627.31706848355 + x * (-137752.04739123012 + x * (-319509.6092016685 + x * (1.2773811686631718e6 + x * (1.4881398498587217e6 + x * (-5.577654491254316e6 + x * (-3.606546522749277e6 + x * (1.2976890307683308e7 + x * (4.7328997661259575e6 + x * (-1.6556630075492423e7 + x * (-3.1897778076970945e6 + x * (1.0930756705438314e7 + (865332.7933197073 - 2.918996226996253e6 * x) * x))))))))))))));
      s[8] = 69.36731225807392 + x * (776.834042944809 + x * (-9183.194064033916 + x * (-21919.274705788317 + x * (194335.8641342635 + x * (201265.44249298488 + x * (-1.5861471173348587e6 + x * (-870344.966081748 + x * (6.430384648088495e6 + x * (2.0115389740256378e6 + x * (-1.4267412403159192e7 + x * (-2.5557082028563824e6 + x * (1.7623557253226027e7 + x * (1.6830551704713637e6 + x * (-1.136909293472005e7 + x * (-448819.56166883797 + 2.9844191423305394e6 * x)))))))))))))));
      s[9] = -114. + x * x * (11491.2 + x * x * (-220248. + x * x * (1.7130400000000002e6 + x * x * (-6.75760909090909e6 + x * x * (1.4739673846153848e7 + x * x * (-1.8000268363636367e7 + x * x * (1.1519240904977378e7 - 3.006117692307692e6 * x * x)))))));
      s[10] = 69.36731225807392 + x * (-776.834042944809 + x * (-9183.194064033916 + x * (21919.274705788317 + x * (194335.8641342635 + x * (-201265.44249298488 + x * (-1.5861471173348587e6 + x * (870344.966081748 + x * (6.430384648088495e6 + x * (-2.0115389740256378e6 + x * (-1.4267412403159192e7 + x * (2.5557082028563824e6 + x * (1.7623557253226027e7 + x * (-1.6830551704713637e6 + x * (-1.136909293472005e7 + x * (448819.56166883797 + 2.9844191423305394e6 * x)))))))))))))));
      s[11] = -17.46036214994737 + x * (838.690293230091 + x * (5029.553835280008 + x * (-30627.31706848355 + x * (-137752.04739123012 + x * (319509.6092016685 + x * (1.2773811686631718e6 + x * (-1.4881398498587217e6 + x * (-5.577654491254316e6 + x * (3.606546522749277e6 + x * (1.2976890307683308e7 + x * (-4.7328997661259575e6 + x * (-1.6556630075492423e7 + x * (3.1897778076970945e6 + x * (1.0930756705438314e7 + (-865332.7933197073 - 2.918996226996253e6 * x) * x))))))))))))));
      s[12] = 7.839579738996325 + x * (-606.3331186683821 + x * (-2483.8047878385764 + x * (28173.30286455292 + x * (86557.59811275647 + x * (-341897.0082774216 + x * (-933706.1316746749 + x * (1.7561664644148508e6 + x * (4.496264654542168e6 + x * (-4.550438753216829e6 + x * (-1.1184348551002748e7 + x * (6.263823752623787e6 + x * (1.4967955819922179e7 + x * (-4.373641306262352e6 + x * (-1.0237909428533953e7 + x * (1.2189551382359911e6 + 2.8087715561829135e6 * x)))))))))))))));
      s[13] = -4.46020548563671 + x * (458.38923115406755 + x * (1457.7303233739449 + x * (-22998.125331860872 + x * (-54852.50699378899 + x * (310360.0410702445 + x * (657987.0152310461 + x * (-1.7438817856660914e6 + x * (-3.466090042278046e6 + x * (4.847902834592122e6 + x * (9.250132184340341e6 + x * (-7.049061703153772e6 + x * (-1.307648102011744e7 + x * (5.138720159386343e6 + x * (9.338125381612003e6 + (-1.482313182694983e6 - 2.6515833262761584e6 * x) * x))))))))))))));
      s[14] = 2.8785339451992997 + x * (-358.4162266322112 + x * (-953.8762252982734 + x * (18599.307972995728 + x * (37124.65360974006 + x * (-264347.00894062576 + x * (-469015.8319123224 + x * (1.579775612619159e6 + x * (2.627724218053028e6 + x * (-4.659562496529322e6 + x * (-7.4404765556973405e6 + x * (7.139993184104658e6 + x * (1.1084572601927571e7 + x * (-5.445069626253912e6 + x * (-8.280751460997576e6 + x * (1.6321937870978892e6 + 2.4434227226876966e6 * x)))))))))))))));
      s[15] = -1.992832096216937 + x * (283.48342364779273 + x * (665.0945064943929 + x * (-14967.469575690653 + x * (-26336.941494192703 + x * (218658.49440153752 + x * (342003.6853265463 + x * (-1.3549751107279472e6 + x * (-1.9868589029508987e6 + x * (4.1668190595495636e6 + x * (5.865588393991712e6 + x * (-6.6644911018227525e6 + x * (-9.12093746187051e6 + x * (5.296134802710366e6 + x * (7.100299587408862e6 + (-1.649366171943357e6 - 2.176683581347868e6 * x) * x))))))))))))));
      s[16] = 1.4152928982866035 + x * (-220.237323011472 + x * (-474.18874086574783 + x * (11738.452697970526 + x * (18955.377414411418 + x * (-174118.3368937424 + x * (-249927.2263947168 + x * (1.1018345902305192e6 + x * (1.482711779500816e6 + x * (-3.4782076097704615e6 + x * (-4.493317111906974e6 + x * (5.733767627645478e6 + x * (7.201404414621174e6 + x * (-4.707211632992232e6 + x * (-5.791432433537468e6 + x * (1.5155798444305344e6 + 1.835530756823423e6 * x)))))))))))))));
      s[17] = -0.9582602708645284 + x * (157.42016559916524 + x * (321.7213833569242 + x * (-8432.114120536908 + x * (-12924.605668326973 + x * (126088.65694490602 + x * (171792.5484473718 + x * (-807000.5484502732 + x * (-1.0307976261690708e6 + x * (2.58524135277969e6 + x * (3.1700922985138255e6 + x * (-4.339396011076894e6 + x * (-5.173275914241182e6 + x * (3.6388469955616193e6 + x * (4.249573144513067e6 + (-1.1998811861708313e6 - 1.379368592361534e6 * x) * x))))))))))))));
      s[18] = 0.37094116210937533 + x * (-62.318115234375064 + x * (-124.63623046875013 + x * (3344.405517578129 + x * (5016.608276367193 + x * (-50166.08276367193 + x * (-66888.11035156259 + x * (322496.246337891 + x * (403120.3079223638 + x * (-1.0391545715332042e6 + x * (-1.246985485839845e6 + x * (1.7571159118652362e6 + x * (2.0499685638427758e6 + x * (-1.4867903869628925e6 + x * (-1.6991890136718769e6 + x * (495596.79565429746 + 557546.3951110847 * x)))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(20);

      s[0] = 3.5053939819335933 + x * (-10.516181945800778 + x * (-644.9924926757811 + x * (1074.9874877929688 + x * (18812.281036376953 + x * (-26337.193450927734 + x * (-203172.63519287106 + x * (261221.95953369135 + x * (1.0521440036773684e6 + x * (-1.2859537822723389e6 + x * (-2.8992412545776363e6 + x * (3.4263760281372066e6 + x * (4.348861881866454e6 + x * (-5.017917555999756e6 + x * (-3.3452783706665034e6 + x * (3.7913154867553706e6 + (1.0314608309555055e6 - 1.152809164009094e6 * x) * x)))))))))))))));
      s[1] = -8.843926368071932 + x * (27.052714151334477 + x * (1625.5308840446287 + x * (-2762.4119599803444 + x * (-47316.449615357444 + x * (67543.67030952882 + x * (509490.15956542786 + x * (-667920.4498742904 + x * (-2.6277528648647955e6 + x * (3.2747576455698665e6 + x * (7.203393341566903e6 + x * (-8.680250690747637e6 + x * (-1.073590475012455e7 + x * (1.263080491077923e7 + x * (8.194646588636236e6 + x * (-9.469615851158919e6 + x * (-2.5035900084469747e6 + 2.853069558823634e6 * x))))))))))))))));
      s[2] = 12.335922489614585 + x * (-39.540980181617535 + x * (-2261.087252499598 + x * (4026.4342846072263 + x * (65478.12417585166 + x * (-97944.21934706422 + x * (-699665.8283694022 + x * (961146.6955239521 + x * (3.5716831585739916e6 + x * (-4.664205168934325e6 + x * (-9.664866162312934e6 + x * (1.2203967873767806e7 + x * (1.4181138886117067e7 + x * (-1.7482903538295005e7 + x * (-1.0629623073817074e7 + x * (1.287152697716435e7 + (3.182027407642893e6 - 3.7998210107220085e6 * x) * x)))))))))))))));
      s[3] = -15.79967500621317 + x * (54.677851112421756 + x * (2881.051347625366 + x * (-5539.132804621819 + x * (-82636.18386125617 + x * (133456.68055920344 + x * (870641.4999681836 + x * (-1.29129617147646e6 + x * (-4.362912101296002e6 + x * (6.15132493682163e6 + x * (1.1542882669150196e7 + x * (-1.5736457671993356e7 + x * (-1.6506246197699733e7 + x * (2.19704147192874e7 + x * (1.2032809538943252e7 + x * (-1.573137683596877e7 + x * (-3.499778767014969e6 + 4.512189194269099e6 * x))))))))))))))));
      s[4] = 19.83173181277838 + x * (-76.73153317532292 + x * (-3583.3778220202043 + x * (7702.528812180724 + x * (101058.84642851322 + x * (-182471.21029457118 + x * (-1.0390854743920019e6 + x * (1.723009704915701e6 + x * (5.049564308829542e6 + x * (-7.959688346300885e6 + x * (-1.2902450100430584e7 + x * (1.966594570168194e7 + x * (1.7794837461637985e7 + x * (-2.648097142668321e7 + x * (-1.2519444412604572e7 + x * (1.829930935036798e7 + (3.520623223955327e6 - 5.074768196789511e6 * x) * x)))))))))))))));
      s[5] = -25.1208760033639 + x * (113.53616632055392 + x * (4463.154829117502 + x * (-11206.471571143831 + x * (-122036.53840121675 + x * (257392.6297653761 + x * (1.202183614060764e6 + x * (-2.328592341210613e6 + x * (-5.561738229713713e6 + x * (1.0240918530824674e7 + x * (1.3537075159368752e7 + x * (-2.410203420425928e7 + x * (-1.7854801587835778e7 + x * (3.1037099343583014e7 + x * (1.2072690765627604e7 + x * (-2.061293956895912e7 + x * (-3.2788502742544045e6 + 5.520831039938657e6 * x))))))))))))))));
      s[6] = 32.903773102234815 + x * (-184.5095999277125 + x * (-5645.546374481764 + x * (17587.606471156225 + x * (144971.1694673126 + x * (-379368.8680717448 + x * (-1.321153327732533e6 + x * (3.1750436712057614e6 + x * (5.695668669709947e6 + x * (-1.3012085368898438e7 + x * (-1.3070149790657219e7 + x * (2.887242372781475e7 + x * (1.6428535404149603e7 + x * (-3.543225277164367e7 + x * (-1.0679744459571099e7 + x * (2.2624059499217007e7 + (2.808188307213181e6 - 5.866551898517242e6 * x) * x)))))))))))))));
      s[7] = -46.055434906288816 + x * (352.1477853474299 + x * (7217.558371371481 + x * (-30659.274479233318 + x * (-159173.7662595858 + x * (567966.0112708807 + x * (1.294394622640167e6 + x * (-4.241641782862933e6 + x * (-5.1426417274174895e6 + x * (1.601988020252709e7 + x * (1.1117826673120432e7 + x * (-3.348832187424678e7 + x * (-1.3363794828217063e7 + x * (3.9300721654321924e7 + x * (8.394419921085639e6 + x * (-2.42477347080756e7 + x * (-2.148658565326608e6 + 6.120612819352875e6 * x))))))))))))))));
      s[8] = 72.87789804913518 + x * (-912.6785104911513 + x * (-7544.897601111103 + x * (52493.17380869686 + x * (136357.10060844218 + x * (-796904.9525917028 + x * (-990088.2346597118 + x * (5.313970036301379e6 + x * (3.6623833831296116e6 + x * (-1.868592978668866e7 + x * (-7.544623814453493e6 + x * (3.722108162221192e7 + x * (8.76331830111077e6 + x * (-4.221018204694827e7 + x * (-5.367329231008756e6 + x * (2.5393153035746716e7 + (1.3477120012036674e6 - 6.287854843207426e6 * x) * x)))))))))))))));
      s[9] = -45.63480715175878 + x * (1699.7061074520673 + x * (3492.6061106294737 + x * (-72269.44503883463 + x * (-55514.58357908052 + x * (964920.3879801992 + x * (376455.60411197785 + x * (-6.009171470794986e6 + x * (-1.3363986006284603e6 + x * (2.0278813847454045e7 + x * (2.680153279225577e6 + x * (-3.9324812449034974e7 + x * (-3.055944571004751e6 + x * (4.3777377363750495e7 + x * (1.8468527333752734e6 + x * (-2.5986410193301916e7 + x * (-459134.15592761646 + 6.37089785741042e6 * x))))))))))))))));
      s[10] = -45.63480715175878 + x * (-1699.7061074520673 + x * (3492.6061106294737 + x * (72269.44503883463 + x * (-55514.58357908052 + x * (-964920.3879801992 + x * (376455.60411197785 + x * (6.009171470794986e6 + x * (-1.3363986006284603e6 + x * (-2.0278813847454045e7 + x * (2.680153279225577e6 + x * (3.9324812449034974e7 + x * (-3.055944571004751e6 + x * (-4.3777377363750495e7 + x * (1.8468527333752734e6 + x * (2.5986410193301916e7 + (-459134.15592761646 - 6.37089785741042e6 * x) * x)))))))))))))));
      s[11] = 72.87789804913518 + x * (912.6785104911513 + x * (-7544.897601111103 + x * (-52493.17380869686 + x * (136357.10060844218 + x * (796904.9525917028 + x * (-990088.2346597118 + x * (-5.313970036301379e6 + x * (3.6623833831296116e6 + x * (1.868592978668866e7 + x * (-7.544623814453493e6 + x * (-3.722108162221192e7 + x * (8.76331830111077e6 + x * (4.221018204694827e7 + x * (-5.367329231008756e6 + x * (-2.5393153035746716e7 + x * (1.3477120012036674e6 + 6.287854843207426e6 * x))))))))))))))));
      s[12] = -46.055434906288816 + x * (-352.1477853474299 + x * (7217.558371371481 + x * (30659.274479233318 + x * (-159173.7662595858 + x * (-567966.0112708807 + x * (1.294394622640167e6 + x * (4.241641782862933e6 + x * (-5.1426417274174895e6 + x * (-1.601988020252709e7 + x * (1.1117826673120432e7 + x * (3.348832187424678e7 + x * (-1.3363794828217063e7 + x * (-3.9300721654321924e7 + x * (8.394419921085639e6 + x * (2.42477347080756e7 + (-2.148658565326608e6 - 6.120612819352875e6 * x) * x)))))))))))))));
      s[13] = 32.903773102234815 + x * (184.5095999277125 + x * (-5645.546374481764 + x * (-17587.606471156225 + x * (144971.1694673126 + x * (379368.8680717448 + x * (-1.321153327732533e6 + x * (-3.1750436712057614e6 + x * (5.695668669709947e6 + x * (1.3012085368898438e7 + x * (-1.3070149790657219e7 + x * (-2.887242372781475e7 + x * (1.6428535404149603e7 + x * (3.543225277164367e7 + x * (-1.0679744459571099e7 + x * (-2.2624059499217007e7 + x * (2.808188307213181e6 + 5.866551898517242e6 * x))))))))))))))));
      s[14] = -25.120876003363893 + x * (-113.53616632055389 + x * (4463.154829117502 + x * (11206.471571143833 + x * (-122036.53840121675 + x * (-257392.6297653761 + x * (1.202183614060764e6 + x * (2.3285923412106135e6 + x * (-5.561738229713713e6 + x * (-1.0240918530824676e7 + x * (1.353707515936875e7 + x * (2.4102034204259284e7 + x * (-1.785480158783578e7 + x * (-3.103709934358302e7 + x * (1.2072690765627604e7 + x * (2.0612939568959124e7 + (-3.278850274254404e6 - 5.520831039938656e6 * x) * x)))))))))))))));
      s[15] = 19.831731812778383 + x * (76.73153317532292 + x * (-3583.3778220202043 + x * (-7702.528812180724 + x * (101058.84642851322 + x * (182471.21029457118 + x * (-1.0390854743920016e6 + x * (-1.7230097049157007e6 + x * (5.049564308829542e6 + x * (7.959688346300883e6 + x * (-1.2902450100430582e7 + x * (-1.966594570168194e7 + x * (1.7794837461637985e7 + x * (2.648097142668321e7 + x * (-1.2519444412604574e7 + x * (-1.829930935036798e7 + x * (3.520623223955327e6 + 5.07476819678951e6 * x))))))))))))))));
      s[16] = -15.799675006213167 + x * (-54.677851112421756 + x * (2881.051347625366 + x * (5539.132804621819 + x * (-82636.18386125617 + x * (-133456.6805592034 + x * (870641.4999681833 + x * (1.29129617147646e6 + x * (-4.362912101296002e6 + x * (-6.151324936821629e6 + x * (1.1542882669150196e7 + x * (1.5736457671993354e7 + x * (-1.6506246197699733e7 + x * (-2.19704147192874e7 + x * (1.2032809538943253e7 + x * (1.573137683596877e7 + (-3.4997787670149687e6 - 4.512189194269099e6 * x) * x)))))))))))))));
      s[17] = 12.335922489614585 + x * (39.540980181617535 + x * (-2261.087252499598 + x * (-4026.4342846072263 + x * (65478.12417585166 + x * (97944.21934706422 + x * (-699665.8283694022 + x * (-961146.6955239521 + x * (3.5716831585739916e6 + x * (4.664205168934325e6 + x * (-9.664866162312934e6 + x * (-1.2203967873767806e7 + x * (1.4181138886117067e7 + x * (1.7482903538295005e7 + x * (-1.0629623073817074e7 + x * (-1.287152697716435e7 + x * (3.182027407642893e6 + 3.7998210107220085e6 * x))))))))))))))));
      s[18] = -8.843926368071932 + x * (-27.052714151334477 + x * (1625.5308840446287 + x * (2762.4119599803444 + x * (-47316.449615357444 + x * (-67543.67030952882 + x * (509490.15956542786 + x * (667920.4498742904 + x * (-2.6277528648647955e6 + x * (-3.2747576455698665e6 + x * (7.203393341566903e6 + x * (8.680250690747637e6 + x * (-1.073590475012455e7 + x * (-1.263080491077923e7 + x * (8.194646588636236e6 + x * (9.469615851158919e6 + (-2.5035900084469747e6 - 2.853069558823634e6 * x) * x)))))))))))))));
      s[19] = 3.5053939819335933 + x * (10.516181945800778 + x * (-644.9924926757811 + x * (-1074.9874877929688 + x * (18812.281036376953 + x * (26337.193450927734 + x * (-203172.63519287106 + x * (-261221.95953369135 + x * (1.0521440036773684e6 + x * (1.2859537822723389e6 + x * (-2.8992412545776363e6 + x * (-3.4263760281372066e6 + x * (4.348861881866454e6 + x * (5.017917555999756e6 + x * (-3.3452783706665034e6 + x * (-3.7913154867553706e6 + x * (1.0314608309555055e6 + 1.152809164009094e6 * x))))))))))))))));
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::scalar_t x = p[0];
      s.resize(21);

      s[0] = -0.35239410400390614 + x * (-72.94557952880855 + x * (145.8911590576171 + x * (4863.0386352539035 + x * (-7294.557952880855 + x * (-91911.4302062988 + x * (122548.57360839838 + x * (761551.8502807613 + x * (-951939.8128509517 + x * (-3.278903799819945e6 + x * (3.9346845597839337e6 + x * (7.869369119567867e6 + x * (-9.180930639495846e6 + x * (-1.059338150711059e7 + x * (1.2106721722412102e7 + x * (7.465811728820799e6 + x * (-8.399038194923395e6 + x * (-2.1409313045883165e6 + 2.378812560653685e6 * x)))))))))))))))));
      s[1] = 0.9036243173999805 + x * (183.69505116603983 + x * (-373.90643273951554 + x * (-12231.095869455101 + x * (18672.054837677304 + x * (230701.996115086 + x * (-313058.5530955398 + x * (-1.906115768614036e6 + x * (2.4249052400532705e6 + x * (8.1764930355787035e6 + x * (-9.985821579339072e6 + x * (-1.9532696071778312e7 + x * (2.3192334544565488e7 + x * (2.6146178281013995e7 + x * (-3.0411346534126196e7 + x * (-1.8303695084260985e7 + x * (2.095688738727085e7 + (5.20781507056812e6 - 5.889094583183619e6 * x) * x))))))))))))))));
      s[2] = -1.3104006557008128 + x * (-255.0435795022751 + x * (541.5074250284965 + x * (16927.86332986136 + x * (-26955.87466133145 + x * (-317656.5527592489 + x * (449631.34604624216 + x * (2.6057673353318684e6 + x * (-3.457846210862808e6 + x * (-1.107420786805604e7 + x * (1.4107626152120836e7 + x * (2.615349458503098e7 + x * (-3.23919088491743e7 + x * (-3.453549506510919e7 + x * (4.190035072501864e7 + x * (2.3800846277977027e7 + x * (-2.8425292811660204e7 + x * (-6.654234855803436e6 + 7.849023704831075e6 * x)))))))))))))))));
      s[3] = 1.7879032876916823 + x * (324.03972313447156 + x * (-737.0445943697715 + x * (-21382.604428348724 + x * (36476.85426113969 + x * (397514.9330119134 + x * (-602778.4283638742 + x * (-3.21894640213401e6 + x * (4.576034348330387e6 + x * (1.3457587570319436e7 + x * (-1.836597453426214e7 + x * (-3.116670878168906e7 + x * (4.135264088084158e7 + x * (4.025338230404804e7 + x * (-5.23190491150043e7 + x * (-2.708335413262306e7 + x * (3.465137624753384e7 + (7.3845080827232525e6 - 9.331352121830953e6 * x) * x))))))))))))))));
      s[4] = -2.4576361367256445 + x * (-401.5570253314496 + x * (1008.9348082613716 + x * (26234.03714034684 + x * (-49435.88001654971 + x * (-479983.5246442801 + x * (803990.5581793278 + x * (3.8037599328674325e6 + x * (-5.973226647218058e6 + x * (-1.5489892777796332e7 + x * (2.3351540648836188e7 + x * (3.483070733420988e7 + x * (-5.104990816225443e7 + x * (-4.36168501213887e7 + x * (6.2622748861655325e7 + x * (2.8455192684040815e7 + x * (-4.0216098379667275e7 + x * (-7.530677318195545e6 + 1.0511807783769857e7 * x)))))))))))))))));
      s[5] = 3.524278227544726 + x * (498.43256112091194 + x * (-1436.2994719533096 + x * (-31993.886340284782 + x * (69145.96723919359 + x * (569381.8940319044 + x * (-1.0938329174678638e6 + x * (-4.353431167951109e6 + x * (7.84061798858434e6 + x * (1.7028064562471252e7 + x * (-2.9441174650945015e7 + x * (-3.676776423833793e7 + x * (6.180485776110918e7 + x * (4.431165814335084e7 + x * (-7.296566551928449e7 + x * (-2.791355039936634e7 + x * (4.524558428715845e7 + (7.158441622823585e6 - 1.1459998943429934e7 * x) * x))))))))))))))));
      s[6] = -5.455017385954593 + x * (-631.2265645036346 + x * (2192.398505343872 + x * (39170.004996328425 + x * (-102034.98858899174 + x * (-662237.9577371432 + x * (1.533405584587614e6 + x * (4.769029182309352e6 + x * (-1.035247587712237e7 + x * (-1.7625104062879153e7 + x * (3.672968215560322e7 + x * (3.621321384971587e7 + x * (-7.336992804658619e7 + x * (-4.18368294339347e7 + x * (8.303380613213521e7 + x * (2.5430357319624912e7 + x * (-4.968316098948285e7 + x * (-6.327869808556012e6 + 1.2210101104416197e7 * x)))))))))))))))));
      s[7] = 9.599124114218183 + x * (830.4136925482368 + x * (-3739.6270243633962 + x * (-47738.66608869602 + x * (161237.23098590825 + x * (727179.7683799266 + x * (-2.183153720293395e6 + x * (-4.798850606847936e6 + x * (1.3506755410202356e7 + x * (1.6571136563642658e7 + x * (-4.477517941279474e7 + x * (-3.2305913068911716e7 + x * (8.486577899901521e7 + x * (3.582129446889651e7 + x * (-9.21800660807612e7 + x * (-2.1075840437350392e7 + x * (5.338770065085462e7 + (5.108510954880509e6 - 1.2780728577787818e7 * x) * x))))))))))))))));
      s[8] = -21.41322102011345 + x * (-1145.2596031676035 + x * (7584.755437865931 + x * (51840.79992496113 + x * (-257496.06555140959 + x * (-680283.1276454935 + x * (3.0035583998751473e6 + x * (4.0785473208182454e6 + x * (-1.688197150050581e7 + x * (-1.3194380082117453e7 + x * (5.242976132240191e7 + x * (2.4556478798577372e7 + x * (-9.486817072670594e7 + x * (-2.6312396426010568e7 + x * (9.957721940995775e7 + x * (1.5083846825955512e7 + x * (-5.619171410383923e7 + x * (-3.582887450462684e6 + 1.3182515803983985e7 * x)))))))))))))))));
      s[9] = 85.17373935564382 + x * (1060.3780648976783 + x * (-13880.609812131297 + x * (-37145.75031340073 + x * (364685.25944724446 + x * (429584.4576418362 + x * (-3.7489108430760577e6 + x * (-2.3936469813630423e6 + x * (1.95833925159351e7 + x * (7.39053098642052e6 + x * (-5.804632158448205e7 + x * (-1.3325246501217557e7 + x * (1.0175127423868524e8 + x * (1.3958809153040532e7 + x * (-1.0441385534860918e8 + x * (-7.869316348132546e6 + x * (5.794384922659325e7 + (1.8455523445380381e6 - 1.3421519084363647e7 * x) * x))))))))))))))));
      s[10] = -140. + x * x * (17388. + x * x * (-413999.99999999994 + x * x * (4.0572e6 + x * x * (-2.062849090909091e7 + x * x * (6.012235384615384e7 + x * x * (-1.0421208000000003e8 + x * x * (1.0609827149321268e8 + x * x * (-5.854018663967612e7 + 1.3500864705882356e7 * x * x))))))));
      s[11] = 85.17373935564382 + x * (-1060.3780648976783 + x * (-13880.609812131297 + x * (37145.75031340073 + x * (364685.25944724446 + x * (-429584.4576418362 + x * (-3.7489108430760577e6 + x * (2.3936469813630423e6 + x * (1.95833925159351e7 + x * (-7.39053098642052e6 + x * (-5.804632158448205e7 + x * (1.3325246501217557e7 + x * (1.0175127423868524e8 + x * (-1.3958809153040532e7 + x * (-1.0441385534860918e8 + x * (7.869316348132546e6 + x * (5.794384922659325e7 + (-1.8455523445380381e6 - 1.3421519084363647e7 * x) * x))))))))))))))));
      s[12] = -21.413221020113447 + x * (1145.2596031676035 + x * (7584.755437865931 + x * (-51840.79992496113 + x * (-257496.06555140959 + x * (680283.1276454934 + x * (3.003558399875148e6 + x * (-4.078547320818245e6 + x * (-1.688197150050581e7 + x * (1.3194380082117453e7 + x * (5.242976132240192e7 + x * (-2.4556478798577372e7 + x * (-9.486817072670594e7 + x * (2.6312396426010568e7 + x * (9.957721940995774e7 + x * (-1.508384682595551e7 + x * (-5.619171410383924e7 + x * (3.5828874504626845e6 + 1.3182515803983985e7 * x)))))))))))))))));
      s[13] = 9.59912411421818 + x * (-830.4136925482368 + x * (-3739.6270243633962 + x * (47738.66608869602 + x * (161237.23098590825 + x * (-727179.7683799267 + x * (-2.183153720293395e6 + x * (4.798850606847936e6 + x * (1.3506755410202356e7 + x * (-1.6571136563642658e7 + x * (-4.477517941279475e7 + x * (3.2305913068911716e7 + x * (8.486577899901521e7 + x * (-3.582129446889651e7 + x * (-9.21800660807612e7 + x * (2.1075840437350392e7 + x * (5.338770065085462e7 + (-5.108510954880509e6 - 1.2780728577787818e7 * x) * x))))))))))))))));
      s[14] = -5.455017385954593 + x * (631.2265645036346 + x * (2192.398505343872 + x * (-39170.004996328425 + x * (-102034.98858899174 + x * (662237.9577371432 + x * (1.533405584587614e6 + x * (-4.769029182309352e6 + x * (-1.035247587712237e7 + x * (1.7625104062879153e7 + x * (3.672968215560322e7 + x * (-3.621321384971587e7 + x * (-7.336992804658619e7 + x * (4.18368294339347e7 + x * (8.303380613213521e7 + x * (-2.5430357319624912e7 + x * (-4.968316098948285e7 + x * (6.327869808556012e6 + 1.2210101104416197e7 * x)))))))))))))))));
      s[15] = 3.524278227544726 + x * (-498.432561120912 + x * (-1436.2994719533096 + x * (31993.886340284786 + x * (69145.96723919359 + x * (-569381.8940319045 + x * (-1.0938329174678638e6 + x * (4.353431167951108e6 + x * (7.84061798858434e6 + x * (-1.7028064562471252e7 + x * (-2.9441174650945015e7 + x * (3.676776423833793e7 + x * (6.180485776110917e7 + x * (-4.4311658143350825e7 + x * (-7.296566551928449e7 + x * (2.791355039936634e7 + x * (4.524558428715845e7 + (-7.158441622823584e6 - 1.1459998943429934e7 * x) * x))))))))))))))));
      s[16] = -2.4576361367256445 + x * (401.55702533144955 + x * (1008.9348082613715 + x * (-26234.037140346845 + x * (-49435.880016549716 + x * (479983.5246442801 + x * (803990.558179328 + x * (-3.8037599328674325e6 + x * (-5.973226647218058e6 + x * (1.5489892777796332e7 + x * (2.3351540648836188e7 + x * (-3.483070733420988e7 + x * (-5.104990816225444e7 + x * (4.36168501213887e7 + x * (6.2622748861655325e7 + x * (-2.845519268404082e7 + x * (-4.0216098379667275e7 + x * (7.530677318195545e6 + 1.0511807783769857e7 * x)))))))))))))))));
      s[17] = 1.7879032876916827 + x * (-324.0397231344715 + x * (-737.0445943697715 + x * (21382.604428348724 + x * (36476.854261139684 + x * (-397514.9330119133 + x * (-602778.4283638742 + x * (3.2189464021340096e6 + x * (4.576034348330386e6 + x * (-1.3457587570319435e7 + x * (-1.836597453426214e7 + x * (3.1166708781689055e7 + x * (4.135264088084158e7 + x * (-4.025338230404803e7 + x * (-5.231904911500429e7 + x * (2.708335413262306e7 + x * (3.465137624753384e7 + (-7.384508082723251e6 - 9.331352121830951e6 * x) * x))))))))))))))));
      s[18] = -1.3104006557008132 + x * (255.0435795022751 + x * (541.5074250284965 + x * (-16927.863329861357 + x * (-26955.874661331447 + x * (317656.55275924876 + x * (449631.34604624205 + x * (-2.605767335331868e6 + x * (-3.457846210862807e6 + x * (1.107420786805604e7 + x * (1.4107626152120834e7 + x * (-2.615349458503098e7 + x * (-3.239190884917429e7 + x * (3.453549506510919e7 + x * (4.1900350725018635e7 + x * (-2.3800846277977027e7 + x * (-2.8425292811660204e7 + x * (6.654234855803436e6 + 7.849023704831077e6 * x)))))))))))))))));
      s[19] = 0.9036243173999805 + x * (-183.69505116603983 + x * (-373.90643273951554 + x * (12231.095869455101 + x * (18672.054837677304 + x * (-230701.996115086 + x * (-313058.5530955398 + x * (1.906115768614036e6 + x * (2.4249052400532705e6 + x * (-8.1764930355787035e6 + x * (-9.985821579339072e6 + x * (1.9532696071778312e7 + x * (2.3192334544565488e7 + x * (-2.6146178281013995e7 + x * (-3.0411346534126196e7 + x * (1.8303695084260985e7 + x * (2.095688738727085e7 + (-5.20781507056812e6 - 5.889094583183619e6 * x) * x))))))))))))))));
      s[20] = -0.35239410400390614 + x * (72.94557952880855 + x * (145.8911590576171 + x * (-4863.0386352539035 + x * (-7294.557952880855 + x * (91911.4302062988 + x * (122548.57360839838 + x * (-761551.8502807613 + x * (-951939.8128509517 + x * (3.278903799819945e6 + x * (3.9346845597839337e6 + x * (-7.869369119567867e6 + x * (-9.180930639495846e6 + x * (1.059338150711059e7 + x * (1.2106721722412102e7 + x * (-7.465811728820799e6 + x * (-8.399038194923395e6 + x * (2.1409313045883165e6 + 2.378812560653685e6 * x)))))))))))))))));
    }

    // 2d Lagrange shape functions

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    // 1st derivative

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    // 2nd derivative

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(4);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(9);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(16);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(25);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(36);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(49);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(81);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(100);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(121);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(144);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(169);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(196);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(225);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(256);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(289);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(324);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(361);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(400);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);

      s.resize(441);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          s[n++] = s_0[i] * s_1[j];
        }
      }
    }

    // 3d Lagrange shape functions

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    // 1st derivative

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    // 2nd derivative

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_uniform, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2_0_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_2_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_0_2>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_2>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0_1_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1_0_1>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[2];
      sina::kernel::scalar_t sd_1[2];
      sina::kernel::scalar_t sd_2[2];

      sina::kernel::vector s_0(sd_0, 2);
      sina::kernel::vector s_1(sd_1, 2);
      sina::kernel::vector s_2(sd_2, 2);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 1, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 2; i++)
      {
        for (sina::kernel::index_t j = 0; j < 2; j++)
        {
          for (sina::kernel::index_t k = 0; k < 2; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[3];
      sina::kernel::scalar_t sd_1[3];
      sina::kernel::scalar_t sd_2[3];

      sina::kernel::vector s_0(sd_0, 3);
      sina::kernel::vector s_1(sd_1, 3);
      sina::kernel::vector s_2(sd_2, 3);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 2, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(27);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 3; i++)
      {
        for (sina::kernel::index_t j = 0; j < 3; j++)
        {
          for (sina::kernel::index_t k = 0; k < 3; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[4];
      sina::kernel::scalar_t sd_1[4];
      sina::kernel::scalar_t sd_2[4];

      sina::kernel::vector s_0(sd_0, 4);
      sina::kernel::vector s_1(sd_1, 4);
      sina::kernel::vector s_2(sd_2, 4);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 3, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(64);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 4; i++)
      {
        for (sina::kernel::index_t j = 0; j < 4; j++)
        {
          for (sina::kernel::index_t k = 0; k < 4; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[5];
      sina::kernel::scalar_t sd_1[5];
      sina::kernel::scalar_t sd_2[5];

      sina::kernel::vector s_0(sd_0, 5);
      sina::kernel::vector s_1(sd_1, 5);
      sina::kernel::vector s_2(sd_2, 5);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 4, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(125);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 5; i++)
      {
        for (sina::kernel::index_t j = 0; j < 5; j++)
        {
          for (sina::kernel::index_t k = 0; k < 5; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[6];
      sina::kernel::scalar_t sd_1[6];
      sina::kernel::scalar_t sd_2[6];

      sina::kernel::vector s_0(sd_0, 6);
      sina::kernel::vector s_1(sd_1, 6);
      sina::kernel::vector s_2(sd_2, 6);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 5, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(216);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 6; i++)
      {
        for (sina::kernel::index_t j = 0; j < 6; j++)
        {
          for (sina::kernel::index_t k = 0; k < 6; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[7];
      sina::kernel::scalar_t sd_1[7];
      sina::kernel::scalar_t sd_2[7];

      sina::kernel::vector s_0(sd_0, 7);
      sina::kernel::vector s_1(sd_1, 7);
      sina::kernel::vector s_2(sd_2, 7);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 6, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(343);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 7; i++)
      {
        for (sina::kernel::index_t j = 0; j < 7; j++)
        {
          for (sina::kernel::index_t k = 0; k < 7; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[8];
      sina::kernel::scalar_t sd_1[8];
      sina::kernel::scalar_t sd_2[8];

      sina::kernel::vector s_0(sd_0, 8);
      sina::kernel::vector s_1(sd_1, 8);
      sina::kernel::vector s_2(sd_2, 8);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 7, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(512);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 8; i++)
      {
        for (sina::kernel::index_t j = 0; j < 8; j++)
        {
          for (sina::kernel::index_t k = 0; k < 8; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[9];
      sina::kernel::scalar_t sd_1[9];
      sina::kernel::scalar_t sd_2[9];

      sina::kernel::vector s_0(sd_0, 9);
      sina::kernel::vector s_1(sd_1, 9);
      sina::kernel::vector s_2(sd_2, 9);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 8, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(729);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 9; i++)
      {
        for (sina::kernel::index_t j = 0; j < 9; j++)
        {
          for (sina::kernel::index_t k = 0; k < 9; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[10];
      sina::kernel::scalar_t sd_1[10];
      sina::kernel::scalar_t sd_2[10];

      sina::kernel::vector s_0(sd_0, 10);
      sina::kernel::vector s_1(sd_1, 10);
      sina::kernel::vector s_2(sd_2, 10);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 9, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 10; i++)
      {
        for (sina::kernel::index_t j = 0; j < 10; j++)
        {
          for (sina::kernel::index_t k = 0; k < 10; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[11];
      sina::kernel::scalar_t sd_1[11];
      sina::kernel::scalar_t sd_2[11];

      sina::kernel::vector s_0(sd_0, 11);
      sina::kernel::vector s_1(sd_1, 11);
      sina::kernel::vector s_2(sd_2, 11);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 10, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1331);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 11; i++)
      {
        for (sina::kernel::index_t j = 0; j < 11; j++)
        {
          for (sina::kernel::index_t k = 0; k < 11; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[12];
      sina::kernel::scalar_t sd_1[12];
      sina::kernel::scalar_t sd_2[12];

      sina::kernel::vector s_0(sd_0, 12);
      sina::kernel::vector s_1(sd_1, 12);
      sina::kernel::vector s_2(sd_2, 12);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 11, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(1728);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 12; i++)
      {
        for (sina::kernel::index_t j = 0; j < 12; j++)
        {
          for (sina::kernel::index_t k = 0; k < 12; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[13];
      sina::kernel::scalar_t sd_1[13];
      sina::kernel::scalar_t sd_2[13];

      sina::kernel::vector s_0(sd_0, 13);
      sina::kernel::vector s_1(sd_1, 13);
      sina::kernel::vector s_2(sd_2, 13);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 12, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2197);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 13; i++)
      {
        for (sina::kernel::index_t j = 0; j < 13; j++)
        {
          for (sina::kernel::index_t k = 0; k < 13; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[14];
      sina::kernel::scalar_t sd_1[14];
      sina::kernel::scalar_t sd_2[14];

      sina::kernel::vector s_0(sd_0, 14);
      sina::kernel::vector s_1(sd_1, 14);
      sina::kernel::vector s_2(sd_2, 14);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 13, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(2744);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 14; i++)
      {
        for (sina::kernel::index_t j = 0; j < 14; j++)
        {
          for (sina::kernel::index_t k = 0; k < 14; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[15];
      sina::kernel::scalar_t sd_1[15];
      sina::kernel::scalar_t sd_2[15];

      sina::kernel::vector s_0(sd_0, 15);
      sina::kernel::vector s_1(sd_1, 15);
      sina::kernel::vector s_2(sd_2, 15);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 14, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(3375);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 15; i++)
      {
        for (sina::kernel::index_t j = 0; j < 15; j++)
        {
          for (sina::kernel::index_t k = 0; k < 15; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[16];
      sina::kernel::scalar_t sd_1[16];
      sina::kernel::scalar_t sd_2[16];

      sina::kernel::vector s_0(sd_0, 16);
      sina::kernel::vector s_1(sd_1, 16);
      sina::kernel::vector s_2(sd_2, 16);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 15, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4096);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 16; i++)
      {
        for (sina::kernel::index_t j = 0; j < 16; j++)
        {
          for (sina::kernel::index_t k = 0; k < 16; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[17];
      sina::kernel::scalar_t sd_1[17];
      sina::kernel::scalar_t sd_2[17];

      sina::kernel::vector s_0(sd_0, 17);
      sina::kernel::vector s_1(sd_1, 17);
      sina::kernel::vector s_2(sd_2, 17);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 16, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(4913);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 17; i++)
      {
        for (sina::kernel::index_t j = 0; j < 17; j++)
        {
          for (sina::kernel::index_t k = 0; k < 17; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[18];
      sina::kernel::scalar_t sd_1[18];
      sina::kernel::scalar_t sd_2[18];

      sina::kernel::vector s_0(sd_0, 18);
      sina::kernel::vector s_1(sd_1, 18);
      sina::kernel::vector s_2(sd_2, 18);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 17, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(5832);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 18; i++)
      {
        for (sina::kernel::index_t j = 0; j < 18; j++)
        {
          for (sina::kernel::index_t k = 0; k < 18; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[19];
      sina::kernel::scalar_t sd_1[19];
      sina::kernel::scalar_t sd_2[19];

      sina::kernel::vector s_0(sd_0, 19);
      sina::kernel::vector s_1(sd_1, 19);
      sina::kernel::vector s_2(sd_2, 19);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 18, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(6859);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 19; i++)
      {
        for (sina::kernel::index_t j = 0; j < 19; j++)
        {
          for (sina::kernel::index_t k = 0; k < 19; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[20];
      sina::kernel::scalar_t sd_1[20];
      sina::kernel::scalar_t sd_2[20];

      sina::kernel::vector s_0(sd_0, 20);
      sina::kernel::vector s_1(sd_1, 20);
      sina::kernel::vector s_2(sd_2, 20);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 19, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(8000);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 20; i++)
      {
        for (sina::kernel::index_t j = 0; j < 20; j++)
        {
          for (sina::kernel::index_t k = 0; k < 20; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    template <> void sina::kernel::geometry::get<sina::kernel::geometry_t::brick, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1_1_0>(const sina::kernel::vector &p, sina::kernel::vector &s)
    {
      sina::kernel::vector p_0(&p[0], 1);
      sina::kernel::vector p_1(&p[1], 1);
      sina::kernel::vector p_2(&p[2], 1);

      sina::kernel::scalar_t sd_0[21];
      sina::kernel::scalar_t sd_1[21];
      sina::kernel::scalar_t sd_2[21];

      sina::kernel::vector s_0(sd_0, 21);
      sina::kernel::vector s_1(sd_1, 21);
      sina::kernel::vector s_2(sd_2, 21);

      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_0, s_0);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_1>(p_1, s_1);
      sina::kernel::geometry::get<sina::kernel::geometry_t::bar, sina::kernel::shape_function_t::lagrange_gll, 20, sina::kernel::shape_function_derivative_t::derivative_0>(p_2, s_2);

      s.resize(9261);

      sina::kernel::index_t n = 0;
      for (sina::kernel::index_t i = 0; i < 21; i++)
      {
        for (sina::kernel::index_t j = 0; j < 21; j++)
        {
          for (sina::kernel::index_t k = 0; k < 21; k++)
          {
            s[n++] = s_0[i] * s_1[j] * s_2[k];
          }
        }
      }
    }

    // 1d Gauss-Legendre points

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 1>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_1, 1, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_1, 1);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 2>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_2, 2, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_2, 2);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 3>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_3, 3, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_3, 3);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 4>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_4, 4, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_4, 4);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 5>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_5, 5, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_5, 5);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 6>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_6, 6, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_6, 6);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 7>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_7, 7, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_7, 7);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 8>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_8, 8, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_8, 8);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 9>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_9, 9, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_9, 9);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 10>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_10, 10, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_10, 10);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 11>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_11, 11, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_11, 11);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 12>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_12, 12, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_12, 12);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 13>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_13, 13, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_13, 13);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 14>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_14, 14, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_14, 14);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 15>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_15, 15, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_15, 15);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 16>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_16, 16, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_16, 16);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 17>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_17, 17, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_17, 17);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 18>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_18, 18, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_18, 18);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 19>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_19, 19, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_19, 19);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 20>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_20, 20, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_20, 20);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 21>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_21, 21, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_21, 21);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 22>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_22, 22, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_22, 22);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 23>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_23, 23, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_23, 23);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 24>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_24, 24, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_24, 24);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 25>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_25, 25, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_25, 25);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 26>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_26, 26, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_26, 26);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 27>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_27, 27, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_27, 27);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 28>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_28, 28, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_28, 28);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 29>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_29, 29, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_29, 29);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 30>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_30, 30, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_30, 30);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 31>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_31, 31, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_31, 31);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 32>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_32, 32, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_32, 32);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 33>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_33, 33, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_33, 33);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 34>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_34, 34, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_34, 34);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 35>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_35, 35, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_35, 35);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 36>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_36, 36, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_36, 36);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 37>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_37, 37, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_37, 37);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 38>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_38, 38, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_38, 38);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 39>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_39, 39, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_39, 39);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 40>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_40, 40, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_40, 40);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 41>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_41, 41, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_41, 41);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 42>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_42, 42, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_42, 42);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 43>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_43, 43, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_43, 43);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 44>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_44, 44, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_44, 44);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 45>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_45, 45, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_45, 45);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 46>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_46, 46, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_46, 46);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 47>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_47, 47, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_47, 47);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 48>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_48, 48, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_48, 48);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 49>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_49, 49, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_49, 49);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 50>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_legendre_points_50, 50, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_legendre_weights_50, 50);
    }

    // 1d Gauss-Lobatto points

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_2, 2, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_2, 2);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_3, 3, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_3, 3);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_4, 4, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_4, 4);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_5, 5, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_5, 5);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_6, 6, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_6, 6);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_7, 7, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_7, 7);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_8, 8, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_8, 8);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_9, 9, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_9, 9);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_10, 10, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_10, 10);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_11, 11, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_11, 11);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_12, 12, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_12, 12);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_13, 13, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_13, 13);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_14, 14, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_14, 14);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_15, 15, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_15, 15);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_16, 16, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_16, 16);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_17, 17, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_17, 17);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_18, 18, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_18, 18);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_19, 19, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_19, 19);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_20, 20, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_20, 20);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_21, 21, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_21, 21);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_22, 22, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_22, 22);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_23, 23, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_23, 23);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_24, 24, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_24, 24);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_25, 25, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_25, 25);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_26, 26, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_26, 26);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_27, 27, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_27, 27);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_28, 28, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_28, 28);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_29, 29, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_29, 29);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_30, 30, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_30, 30);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_31, 31, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_31, 31);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_32, 32, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_32, 32);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_33, 33, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_33, 33);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_34, 34, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_34, 34);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_35, 35, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_35, 35);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_36, 36, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_36, 36);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_37, 37, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_37, 37);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_38, 38, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_38, 38);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_39, 39, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_39, 39);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_40, 40, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_40, 40);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_41, 41, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_41, 41);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_42, 42, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_42, 42);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_43, 43, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_43, 43);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_44, 44, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_44, 44);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_45, 45, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_45, 45);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_46, 46, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_46, 46);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_47, 47, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_47, 47);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_48, 48, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_48, 48);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_49, 49, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_49, 49);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      points = sina::kernel::matrix(sina::kernel::detail::gauss_lobatto_points_50, 50, 1);
      weights = sina::kernel::vector(sina::kernel::detail::gauss_lobatto_weights_50, 50);
    }

    // 2d Gauss-Legendre points

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 1>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[0].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 1>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(1, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[0].data(), 1, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[0].data(), 1);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 2>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[1].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 2>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(2, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[1].data(), 4, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[1].data(), 4);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 3>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[2].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 3>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(3, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[2].data(), 9, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[2].data(), 9);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 4>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[3].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 4>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(4, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[3].data(), 16, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[3].data(), 16);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 5>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[4].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 5>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(5, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[4].data(), 25, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[4].data(), 25);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 6>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[5].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 6>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(6, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[5].data(), 36, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[5].data(), 36);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 7>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[6].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 7>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(7, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[6].data(), 49, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[6].data(), 49);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 8>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[7].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 8>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(8, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[7].data(), 64, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[7].data(), 64);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 9>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[8].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 9>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(9, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[8].data(), 81, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[8].data(), 81);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 10>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[9].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 10>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(10, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[9].data(), 100, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[9].data(), 100);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 11>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[10].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 11>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(11, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[10].data(), 121, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[10].data(), 121);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 12>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[11].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 12>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(12, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[11].data(), 144, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[11].data(), 144);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 13>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[12].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 13>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(13, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[12].data(), 169, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[12].data(), 169);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 14>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[13].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 14>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(14, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[13].data(), 196, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[13].data(), 196);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 15>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[14].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 15>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(15, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[14].data(), 225, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[14].data(), 225);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 16>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[15].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 16>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(16, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[15].data(), 256, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[15].data(), 256);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 17>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[16].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 17>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(17, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[16].data(), 289, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[16].data(), 289);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 18>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[17].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 18>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(18, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[17].data(), 324, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[17].data(), 324);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 19>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[18].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 19>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(19, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[18].data(), 361, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[18].data(), 361);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 20>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[19].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 20>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(20, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[19].data(), 400, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[19].data(), 400);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 21>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[20].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 21>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(21, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[20].data(), 441, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[20].data(), 441);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 22>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[21].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 22>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(22, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[21].data(), 484, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[21].data(), 484);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 23>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[22].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 23>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(23, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[22].data(), 529, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[22].data(), 529);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 24>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[23].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 24>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(24, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[23].data(), 576, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[23].data(), 576);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 25>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[24].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 25>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(25, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[24].data(), 625, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[24].data(), 625);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 26>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[25].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 26>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(26, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[25].data(), 676, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[25].data(), 676);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 27>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[26].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 27>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(27, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[26].data(), 729, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[26].data(), 729);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 28>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[27].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 28>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(28, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[27].data(), 784, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[27].data(), 784);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 29>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[28].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 29>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(29, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[28].data(), 841, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[28].data(), 841);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 30>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[29].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 30>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(30, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[29].data(), 900, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[29].data(), 900);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 31>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[30].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 31>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(31, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[30].data(), 961, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[30].data(), 961);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 32>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[31].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 32>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(32, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[31].data(), 1024, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[31].data(), 1024);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 33>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[32].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 33>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(33, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[32].data(), 1089, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[32].data(), 1089);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 34>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[33].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 34>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(34, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[33].data(), 1156, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[33].data(), 1156);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 35>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[34].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 35>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(35, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[34].data(), 1225, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[34].data(), 1225);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 36>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[35].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 36>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(36, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[35].data(), 1296, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[35].data(), 1296);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 37>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[36].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 37>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(37, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[36].data(), 1369, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[36].data(), 1369);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 38>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[37].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 38>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(38, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[37].data(), 1444, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[37].data(), 1444);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 39>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[38].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 39>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(39, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[38].data(), 1521, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[38].data(), 1521);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 40>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[39].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 40>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(40, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[39].data(), 1600, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[39].data(), 1600);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 41>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[40].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 41>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(41, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[40].data(), 1681, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[40].data(), 1681);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 42>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[41].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 42>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(42, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[41].data(), 1764, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[41].data(), 1764);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 43>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[42].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 43>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(43, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[42].data(), 1849, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[42].data(), 1849);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 44>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[43].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 44>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(44, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[43].data(), 1936, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[43].data(), 1936);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 45>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[44].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 45>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(45, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[44].data(), 2025, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[44].data(), 2025);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 46>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[45].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 46>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(46, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[45].data(), 2116, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[45].data(), 2116);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 47>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[46].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 47>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(47, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[46].data(), 2209, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[46].data(), 2209);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 48>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[47].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 48>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(48, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[47].data(), 2304, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[47].data(), 2304);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 49>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[48].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 49>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(49, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[48].data(), 2401, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[48].data(), 2401);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 50>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_quadrilateral[49].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 50>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_quadrilateral_points(50, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_quadrilateral[49].data(), 2500, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_quadrilateral[49].data(), 2500);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[0].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(2, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[0].data(), 4, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[0].data(), 4);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[1].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(3, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[1].data(), 9, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[1].data(), 9);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[2].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(4, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[2].data(), 16, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[2].data(), 16);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[3].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(5, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[3].data(), 25, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[3].data(), 25);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[4].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(6, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[4].data(), 36, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[4].data(), 36);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[5].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(7, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[5].data(), 49, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[5].data(), 49);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[6].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(8, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[6].data(), 64, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[6].data(), 64);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[7].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(9, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[7].data(), 81, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[7].data(), 81);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[8].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(10, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[8].data(), 100, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[8].data(), 100);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[9].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(11, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[9].data(), 121, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[9].data(), 121);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[10].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(12, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[10].data(), 144, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[10].data(), 144);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[11].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(13, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[11].data(), 169, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[11].data(), 169);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[12].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(14, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[12].data(), 196, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[12].data(), 196);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[13].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(15, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[13].data(), 225, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[13].data(), 225);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[14].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(16, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[14].data(), 256, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[14].data(), 256);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[15].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(17, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[15].data(), 289, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[15].data(), 289);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[16].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(18, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[16].data(), 324, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[16].data(), 324);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[17].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(19, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[17].data(), 361, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[17].data(), 361);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[18].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(20, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[18].data(), 400, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[18].data(), 400);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[19].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(21, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[19].data(), 441, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[19].data(), 441);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[20].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(22, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[20].data(), 484, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[20].data(), 484);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[21].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(23, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[21].data(), 529, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[21].data(), 529);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[22].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(24, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[22].data(), 576, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[22].data(), 576);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[23].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(25, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[23].data(), 625, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[23].data(), 625);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[24].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(26, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[24].data(), 676, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[24].data(), 676);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[25].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(27, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[25].data(), 729, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[25].data(), 729);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[26].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(28, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[26].data(), 784, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[26].data(), 784);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[27].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(29, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[27].data(), 841, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[27].data(), 841);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[28].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(30, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[28].data(), 900, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[28].data(), 900);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[29].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(31, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[29].data(), 961, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[29].data(), 961);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[30].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(32, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[30].data(), 1024, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[30].data(), 1024);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[31].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(33, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[31].data(), 1089, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[31].data(), 1089);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[32].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(34, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[32].data(), 1156, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[32].data(), 1156);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[33].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(35, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[33].data(), 1225, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[33].data(), 1225);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[34].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(36, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[34].data(), 1296, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[34].data(), 1296);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[35].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(37, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[35].data(), 1369, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[35].data(), 1369);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[36].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(38, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[36].data(), 1444, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[36].data(), 1444);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[37].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(39, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[37].data(), 1521, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[37].data(), 1521);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[38].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(40, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[38].data(), 1600, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[38].data(), 1600);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[39].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(41, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[39].data(), 1681, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[39].data(), 1681);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[40].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(42, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[40].data(), 1764, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[40].data(), 1764);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[41].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(43, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[41].data(), 1849, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[41].data(), 1849);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[42].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(44, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[42].data(), 1936, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[42].data(), 1936);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[43].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(45, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[43].data(), 2025, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[43].data(), 2025);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[44].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(46, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[44].data(), 2116, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[44].data(), 2116);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[45].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(47, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[45].data(), 2209, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[45].data(), 2209);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[46].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(48, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[46].data(), 2304, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[46].data(), 2304);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[47].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(49, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[47].data(), 2401, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[47].data(), 2401);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[48].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_quadrilateral_points(50, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_quadrilateral[48].data(), 2500, 2);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_quadrilateral[48].data(), 2500);
    }

    // 3d Gauss-Legendre points

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 1>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[0].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 1>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(1, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[0].data(), 1, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[0].data(), 1);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 2>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[1].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 2>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(2, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[1].data(), 8, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[1].data(), 8);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 3>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[2].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 3>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(3, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[2].data(), 27, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[2].data(), 27);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 4>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[3].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 4>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(4, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[3].data(), 64, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[3].data(), 64);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 5>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[4].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 5>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(5, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[4].data(), 125, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[4].data(), 125);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 6>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[5].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 6>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(6, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[5].data(), 216, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[5].data(), 216);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 7>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[6].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 7>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(7, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[6].data(), 343, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[6].data(), 343);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 8>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[7].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 8>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(8, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[7].data(), 512, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[7].data(), 512);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 9>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[8].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 9>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(9, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[8].data(), 729, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[8].data(), 729);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 10>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[9].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 10>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(10, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[9].data(), 1000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[9].data(), 1000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 11>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[10].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 11>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(11, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[10].data(), 1331, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[10].data(), 1331);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 12>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[11].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 12>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(12, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[11].data(), 1728, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[11].data(), 1728);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 13>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[12].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 13>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(13, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[12].data(), 2197, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[12].data(), 2197);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 14>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[13].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 14>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(14, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[13].data(), 2744, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[13].data(), 2744);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 15>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[14].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 15>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(15, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[14].data(), 3375, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[14].data(), 3375);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 16>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[15].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 16>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(16, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[15].data(), 4096, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[15].data(), 4096);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 17>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[16].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 17>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(17, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[16].data(), 4913, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[16].data(), 4913);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 18>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[17].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 18>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(18, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[17].data(), 5832, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[17].data(), 5832);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 19>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[18].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 19>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(19, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[18].data(), 6859, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[18].data(), 6859);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 20>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[19].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 20>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(20, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[19].data(), 8000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[19].data(), 8000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 21>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[20].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 21>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(21, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[20].data(), 9261, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[20].data(), 9261);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 22>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[21].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 22>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(22, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[21].data(), 10648, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[21].data(), 10648);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 23>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[22].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 23>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(23, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[22].data(), 12167, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[22].data(), 12167);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 24>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[23].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 24>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(24, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[23].data(), 13824, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[23].data(), 13824);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 25>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[24].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 25>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(25, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[24].data(), 15625, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[24].data(), 15625);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 26>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[25].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 26>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(26, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[25].data(), 17576, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[25].data(), 17576);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 27>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[26].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 27>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(27, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[26].data(), 19683, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[26].data(), 19683);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 28>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[27].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 28>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(28, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[27].data(), 21952, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[27].data(), 21952);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 29>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[28].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 29>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(29, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[28].data(), 24389, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[28].data(), 24389);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 30>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[29].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 30>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(30, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[29].data(), 27000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[29].data(), 27000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 31>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[30].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 31>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(31, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[30].data(), 29791, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[30].data(), 29791);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 32>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[31].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 32>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(32, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[31].data(), 32768, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[31].data(), 32768);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 33>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[32].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 33>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(33, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[32].data(), 35937, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[32].data(), 35937);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 34>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[33].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 34>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(34, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[33].data(), 39304, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[33].data(), 39304);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 35>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[34].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 35>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(35, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[34].data(), 42875, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[34].data(), 42875);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 36>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[35].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 36>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(36, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[35].data(), 46656, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[35].data(), 46656);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 37>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[36].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 37>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(37, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[36].data(), 50653, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[36].data(), 50653);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 38>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[37].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 38>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(38, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[37].data(), 54872, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[37].data(), 54872);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 39>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[38].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 39>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(39, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[38].data(), 59319, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[38].data(), 59319);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 40>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[39].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 40>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(40, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[39].data(), 64000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[39].data(), 64000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 41>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[40].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 41>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(41, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[40].data(), 68921, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[40].data(), 68921);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 42>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[41].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 42>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(42, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[41].data(), 74088, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[41].data(), 74088);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 43>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[42].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 43>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(43, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[42].data(), 79507, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[42].data(), 79507);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 44>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[43].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 44>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(44, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[43].data(), 85184, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[43].data(), 85184);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 45>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[44].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 45>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(45, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[44].data(), 91125, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[44].data(), 91125);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 46>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[45].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 46>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(46, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[45].data(), 97336, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[45].data(), 97336);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 47>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[46].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 47>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(47, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[46].data(), 103823, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[46].data(), 103823);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 48>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[47].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 48>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(48, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[47].data(), 110592, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[47].data(), 110592);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 49>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[48].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 49>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(49, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[48].data(), 117649, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[48].data(), 117649);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 50>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_legendre_points_brick[49].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 50>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_legendre_brick_points(50, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_legendre_points_brick[49].data(), 125000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_legendre_weights_brick[49].data(), 125000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[0].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(2, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[0].data(), 8, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[0].data(), 8);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[1].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(3, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[1].data(), 27, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[1].data(), 27);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[2].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(4, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[2].data(), 64, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[2].data(), 64);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[3].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(5, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[3].data(), 125, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[3].data(), 125);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[4].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(6, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[4].data(), 216, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[4].data(), 216);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[5].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(7, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[5].data(), 343, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[5].data(), 343);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[6].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(8, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[6].data(), 512, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[6].data(), 512);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[7].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(9, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[7].data(), 729, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[7].data(), 729);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[8].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(10, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[8].data(), 1000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[8].data(), 1000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[9].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(11, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[9].data(), 1331, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[9].data(), 1331);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[10].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(12, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[10].data(), 1728, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[10].data(), 1728);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[11].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(13, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[11].data(), 2197, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[11].data(), 2197);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[12].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(14, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[12].data(), 2744, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[12].data(), 2744);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[13].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(15, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[13].data(), 3375, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[13].data(), 3375);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[14].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(16, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[14].data(), 4096, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[14].data(), 4096);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[15].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(17, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[15].data(), 4913, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[15].data(), 4913);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[16].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(18, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[16].data(), 5832, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[16].data(), 5832);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[17].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(19, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[17].data(), 6859, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[17].data(), 6859);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[18].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(20, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[18].data(), 8000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[18].data(), 8000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[19].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(21, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[19].data(), 9261, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[19].data(), 9261);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[20].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(22, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[20].data(), 10648, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[20].data(), 10648);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[21].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(23, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[21].data(), 12167, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[21].data(), 12167);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[22].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(24, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[22].data(), 13824, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[22].data(), 13824);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[23].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(25, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[23].data(), 15625, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[23].data(), 15625);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[24].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(26, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[24].data(), 17576, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[24].data(), 17576);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[25].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(27, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[25].data(), 19683, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[25].data(), 19683);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[26].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(28, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[26].data(), 21952, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[26].data(), 21952);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[27].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(29, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[27].data(), 24389, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[27].data(), 24389);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[28].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(30, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[28].data(), 27000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[28].data(), 27000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[29].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(31, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[29].data(), 29791, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[29].data(), 29791);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[30].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(32, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[30].data(), 32768, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[30].data(), 32768);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[31].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(33, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[31].data(), 35937, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[31].data(), 35937);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[32].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(34, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[32].data(), 39304, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[32].data(), 39304);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[33].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(35, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[33].data(), 42875, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[33].data(), 42875);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[34].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(36, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[34].data(), 46656, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[34].data(), 46656);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[35].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(37, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[35].data(), 50653, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[35].data(), 50653);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[36].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(38, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[36].data(), 54872, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[36].data(), 54872);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[37].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(39, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[37].data(), 59319, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[37].data(), 59319);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[38].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(40, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[38].data(), 64000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[38].data(), 64000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[39].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(41, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[39].data(), 68921, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[39].data(), 68921);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[40].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(42, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[40].data(), 74088, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[40].data(), 74088);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[41].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(43, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[41].data(), 79507, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[41].data(), 79507);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[42].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(44, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[42].data(), 85184, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[42].data(), 85184);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[43].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(45, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[43].data(), 91125, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[43].data(), 91125);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[44].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(46, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[44].data(), 97336, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[44].data(), 97336);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[45].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(47, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[45].data(), 103823, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[45].data(), 103823);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[46].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(48, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[46].data(), 110592, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[46].data(), 110592);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[47].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(49, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[47].data(), 117649, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[47].data(), 117649);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      if (sina::kernel::quadrature::gauss_lobatto_points_brick[48].empty())
      {
        sina::kernel::matrix points_1d;
        sina::kernel::vector weights_1d;
        
        sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(points_1d, weights_1d);
        sina::kernel::quadrature::build_gauss_lobatto_brick_points(50, points_1d, weights_1d);
      }

      points = sina::kernel::matrix(sina::kernel::quadrature::gauss_lobatto_points_brick[48].data(), 125000, 3);
      weights = sina::kernel::vector(sina::kernel::quadrature::gauss_lobatto_weights_brick[48].data(), 125000);
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre>(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      switch (order)
      {
        case 1:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 1>(points, weights);
          break;

        case 2:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 2>(points, weights);
          break;

        case 3:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 3>(points, weights);
          break;

        case 4:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 4>(points, weights);
          break;

        case 5:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 5>(points, weights);
          break;

        case 6:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 6>(points, weights);
          break;

        case 7:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 7>(points, weights);
          break;

        case 8:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 8>(points, weights);
          break;

        case 9:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 9>(points, weights);
          break;

        case 10:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 10>(points, weights);
          break;

        case 11:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 11>(points, weights);
          break;

        case 12:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 12>(points, weights);
          break;

        case 13:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 13>(points, weights);
          break;

        case 14:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 14>(points, weights);
          break;

        case 15:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 15>(points, weights);
          break;

        case 16:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 16>(points, weights);
          break;

        case 17:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 17>(points, weights);
          break;

        case 18:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 18>(points, weights);
          break;

        case 19:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 19>(points, weights);
          break;

        case 20:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 20>(points, weights);
          break;

        case 21:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 21>(points, weights);
          break;

        case 22:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 22>(points, weights);
          break;

        case 23:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 23>(points, weights);
          break;

        case 24:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 24>(points, weights);
          break;

        case 25:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 25>(points, weights);
          break;

        case 26:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 26>(points, weights);
          break;

        case 27:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 27>(points, weights);
          break;

        case 28:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 28>(points, weights);
          break;

        case 29:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 29>(points, weights);
          break;

        case 30:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 30>(points, weights);
          break;

        case 31:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 31>(points, weights);
          break;

        case 32:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 32>(points, weights);
          break;

        case 33:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 33>(points, weights);
          break;

        case 34:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 34>(points, weights);
          break;

        case 35:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 35>(points, weights);
          break;

        case 36:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 36>(points, weights);
          break;

        case 37:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 37>(points, weights);
          break;

        case 38:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 38>(points, weights);
          break;

        case 39:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 39>(points, weights);
          break;

        case 40:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 40>(points, weights);
          break;

        case 41:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 41>(points, weights);
          break;

        case 42:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 42>(points, weights);
          break;

        case 43:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 43>(points, weights);
          break;

        case 44:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 44>(points, weights);
          break;

        case 45:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 45>(points, weights);
          break;

        case 46:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 46>(points, weights);
          break;

        case 47:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 47>(points, weights);
          break;

        case 48:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 48>(points, weights);
          break;

        case 49:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 49>(points, weights);
          break;

        case 50:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_legendre, 50>(points, weights);
          break;

        default:

          SINA_NOT_IMPLEMENTED();
          break;
      }
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto>(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      switch (order)
      {
        case 2:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(points, weights);
          break;

        case 3:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(points, weights);
          break;

        case 4:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(points, weights);
          break;

        case 5:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(points, weights);
          break;

        case 6:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(points, weights);
          break;

        case 7:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(points, weights);
          break;

        case 8:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(points, weights);
          break;

        case 9:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(points, weights);
          break;

        case 10:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(points, weights);
          break;

        case 11:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(points, weights);
          break;

        case 12:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(points, weights);
          break;

        case 13:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(points, weights);
          break;

        case 14:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(points, weights);
          break;

        case 15:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(points, weights);
          break;

        case 16:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(points, weights);
          break;

        case 17:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(points, weights);
          break;

        case 18:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(points, weights);
          break;

        case 19:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(points, weights);
          break;

        case 20:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(points, weights);
          break;

        case 21:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(points, weights);
          break;

        case 22:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(points, weights);
          break;

        case 23:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(points, weights);
          break;

        case 24:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(points, weights);
          break;

        case 25:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(points, weights);
          break;

        case 26:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(points, weights);
          break;

        case 27:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(points, weights);
          break;

        case 28:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(points, weights);
          break;

        case 29:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(points, weights);
          break;

        case 30:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(points, weights);
          break;

        case 31:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(points, weights);
          break;

        case 32:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(points, weights);
          break;

        case 33:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(points, weights);
          break;

        case 34:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(points, weights);
          break;

        case 35:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(points, weights);
          break;

        case 36:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(points, weights);
          break;

        case 37:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(points, weights);
          break;

        case 38:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(points, weights);
          break;

        case 39:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(points, weights);
          break;

        case 40:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(points, weights);
          break;

        case 41:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(points, weights);
          break;

        case 42:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(points, weights);
          break;

        case 43:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(points, weights);
          break;

        case 44:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(points, weights);
          break;

        case 45:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(points, weights);
          break;

        case 46:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(points, weights);
          break;

        case 47:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(points, weights);
          break;

        case 48:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(points, weights);
          break;

        case 49:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(points, weights);
          break;

        case 50:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::bar, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(points, weights);
          break;

        default:

          SINA_NOT_IMPLEMENTED();
          break;
      }
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre>(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      switch (order)
      {
        case 1:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 1>(points, weights);
          break;

        case 2:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 2>(points, weights);
          break;

        case 3:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 3>(points, weights);
          break;

        case 4:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 4>(points, weights);
          break;

        case 5:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 5>(points, weights);
          break;

        case 6:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 6>(points, weights);
          break;

        case 7:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 7>(points, weights);
          break;

        case 8:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 8>(points, weights);
          break;

        case 9:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 9>(points, weights);
          break;

        case 10:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 10>(points, weights);
          break;

        case 11:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 11>(points, weights);
          break;

        case 12:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 12>(points, weights);
          break;

        case 13:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 13>(points, weights);
          break;

        case 14:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 14>(points, weights);
          break;

        case 15:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 15>(points, weights);
          break;

        case 16:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 16>(points, weights);
          break;

        case 17:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 17>(points, weights);
          break;

        case 18:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 18>(points, weights);
          break;

        case 19:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 19>(points, weights);
          break;

        case 20:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 20>(points, weights);
          break;

        case 21:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 21>(points, weights);
          break;

        case 22:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 22>(points, weights);
          break;

        case 23:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 23>(points, weights);
          break;

        case 24:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 24>(points, weights);
          break;

        case 25:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 25>(points, weights);
          break;

        case 26:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 26>(points, weights);
          break;

        case 27:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 27>(points, weights);
          break;

        case 28:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 28>(points, weights);
          break;

        case 29:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 29>(points, weights);
          break;

        case 30:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 30>(points, weights);
          break;

        case 31:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 31>(points, weights);
          break;

        case 32:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 32>(points, weights);
          break;

        case 33:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 33>(points, weights);
          break;

        case 34:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 34>(points, weights);
          break;

        case 35:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 35>(points, weights);
          break;

        case 36:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 36>(points, weights);
          break;

        case 37:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 37>(points, weights);
          break;

        case 38:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 38>(points, weights);
          break;

        case 39:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 39>(points, weights);
          break;

        case 40:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 40>(points, weights);
          break;

        case 41:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 41>(points, weights);
          break;

        case 42:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 42>(points, weights);
          break;

        case 43:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 43>(points, weights);
          break;

        case 44:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 44>(points, weights);
          break;

        case 45:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 45>(points, weights);
          break;

        case 46:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 46>(points, weights);
          break;

        case 47:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 47>(points, weights);
          break;

        case 48:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 48>(points, weights);
          break;

        case 49:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 49>(points, weights);
          break;

        case 50:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_legendre, 50>(points, weights);
          break;

        default:

          SINA_NOT_IMPLEMENTED();
          break;        
      }
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto>(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      switch (order)
      {
        case 2:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(points, weights);
          break;

        case 3:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(points, weights);
          break;

        case 4:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(points, weights);
          break;

        case 5:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(points, weights);
          break;

        case 6:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(points, weights);
          break;

        case 7:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(points, weights);
          break;

        case 8:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(points, weights);
          break;

        case 9:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(points, weights);
          break;

        case 10:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(points, weights);
          break;

        case 11:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(points, weights);
          break;

        case 12:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(points, weights);
          break;

        case 13:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(points, weights);
          break;

        case 14:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(points, weights);
          break;

        case 15:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(points, weights);
          break;

        case 16:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(points, weights);
          break;

        case 17:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(points, weights);
          break;

        case 18:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(points, weights);
          break;

        case 19:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(points, weights);
          break;

        case 20:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(points, weights);
          break;

        case 21:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(points, weights);
          break;

        case 22:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(points, weights);
          break;

        case 23:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(points, weights);
          break;

        case 24:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(points, weights);
          break;

        case 25:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(points, weights);
          break;

        case 26:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(points, weights);
          break;

        case 27:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(points, weights);
          break;

        case 28:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(points, weights);
          break;

        case 29:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(points, weights);
          break;

        case 30:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(points, weights);
          break;

        case 31:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(points, weights);
          break;

        case 32:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(points, weights);
          break;

        case 33:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(points, weights);
          break;

        case 34:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(points, weights);
          break;

        case 35:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(points, weights);
          break;

        case 36:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(points, weights);
          break;

        case 37:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(points, weights);
          break;

        case 38:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(points, weights);
          break;

        case 39:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(points, weights);
          break;

        case 40:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(points, weights);
          break;

        case 41:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(points, weights);
          break;

        case 42:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(points, weights);
          break;

        case 43:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(points, weights);
          break;

        case 44:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(points, weights);
          break;

        case 45:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(points, weights);
          break;

        case 46:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(points, weights);
          break;

        case 47:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(points, weights);
          break;

        case 48:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(points, weights);
          break;

        case 49:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(points, weights);
          break;

        case 50:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::quadrilateral, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(points, weights);
          break;

        default:

          SINA_NOT_IMPLEMENTED();
          break;
      }
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre>(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      switch (order)
      {
        case 1:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 1>(points, weights);
          break;

        case 2:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 2>(points, weights);
          break;

        case 3:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 3>(points, weights);
          break;

        case 4:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 4>(points, weights);
          break;

        case 5:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 5>(points, weights);
          break;

        case 6:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 6>(points, weights);
          break;

        case 7:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 7>(points, weights);
          break;

        case 8:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 8>(points, weights);
          break;

        case 9:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 9>(points, weights);
          break;

        case 10:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 10>(points, weights);
          break;

        case 11:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 11>(points, weights);
          break;

        case 12:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 12>(points, weights);
          break;

        case 13:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 13>(points, weights);
          break;

        case 14:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 14>(points, weights);
          break;

        case 15:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 15>(points, weights);
          break;

        case 16:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 16>(points, weights);
          break;

        case 17:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 17>(points, weights);
          break;

        case 18:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 18>(points, weights);
          break;

        case 19:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 19>(points, weights);
          break;

        case 20:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 20>(points, weights);
          break;

        case 21:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 21>(points, weights);
          break;

        case 22:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 22>(points, weights);
          break;

        case 23:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 23>(points, weights);
          break;

        case 24:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 24>(points, weights);
          break;

        case 25:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 25>(points, weights);
          break;

        case 26:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 26>(points, weights);
          break;

        case 27:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 27>(points, weights);
          break;

        case 28:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 28>(points, weights);
          break;

        case 29:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 29>(points, weights);
          break;

        case 30:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 30>(points, weights);
          break;

        case 31:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 31>(points, weights);
          break;

        case 32:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 32>(points, weights);
          break;

        case 33:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 33>(points, weights);
          break;

        case 34:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 34>(points, weights);
          break;

        case 35:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 35>(points, weights);
          break;

        case 36:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 36>(points, weights);
          break;

        case 37:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 37>(points, weights);
          break;

        case 38:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 38>(points, weights);
          break;

        case 39:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 39>(points, weights);
          break;

        case 40:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 40>(points, weights);
          break;

        case 41:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 41>(points, weights);
          break;

        case 42:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 42>(points, weights);
          break;

        case 43:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 43>(points, weights);
          break;

        case 44:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 44>(points, weights);
          break;

        case 45:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 45>(points, weights);
          break;

        case 46:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 46>(points, weights);
          break;

        case 47:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 47>(points, weights);
          break;

        case 48:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 48>(points, weights);
          break;

        case 49:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 49>(points, weights);
          break;

        case 50:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_legendre, 50>(points, weights);
          break;

        default:

          SINA_NOT_IMPLEMENTED();
          break;
      }
    }

    template <> void sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto>(const sina::kernel::index_t order, sina::kernel::matrix &points, sina::kernel::vector &weights)
    {
      switch (order)
      {
        case 2:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 2>(points, weights);
          break;

        case 3:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 3>(points, weights);
          break;

        case 4:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 4>(points, weights);
          break;

        case 5:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 5>(points, weights);
          break;

        case 6:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 6>(points, weights);
          break;

        case 7:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 7>(points, weights);
          break;

        case 8:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 8>(points, weights);
          break;

        case 9:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 9>(points, weights);
          break;

        case 10:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 10>(points, weights);
          break;

        case 11:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 11>(points, weights);
          break;

        case 12:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 12>(points, weights);
          break;

        case 13:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 13>(points, weights);
          break;

        case 14:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 14>(points, weights);
          break;

        case 15:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 15>(points, weights);
          break;

        case 16:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 16>(points, weights);
          break;

        case 17:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 17>(points, weights);
          break;

        case 18:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 18>(points, weights);
          break;

        case 19:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 19>(points, weights);
          break;

        case 20:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 20>(points, weights);
          break;

        case 21:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 21>(points, weights);
          break;

        case 22:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 22>(points, weights);
          break;

        case 23:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 23>(points, weights);
          break;

        case 24:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 24>(points, weights);
          break;

        case 25:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 25>(points, weights);
          break;

        case 26:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 26>(points, weights);
          break;

        case 27:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 27>(points, weights);
          break;

        case 28:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 28>(points, weights);
          break;

        case 29:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 29>(points, weights);
          break;

        case 30:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 30>(points, weights);
          break;

        case 31:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 31>(points, weights);
          break;

        case 32:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 32>(points, weights);
          break;

        case 33:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 33>(points, weights);
          break;

        case 34:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 34>(points, weights);
          break;

        case 35:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 35>(points, weights);
          break;

        case 36:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 36>(points, weights);
          break;

        case 37:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 37>(points, weights);
          break;

        case 38:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 38>(points, weights);
          break;

        case 39:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 39>(points, weights);
          break;

        case 40:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 40>(points, weights);
          break;

        case 41:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 41>(points, weights);
          break;

        case 42:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 42>(points, weights);
          break;

        case 43:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 43>(points, weights);
          break;

        case 44:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 44>(points, weights);
          break;

        case 45:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 45>(points, weights);
          break;

        case 46:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 46>(points, weights);
          break;

        case 47:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 47>(points, weights);
          break;

        case 48:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 48>(points, weights);
          break;

        case 49:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 49>(points, weights);
          break;

        case 50:

          sina::kernel::quadrature::get<sina::kernel::geometry_t::brick, sina::kernel::quadrature_type_t::gauss_lobatto, 50>(points, weights);
          break;

        default:

          SINA_NOT_IMPLEMENTED();
          break;
      }
    }
  }
}